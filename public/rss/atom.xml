<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://macarthur.me</id>
    <title>Alex MacArthur // Web Developer in Nashville</title>
    <updated>2022-08-30T03:54:18.617Z</updated>
    <generator>Feed for Node.js</generator>
    <author>
        <name>Alex MacArthur</name>
        <uri>https://macarthur.me</uri>
    </author>
    <link rel="alternate" href="https://macarthur.me"/>
    <link rel="self" href="https://macarthur.me/rss/atom.xml"/>
    <subtitle>I'm Alex MacArthur, a web developer in Nashville-ish, TN.</subtitle>
    <logo>https://macarthur.me/open-graph.jpg</logo>
    <icon>https://macarthur.me/favicon/apple-touch-icon.png</icon>
    <rights>All rights reserved 2022, Sreetam Das</rights>
    <entry>
        <title type="html"><![CDATA[As an Engineer, Write]]></title>
        <id>https://macarthur.me/posts/as-an-engineer-write</id>
        <link href="https://macarthur.me/posts/as-an-engineer-write"/>
        <updated>2020-06-01T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A post on behalf of my team about why growing in your craft requires writing more than just code. ...]]></summary>
        <content type="html"><![CDATA[<p>A post on behalf of my team about why growing in your craft requires writing more than just code.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Build Your Own WordPress Plugin Update Server with a Serverless Function]]></title>
        <id>https://macarthur.me/posts/serverless-wordpress-plugin-update-server</id>
        <link href="https://macarthur.me/posts/serverless-wordpress-plugin-update-server"/>
        <updated>2021-09-19T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while ago, I wrote a premium WordPress plugin for creating typewriter effects with TypeIt via shortcode or Gutenblock. I was ill-prepared for the trickiness of managing plugin updates for such a plugin. Since a premium plugin is monetized, it can’t live inside the WordPress Plugin Repository like free options...]]></summary>
        <content type="html"><![CDATA[<p>A while ago, I wrote a premium WordPress plugin for creating typewriter effects with <a href="https://typeitjs.com/" rel="nofollow">TypeIt</a> via shortcode or Gutenblock. I was ill-prepared for the trickiness of managing plugin updates for such a plugin. Since a premium plugin is monetized, it can’t live inside the WordPress Plugin Repository like free options can, and asking paying customers to manually upload the a ZIP file for each new release is a clunky, less-than-ideal option.</p>
<h2 id="serverless-to-the-rescue"><a aria-hidden="true" tabindex="-1" href="#serverless-to-the-rescue"><span class="icon icon-link"></span></a>Serverless to the Rescue</h2>
<p>The go-to solution for this problem is to set up a custom update server. With this approach, your plugin checks for updates the same way any other plugin does, but instead of asking the Plugin Repository for those updates, it’s configured to ask your server.</p>
<p>Just a short while ago, setting this up was quite a chore, since it required you to create and maintain a separate application just to allow your users to easily get updates. But with the serverless/lambda function landscape now so accessible, it’s pretty simple to roll one of these on your own with neither much hassle nor cost.</p>
<p>Let’s explore just how simple that is by setting up own serverless plugin update function that can be used to manage an unlimited number of your premium plugin updates, as well as what it takes to configure a plugin to actually use this function.</p>
<h2 id="choose-a-platform--get-set-up"><a aria-hidden="true" tabindex="-1" href="#choose-a-platform--get-set-up"><span class="icon icon-link"></span></a>Choose a Platform &amp; Get Set Up</h2>
<p>The number of companies offering serverless function platforms with minimal configuration are plenty, with the top two contenders arguably being <a href="https://www.netlify.com/" rel="nofollow">Netlify</a> and <a href="http://vercel.com/" rel="nofollow">Vercel</a>. For this setup, we’ll be using the latter, although the fundamentals are largely similar, with the primary differences being the proprietary tools and configuration patterns required by each.</p>
<h3 id="set-up-a-vercel-project"><a aria-hidden="true" tabindex="-1" href="#set-up-a-vercel-project"><span class="icon icon-link"></span></a>Set Up a Vercel Project</h3>
<p>On your machine, create a directory and initialize it as a Git repository.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">mkdir wp<span class="token operator">-</span>plugin<span class="token operator">-</span>update<span class="token operator">-</span><span class="token keyword">function</span><span class="token operator">-</span>example
cd wp<span class="token operator">-</span>plugin<span class="token operator">-</span>update<span class="token operator">-</span><span class="token keyword">function</span><span class="token operator">-</span>example
git init
</code></pre></div>
<p>After <a href="https://vercel.com/docs/cli" rel="nofollow">installing and authenticating</a> with the Vercel CLI, initialize your project by running <code>vercel</code> and following the prompts. See Vercel’s solid documentation on then <a href="https://vercel.com/docs/git" rel="nofollow">linking this new project with a remote Git repository.</a> Once you’re finished, a <code>.vercel</code> directory containing some project configuration should have been generated in the project on your machine.</p>
<h3 id="run-the-project"><a aria-hidden="true" tabindex="-1" href="#run-the-project"><span class="icon icon-link"></span></a>Run the Project</h3>
<p>After the project is initialized, spin up a local development server by running <code>vercel dev</code>. You should see a message indicating that the server is available at <code>http://localhost:3000</code> (assuming nothing else is running there already).</p>
<h2 id="create-a-basic-function-triggered-by-a-get-request"><a aria-hidden="true" tabindex="-1" href="#create-a-basic-function-triggered-by-a-get-request"><span class="icon icon-link"></span></a>Create a Basic Function Triggered by a GET Request</h2>
<p>Create an <code>api</code> directory and a file named <code>[plugin].js</code>. This’ll serve as a <a href="https://vercel.com/docs/serverless-functions/introduction#path-segments" rel="nofollow">path segment</a> that we’ll use to pass plugin slugs through to the function. You could also go with the URL query parameter approach. That decision is up to you.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">mkdir</span> api <span class="token operator">&amp;&amp;</span> <span class="token function">touch</span> <span class="token string">&quot;api/[plugin].js&quot;</span>
</code></pre></div>
<p>Inside that newly created <code>[plugin].js</code> file, let’s start with something simple just to verify things are working. Using this, we’ll pull the <code>plugin</code> parameter from the URL path – dictated by the name of our file – and immediately spit back a bit of JSON.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span> plugin <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">package</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://localhost:3000/plugins/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>plugin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/0.0.0.zip</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Now, navigate to <code>http://localhost:3000/api/our-plugin</code>, and you should see some JSON output on the screen. The structure of that blob is important; it’s what we’ll later use to communicate to a WordPress site wondering if a plugin should be updated. More on that as we go.</p>
<h3 id="retrieve-the-latest-plugin-version-information"><a aria-hidden="true" tabindex="-1" href="#retrieve-the-latest-plugin-version-information"><span class="icon icon-link"></span></a>Retrieve the Latest Plugin Version Information</h3>
<p>Next, let’s make a means of surfacing information about a particular plugin whenever a <code>GET</code> request is made to our endpoint.</p>
<p>First off, we’ll create a directory to store the ZIP files for our different plugin versions. Go ahead and create a <code>plugins/our-plugin</code> directory, and place a zipped version of our plugin within that.</p>
<p>We’re building this function in a way that only requires to you to upload newer ZIP files to the function’s repo as new plugin releases come out, leaving the older versions in place. It’s simpler to use, and it’s also handy in case customers request a download link for an older version of a plugin. If you don’t need this level of complexity, feel free to rip stuff out as desired.</p>
<p>The naming convention for that file is important, since we’ll use that for determining what the latest available version is. It should named by the version represented by the zipped contents. For example, <code>1.0.2.zip</code>. With that ZIP added to the mix, our directory tree should look something like this:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">.
├── api
│   └── plugin
│       └── [plugin].js
└── plugins
    └── our-plugin
        └── 1.0.2.zip</code></pre></div>
<h3 id="parse-latest-version-information"><a aria-hidden="true" tabindex="-1" href="#parse-latest-version-information"><span class="icon icon-link"></span></a>Parse Latest Version Information</h3>
<p>At this point, we’re ready to surface latest version data when a request is made. To do that, we’re gonna go through a series of steps:</p>
<ul>
<li>Access every available version in the <code>plugins</code> directory.</li>
<li>Filter out any non-<code>.zip</code> files (particularly while developing locally; some hidden “dot” files can sneak in).</li>
<li>Sort the file names by version, descending (go ahead and run <code>npm install compare-versions</code> for this step.</li>
<li>Grab the first file name in the list. This will be our newest version available.</li>
</ul>
<p>In code, that’ll look like this:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const compareVersions = require(&#x27;compare-versions&#x27;);</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> const { readdirSync } = require(&#x27;fs&#x27;);</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> const { join } = require(&#x27;path&#x27;);</span>
<span class="token line"></span></span>
export default (req, res) =&gt; {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     query: { plugin },</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> } = req;</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // Read all files in directory.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> const zips = readdirSync(join(process.cwd(), &#x27;plugins&#x27;, plugin))</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     // Remove any non-ZIP files.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     .filter(fileName =&gt; fileName.endsWith(&#x27;.zip&#x27;))</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     // Collect only the file names, without file extension.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     .map(fileName =&gt; fileName.match(/(.+)\.zip$/)[1])</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     // Sort those file names (which are the version numbers).</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     .sort(compareVersions).reverse();</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> const latestVersion = zips[0];</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return res.json({</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   version: &quot;0.0.0&quot;,</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   version: latestVersion,</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   package: `http://localhost:3000/plugins/${plugin}/0.0.0.zip`</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   package: `http://localhost:3000/plugins/${plugin}/${latestVersion}.zip`</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> })</span>
<span class="token line"></span></span>};
</code></pre></div>
<p>If you refresh your browser, you should see that same JSON blob we got earlier, but filled in with the correct version information:</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.2&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;package&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:3000/plugins/our-plugin/1.0.2.zip&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>There’s one more tweak we should make in case someone requests information for a plugin we don’t manage:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">const compareVersions = require(&#x27;compare-versions&#x27;);
const { readdirSync } = require(&#x27;fs&#x27;);
const { join } = require(&#x27;path&#x27;);

export default (req, res) =&gt; {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   query: { plugin },</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> } = req;</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> try {</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const zips = readdirSync(join(process.cwd(), &#x27;plugins&#x27;, plugin))</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     .filter(fileName =&gt; fileName.endsWith(&#x27;.zip&#x27;))</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     .map(fileName =&gt; fileName.match(/(.+)\.zip$/)[1])</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     .sort(compareVersions)</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     .reverse();</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const latestVersion = zips[0];</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return res.json({</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     version: latestVersion,</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     package: `http://localhost:3000/plugins/${plugin}/${latestVersion}.zip`</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   })</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> } catch (e) {</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">    return res.status(404).json({</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">      message: `Sorry, couldn&#x27;t find data for &#x27;${plugin}&#x27;.`,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">    });</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> }</span>
<span class="token line"></span></span>};
</code></pre></div>
<p>Now, if you make a request to our function using a non-existent plugin slug, you should get a <code>404</code> status code, which is a bit more appropriate for the type of error that occurred.</p>
<p>And just like that, we have our own custom plugin update server ready in place. The next piece is configuring our plugin to check for updates &amp; pull from that endpoint, rather than the WordPress Plugin Repository.</p>
<h2 id="configure-a-wordpress-plugin-to-use-update-server"><a aria-hidden="true" tabindex="-1" href="#configure-a-wordpress-plugin-to-use-update-server"><span class="icon icon-link"></span></a>Configure a WordPress Plugin to Use Update Server</h2>
<p>WordPress uses an <code>update_plugins</code> transient to keep track of which plugins have been checked for updates recently, and which are due for another check. We can hook into &amp; filter the value of that transient using the <a href="https://github.com/WordPress/wordpress-develop/blob/97790af164b20a72640b3497af4c5a3986d8cf32/src/wp-includes/option.php#L1957" rel="nofollow"><code>site_transient_update_plugins</code></a><a href="https://github.com/WordPress/wordpress-develop/blob/97790af164b20a72640b3497af4c5a3986d8cf32/src/wp-includes/option.php#L1957" rel="nofollow"> filter</a>. By doing this, we’ll be able seize control of where WordPress looks to see if an update is ready.</p>
<p>But <em>before</em> we start to stub out that filter, let’s write a simple function for fetching fresh plugin data via <code>GET</code> request to our endpoint. With the following, we’re making that request, accounting for a possible error, and returning the raw JSON.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;PLUGIN_CHECK_ENDPOINT&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;http://localhost:3000/api/our-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">fetch_remote_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$remoteData</span> <span class="token operator">=</span> <span class="token function">wp_remote_get</span><span class="token punctuation">(</span>
    <span class="token constant">PLUGIN_CHECK_ENDPOINT</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
      <span class="token string single-quoted-string">&#x27;headers&#x27;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#x27;Accept&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;application/json&#x27;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Something went wrong!</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token function">is_wp_error</span><span class="token punctuation">(</span><span class="token variable">$remoteData</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token class-name">wp_remote_retrieve_response_code</span><span class="token punctuation">(</span><span class="token variable">$remoteData</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">200</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// {</span>
  <span class="token comment">//    &quot;version&quot;:&quot;1.0.2&quot;,</span>
  <span class="token comment">//    &quot;package&quot;:&quot;http://localhost:3000/plugins/our-plugin/1.0.2.zip&quot;</span>
  <span class="token comment">// }</span>

  <span class="token keyword">return</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$remoteData</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;body&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Now, let’s tweak that to return an object with an interface expected by WordPress’s plugin update system, populating the <code>new_version</code> and <code>package</code> properties with the data from our endpoint. (If you wanna dig into that more, <a href="https://make.wordpress.org/core/2020/07/30/recommended-usage-of-the-updates-api-to-support-the-auto-updates-ui-for-plugins-and-themes-in-wordpress-5-5/" rel="nofollow">see here</a>.) As for the rest, feel free to fill things in as needed.</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">define(&quot;PLUGIN_CHECK_ENDPOINT&quot;, &quot;http://localhost:3000/api/our-plugin&quot;);

function fetch_remote_data() {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> $remoteData = wp_remote_get(</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   PLUGIN_CHECK_ENDPOINT,</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   [</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     &#x27;headers&#x27; =&gt; [</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       &#x27;Accept&#x27; =&gt; &#x27;application/json&#x27;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     ]</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   ]</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> );</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // Something went wrong!</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> if (</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     is_wp_error($remoteData) ||</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     wp_remote_retrieve_response_code($remoteData) !== 200</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> ) {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     return null;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> }</span>
<span class="token line"></span></span>
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> return json_decode($remoteData[&#x27;body&#x27;]);</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> $remoteData = json_decode($remoteData[&#x27;body&#x27;]);</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> return (object) [</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;id&#x27;            =&gt; &#x27;our-plugin/our-plugin.php&#x27;,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;slug&#x27;          =&gt; &#x27;our-plugin&#x27;,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;plugin&#x27;        =&gt; &#x27;our-plugin/our-plugin.php&#x27;,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;new_version&#x27;   =&gt; $remoteData-&gt;version,  // &lt;-- Important!</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;url&#x27;           =&gt; &#x27;https://macarthur.me&#x27;,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;package&#x27;       =&gt; $remoteData-&gt;package,  // &lt;-- Important!</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;icons&#x27;         =&gt; [],</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;banners&#x27;       =&gt; [],</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;banners_rtl&#x27;   =&gt; [],</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;tested&#x27;        =&gt; &#x27;&#x27;,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;requires_php&#x27;  =&gt; &#x27;&#x27;,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     &#x27;compatibility&#x27; =&gt; new \stdClass(),</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> ];</span>
<span class="token line"></span></span>}
</code></pre></div>
<p>Now, we’re ready to start filtering the <code>update_plugins</code> transient. To start, let’s stub out our filter and fetch the fresh data using the function we just wrote above. We’ll also pull in a means of grabbing the current installed version of our plugin, since we’ll later need to that to compare against our remote version.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;site_transient_update_plugins&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$transient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$pluginData</span> <span class="token operator">=</span> <span class="token function">fetch_remote_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token variable">$transient</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>And now, it’s as simple as doing a version comparison, which PHP makes relatively easy with it’s <code>version_compare</code> function:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> require_once(ABSPATH . &#x27;wp-admin/includes/plugin.php&#x27;);</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> $currentPluginData = get_plugin_data(__FILE__);</span>
<span class="token line"></span></span>
add_filter(&#x27;site_transient_update_plugins&#x27;, function ($transient) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> $pluginData = fetch_remote_data();</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> if (version_compare($pluginData-&gt;new_version, $currentPluginData[&quot;Version&quot;], &quot;&gt;&quot;)) {</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   $transient-&gt;response[&#x27;our-plugin/our-plugin.php&#x27;] = $pluginData;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> } else {</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   $transient-&gt;no_update[&#x27;our-plugin/our-plugin.php&#x27;] = $pluginData;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> }</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return $transient;</span>
<span class="token line"></span></span>});
</code></pre></div>
<p>The magic here is in that <code>$transient-&gt;PROPERTY</code> stuff. If our remote version is <em>larger</em> than the version we have installed, we’ll tell WordPress to prompt for an update by sticking it on the <code>response</code> property, which is an array whose keys are a WordPress site’s plugins’ root files. But if the plugin is not eligible for an update, we’re sticking it onto the <code>no_update</code> property, and no update will be prompted.</p>
<h3 id="testing-it-locally"><a aria-hidden="true" tabindex="-1" href="#testing-it-locally"><span class="icon icon-link"></span></a>Testing It Locally</h3>
<p>With things as they are, we’re <em>technically</em> sorta done. If you artificially set your local plugin’s version to something lower than what the remote endpoint is providing, you’ll see an update prompt:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8adea494-ec53-428f-b3ea-60b14de3665f/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=21030423161b3455d8e9391ed6725982d2920089e537f69c6be6216138e731d0&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>But! Unfortunately, since our update endpoint is on <code>localhost</code>, WordPress will, by default, not allow a ZIP file to be pulled from it. So, for local testing, let’s turn that feature off using the filter below. <strong>Ideally, don’t put this in your plugin’s code.</strong> You don’t want to accidentally ship it.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;http_request_args&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token variable">$args</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;reject_unsafe_urls&#x27;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token variable">$args</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>After that’s in place, there’s another key step: <strong>commit &amp; push up your plugin’s code</strong>, since it’s about to get wiped out with a “new” version, and you’ll need a way to revert it. Then, go ahead and attempt to run the update from the WordPress admin. It should work.</p>
<p>But! There’s still work to be done. In its current state, our code requires that our endpoint be hit every time it’s run. That’s an unnecessarily burdensome process (you’ll likely notice it every time you refresh the WordPress admin), especially when we have transients at our disposal.</p>
<h3 id="make-things-more-efficient"><a aria-hidden="true" tabindex="-1" href="#make-things-more-efficient"><span class="icon icon-link"></span></a>Make Things More Efficient</h3>
<p>Using a simple <a href="https://developer.wordpress.org/apis/handbook/transients/" rel="nofollow">transient</a>, we can cache the payload from our endpoint until a certain amount of time passes. Let’s set one to expire after 12 hours, and set up some simple logic to first check for a transient value before hitting our serverless function.</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">require_once(ABSPATH . &#x27;wp-admin/includes/plugin.php&#x27;);

define(&quot;PLUGIN_CHECK_TRANSIENT_EXPIRATION&quot;, 43200); // 12 hours
define(&quot;PLUGIN_CHECK_TRANSIENT_NAME&quot;, &quot;wp_update_check_our_plugin&quot;);

$currentPluginData = get_plugin_data(__FILE__);

add_filter(&#x27;site_transient_update_plugins&#x27;, function ($transient) {
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> $checkPluginTransient = get_transient(PLUGIN_CHECK_TRANSIENT_NAME);</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> $pluginData = $checkPluginTransient ?: fetch_remote_data();</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> $pluginData = fetch_remote_data();</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (version_compare($pluginData-&gt;new_version, $currentPluginData[&quot;Version&quot;], &quot;&gt;&quot;)) {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   $transient-&gt;response[&#x27;our-plugin/our-plugin.php&#x27;] = $pluginData;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> } else {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   $transient-&gt;no_update[&#x27;our-plugin/our-plugin.php&#x27;] = $pluginData;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> }</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return $transient;</span>
<span class="token line"></span></span>});
</code></pre></div>
<p>And finally, if that transient is due for a refresh, set it with what we receive from our endpoint.</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">require_once(ABSPATH . &#x27;wp-admin/includes/plugin.php&#x27;);

define(&quot;PLUGIN_CHECK_TRANSIENT_EXPIRATION&quot;, 43200); // 12 hours
define(&quot;PLUGIN_CHECK_TRANSIENT_NAME&quot;, &quot;wp_update_check_our_plugin&quot;);

$currentPluginData = get_plugin_data(__FILE__);

add_filter(&#x27;site_transient_update_plugins&#x27;, function ($transient) {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> $checkPluginTransient = get_transient(PLUGIN_CHECK_TRANSIENT_NAME);</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> $pluginData = $checkPluginTransient ?: fetch_remote_data();</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  if (!$checkPluginTransient) {</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   set_transient(</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     PLUGIN_CHECK_TRANSIENT_NAME,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     $pluginData,</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">     PLUGIN_CHECK_TRANSIENT_EXPIRATION</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   );</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> }</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (version_compare($pluginData-&gt;new_version, $currentPluginData[&quot;Version&quot;], &quot;&gt;&quot;)) {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   $transient-&gt;response[&#x27;our-plugin/our-plugin.php&#x27;] = $pluginData;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> } else {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   $transient-&gt;no_update[&#x27;our-plugin/our-plugin.php&#x27;] = $pluginData;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> }</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return $transient;</span>
<span class="token line"></span></span>});
</code></pre></div>
<p>Now, if you were to refresh your WP admin a few times, you’ll notice that things are performing much more smoothly, since our serverless function will only need to be hit every 12 hours at the most.</p>
<h2 id="see-a-live-example"><a aria-hidden="true" tabindex="-1" href="#see-a-live-example"><span class="icon icon-link"></span></a>See a Live Example</h2>
<p>Everything you’re reading here was put into practice with one of my own plugins. If you’d like to take a glace at that code (with some various adjustments to suite my specific needs), check out the repositories below:</p>
<ul>
<li><a href="https://github.com/alexmacarthur/wp-typeit" rel="nofollow">TypeIt WordPress plugin</a></li>
<li><a href="https://github.com/alexmacarthur/wp-plugin-update-lambda" rel="nofollow">serverless function</a></li>
</ul>
<h2 id="any-gotchas"><a aria-hidden="true" tabindex="-1" href="#any-gotchas"><span class="icon icon-link"></span></a>Any Gotchas?</h2>
<p>One of the primary motivators I had for writing this was the fact that I couldn’t find any ultra-clear documentation for the process myself. That said, I welcome any feedback or unexpected gotchas you hit along the way.</p>
<p>Thanks for reading!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Set Up a Quick & Dirty FTP Server on DigitalOcean]]></title>
        <id>https://macarthur.me/posts/quick-dirty-ftp-server-digital-ocean</id>
        <link href="https://macarthur.me/posts/quick-dirty-ftp-server-digital-ocean"/>
        <updated>2021-05-11T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A project of mine recently needed a simple FTP server that can give multiple different users access to the contents of specific directories (and only those directories). My technical requirements were stupid simple, the data I’d be dealing with wasn’t sensitive, and I wanted to avoid paying for an expensive...]]></summary>
        <content type="html"><![CDATA[<p>A project of mine recently needed a simple FTP server that can give multiple different users access to the contents of specific directories (and <em>only</em> those directories). My technical requirements were stupid simple, the data I’d be dealing with wasn’t sensitive, and I wanted to avoid paying for an expensive and/or complicated service, at least to start.</p>
<p>I did some brief discovery and determined that a good, ol’ DigitalOcean droplet is a great candidate for hosting a simple server like this. This is essentially a set of my beautified notes on the process of setting that up.</p>
<p>Before starting, let’s set some expectations: this implementation is very bare-bones, and it isn’t concerned with making everything as secure as possible. If you’re looking on setting up a server with an SFTP protocol, or in-depth configuration capabilities, you might need to use what you see here as the foundation, but you’ll need to search elsewhere for the rest.</p>
<h2 id="getting-started"><a aria-hidden="true" tabindex="-1" href="#getting-started"><span class="icon icon-link"></span></a>Getting Started</h2>
<p>To start, I’m assuming you have a DigitalOcean droplet running on Ubuntu, and that you’re able to access it via SSH. We’ll be spending most of our time inside the droplet, so go ahead and log in.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">ssh</span> root@YOUR.IP.ADDRESS
</code></pre></div>
<h2 id="configuring-your-ftp-server"><a aria-hidden="true" tabindex="-1" href="#configuring-your-ftp-server"><span class="icon icon-link"></span></a>Configuring Your FTP Server</h2>
<p>We’ll be using <a href="http://www.proftpd.org/" rel="nofollow">ProFTPD</a> for our FTP server. It’s a pretty reputable tool that’s straightforward to set up. Work through these steps:</p>
<p>Install the tool. The <code>update</code> may be especially important, depending on your version of Ubuntu (I’m on 20.04):</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> proftpd
</code></pre></div>
<p>Add <code>/bin/false</code> to our list of valid shells in our droplet. ProFTPD’s default configuration will require that a valid shell be used to gain access, and we’ll be using this particular value to prevent direct shell access to the system.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">&#x27;/bin/false&#x27;</span> <span class="token operator">&gt;&gt;</span> /etc/shells
</code></pre></div>
<p>Although it’s technically optional for a stupid-simple setup, you can modify the default configuration file generated when installing ProFTPD. If you want, I’d at least recommend changing the server name to something more personalized:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">vi</span> /etc/proftpd/proftpd.conf
</code></pre></div>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/82ffebcd-8ca9-4560-922c-fe21a857c128/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=d673583bbe917d0c08015efd566398c507d5447a6972345fba82ba4f111244fe&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<h2 id="setting-up-directories-users-and-permissions"><a aria-hidden="true" tabindex="-1" href="#setting-up-directories-users-and-permissions"><span class="icon icon-link"></span></a>Setting Up Directories, Users, and Permissions</h2>
<p>After that, create a new user that’ll have access to the FTP server.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">useradd</span> <span class="token parameter variable">--shell</span> /bin/false yourusername
</code></pre></div>
<p>Set a password for that user:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">passwd</span> yourusername
</code></pre></div>
<p>At this point, we need to set up specific directories that we’ll allow your users to access. To do that, let’s create one and then assign permissions to it:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">mkdir</span> /home/somedirectorychown yourusername:yourusername /home/somedirectory
</code></pre></div>
<p>With all of that in place, restart the server for everything to take effect:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">service</span> proftpd restart
</code></pre></div>
<p>And finally, let’s create an empty file in our user’s directory just to have something we can verify when we try to connect.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">&quot;Test!&quot;</span> <span class="token operator">&gt;</span> /home/somedirectory/sample.txt
</code></pre></div>
<h2 id="accessing-your-server"><a aria-hidden="true" tabindex="-1" href="#accessing-your-server"><span class="icon icon-link"></span></a>Accessing Your Server</h2>
<p>Open up an FTP client (like <a href="https://cyberduck.io/" rel="nofollow">Cyberduck</a>), fill in your IP address as the “server,” and use the credentials you created above to log in. Make sure the port is set to <code>21</code>.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/6c8e9f0f-7644-458b-afc8-2a2de8b460d0/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=d5892e033a06f7edb4ffb8d0c5a753a9479494bfb8ca17b224d3c1ffc15876a7&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>After logging in by clicking “Connect,” you should see the <code>sample.txt</code> file we created in the user’s directory.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/13bbe51a-4634-46ac-ab23-a1664e87a6e6/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=5c36b38d300ef854623a7f1a3f005a84d9d85e31048b5d67d124a3e3e531115b&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<h2 id="setting-up-a-custom-domain"><a aria-hidden="true" tabindex="-1" href="#setting-up-a-custom-domain"><span class="icon icon-link"></span></a>Setting Up a Custom Domain</h2>
<p>Although it’s not required, it’s nice to have a dedicated domain set up for users to connect to the server (ex: <code>ftp.macarthur.me</code>). To do that, create an <code>A</code> record in your DNS management tool that points to the subdomain or domain you’d like to use. In my case, that UI looked something like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8c290d13-798c-431a-84d2-1c16f1de2439/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=97b5506dc411e04b7fd9573ae6a29298112d89230290c2c2904d96a34e272ee0&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Afterwards, you should be able to point your FTP client to that new domain when connecting:</p>
<h2 id="thats-it"><a aria-hidden="true" tabindex="-1" href="#thats-it"><span class="icon icon-link"></span></a>That’s It.</h2>
<p>Told you it was quick.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blog for Your Own Sake]]></title>
        <id>https://macarthur.me/posts/blog-for-your-own-sake</id>
        <link href="https://macarthur.me/posts/blog-for-your-own-sake"/>
        <updated>2019-11-10T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[The front-end development space is exhausting. It moves too fast, contains too much, and it won’t wait for you to catch up. It’s hard. One thing that makes it eaiser is writing about it all — the problem solving, the tinkering with new technologies, the rubber duck attempts to wrap...]]></summary>
        <content type="html"><![CDATA[<p>The front-end development space is exhausting. It moves too fast, contains too much, and it won’t wait for you to catch up. It’s hard. One thing that makes it eaiser is writing about it all — the problem solving, the tinkering with new technologies, the rubber duck attempts to wrap your head around a concept. All of it. I’ve been trying to be more diligent about this, and I’ve seen benefits as a result. Here are some reasons you should do it too:</p>
<h3 id="youll-better-understand-the-solutions-that-solve-your-problems"><a aria-hidden="true" tabindex="-1" href="#youll-better-understand-the-solutions-that-solve-your-problems"><span class="icon icon-link"></span></a>You’ll better understand the solutions that solve your problems.</h3>
<p>It’s easy to stumble through an implementation that solves a problem and move on. It’s hard to understand why that implementation works in the first place, and what makes it the best choice over something else. If there’s anything that distinguishes a developer from an engineer, it’s this. So, slow down, break it down, and write it down. You’ll find satisfaction in understanding why your code works, and soon enough, you’ll be proactively solving problems before they happen, rather than reactively fixing things after they’re a mess.</p>
<h3 id="youll-become-your-own-resource"><a aria-hidden="true" tabindex="-1" href="#youll-become-your-own-resource"><span class="icon icon-link"></span></a>You’ll become your own resource.</h3>
<p>It’s startling how often I find myself facing a problem, only to remember that I’ve already solved &amp; written about something similar in the past. And sometimes, the old post that helps me out has only a thin thread of overlap. When you write, you become a resource for your future self. It’ll save you time (pulling up your own blog post is a lot quicker than a fresh Google search), you’ll get all the credit (instead of some Stack Overflow post), and it’ll make all that writing feel even more worthwhile.</p>
<h3 id="youll-look-alive"><a aria-hidden="true" tabindex="-1" href="#youll-look-alive"><span class="icon icon-link"></span></a>You’ll look alive.</h3>
<p>The old adage is true: <em>Out of (web)site, out of mind.</em> When developers don’t consistently show up and contribute in some way (blogging, open-sourcing, teaching, tweeting, <em>anything else</em>), it’s impossible to be noticed and to build any level of stature in the community. When you write, you get points for showing up, and that’s not a bad thing. Showing up means you care enough to contribute, even if what you contribute is small or useless to almost everyone else. Over time, all that showing up will oddly grow into credibility. This is more than what can be said for the clever genius who keeps their insight to themselves.</p>
<h2 id="dont-fret-it-ship-it"><a aria-hidden="true" tabindex="-1" href="#dont-fret-it-ship-it"><span class="icon icon-link"></span></a>Don’t Fret It, Ship It</h2>
<p>Quit worrying about your word count, outline, or humor. Stop caring about your rhetorical prowess so much that you’re too paralyzed to say anything at all. Jot down your jumbled, incoherent thoughts, <em>ship</em> them, and iterate on them later. There’s a thing I saw Chris Coyier tweet out once:</p>
<blockquote>
<p>Write the article you wish you found when you googled something.</p>
</blockquote>
<p><a href="https://twitter.com/chriscoyier/status/925081793576837120?ref_src=twsrc%5Etfw" rel="nofollow">October 30, 2017</a></p>
<p>I like that. The stuff you write will probably most benefit people just like you – those who hit the same problems and search for solutions the same way. Your challenges aren’t unique, and that small, choppy post might help someone else cut the corners you had to travel to get to a solution or to understand something. So, blog for your own sake. You’ll be better off for it, and others will be too.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Programmatically Create a Static Page in WordPress]]></title>
        <id>https://macarthur.me/posts/creating-static-page-in-wordpress</id>
        <link href="https://macarthur.me/posts/creating-static-page-in-wordpress"/>
        <updated>2022-01-31T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[It’s surprisingly a big pain to create a route and render a static template in WordPress without messing with the database. For example, let’s say you’d like to create a static “/error” page, and there’s no desire to have any of the content editable. You just want a particular template...]]></summary>
        <content type="html"><![CDATA[<p>It’s surprisingly a big pain to create a route and render a static template in WordPress <em>without</em> messing with the database. For example, let’s say you’d like to create a static “/error” page, and there’s no desire to have any of the content editable. You just want a particular template to render at that route every time.</p>
<p>If you give this sort of thing a Google search, you’ll find a lot of results on setting up a <a href="https://wordpress.org/support/article/creating-a-static-front-page/" rel="nofollow">“static” front page</a> (requiring a setting to be toggled in the WP admin), or using <code>page-*.php</code> <a href="https://developer.wordpress.org/themes/template-files-section/page-template-files/" rel="nofollow">templates for specific pages</a>, which also require the pages to first exist in the database.</p>
<p><strong>But what if you want to create and render content for a route entirely in PHP — 100% programmatically?</strong> It’s not straightforward (WordPress simply doesn’t lend itself best to registering routes in this way), but it’s not as complicated as you might think.</p>
<h2 id="programmatically-registering-a-route"><a aria-hidden="true" tabindex="-1" href="#programmatically-registering-a-route"><span class="icon icon-link"></span></a>Programmatically Registering a Route</h2>
<p>For this breakdown, we’re going to register a route at <code>/a-static-page</code> , and have it render <code>YOUR_THEME_DIRECTORY/static-templates/a-static-template.php</code>. If I navigate to that page on my local “sandbox” instance of WordPress (I’m using the <a href="https://wordpress.org/themes/twentynineteen/" rel="nofollow">twentynineteen</a> theme, by the way), I’ll expectedly get a 404:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/7c734db2-4659-4060-8fcb-e77a6fa871fc/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=11d2684c03935d1a6a43112b314f1a79a7d88647dddcd4a03024bcb62ec7de0e&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>In order to pull this off, we’ll rely on three distinct WordPress hooks. At the most basic level, these can all be placed in a theme’s <code>functions.php</code> file.</p>
<h3 id="create-a-rewrite-rule"><a aria-hidden="true" tabindex="-1" href="#create-a-rewrite-rule"><span class="icon icon-link"></span></a>Create a Rewrite Rule</h3>
<p>First, let’s create a rewrite rule that’ll attempt to match against a particular request path, and then <em>rewrite</em> that path into one that WordPress will use to parse and render a page. Let’s start with this:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;init&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">add_rewrite_rule</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;a-static-page/?$&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;index.php?static_template=a-static-template&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;top&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Not required. Just here for easier local development.</span>
	<span class="token function">flush_rewrite_rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>When a request comes in with a path that resembles “/a-static-page,” we’re rewriting the path to include a <code>static_template</code> query variable, whose value is the particular page template we want to render — <code>a-static-template.php</code>. Right now, however, <strong>that new query variable is useless</strong>. It’ll get filtered out as the request is parsed later on, unless we deliberate whitelist it.</p>
<h3 id="whitelist-the-custom-query-var"><a aria-hidden="true" tabindex="-1" href="#whitelist-the-custom-query-var"><span class="icon icon-link"></span></a>Whitelist the Custom Query Var</h3>
<p>To do that, we’ll use <a href="https://developer.wordpress.org/reference/hooks/query_vars/" rel="nofollow">the </a><a href="https://developer.wordpress.org/reference/hooks/query_vars/" rel="nofollow"><code>query_var</code></a><a href="https://developer.wordpress.org/reference/hooks/query_vars/" rel="nofollow"> filter</a>, which will permit our <code>static_template</code> variable to be accessible when we choose to render a custom template (or not).</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;query_vars&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$queryVars</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$queryVars</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#x27;static_template&#x27;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token variable">$queryVars</span><span class="token punctuation">;</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>There isn’t much to this piece. The <code>query_vars</code> filter provides us the permitted query variables. We’re just tacking a custom one on the end. With that in place, we’re able to use the variable to maybe render a particular template.</p>
<h3 id="conditionally-render-a-template"><a aria-hidden="true" tabindex="-1" href="#conditionally-render-a-template"><span class="icon icon-link"></span></a>Conditionally Render a Template</h3>
<p>From here on out, it’s just a matter of setting up some logic. We’ll check for our query variable. If it’s set, return the respective page template. If it’s not, return whatever template would’ve been rendered to begin with.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;template_include&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$template</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$staticQueryVarValue</span> <span class="token operator">=</span> <span class="token function">get_query_var</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;static_template&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$staticQueryVarValue</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get_stylesheet_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;/static-templates/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$staticQueryVarValue</span><span class="token punctuation">}</span></span>.php&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token variable">$template</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>If you refresh that page now, you’ll should see the content within <code>a-static-template.php</code> :</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/6b6bc7b5-3c02-4a86-aae2-d659f1013416/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=3d80e124d70b3a2e819b18e83e3ad674e5f79174ce7551176c793aaa0fe37a3f&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<h2 id="not-so-bad-right"><a aria-hidden="true" tabindex="-1" href="#not-so-bad-right"><span class="icon icon-link"></span></a>Not So Bad, Right?</h2>
<p>Obviously, this is a pretty contrived example. In a real-life case, there may be a bit more complicated logic to wade through, and you could also clean this up a bit, like always naming the custom templates after the static paths you’re registering. Whatever the case, this should provide enough of a foundation to get you moving in the right direction a little faster.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploying WordPress to WP Engine with GitHub Actions and Composer]]></title>
        <id>https://macarthur.me/posts/deploy-to-wp-engine-with-github-actions-and-composer</id>
        <link href="https://macarthur.me/posts/deploy-to-wp-engine-with-github-actions-and-composer"/>
        <updated>2021-02-12T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[It’s difficult to overstate the value of GitHub Actions in automating tasks we previously had to perform manually – deploying WordPress sites included. Recently, I was tasked with setting up a WordPress repository to automatically deploy to a WP Engine environment whenever a commit is made to a particular branch....]]></summary>
        <content type="html"><![CDATA[<p>It’s difficult to overstate the value of GitHub Actions in automating tasks we previously had to perform manually – deploying WordPress sites included. Recently, I was tasked with setting up a WordPress repository to automatically deploy to a <a href="https://wpengine.com/" rel="nofollow">WP Engine</a> environment whenever a commit is made to a particular branch. There exists a variety of actions in the marketplace for taking care of this automatically. For example, <a href="https://github.com/jovrtn/github-action-wpengine-git-deploy" rel="nofollow">this one</a> by <a href="https://ovrtn.com/" rel="nofollow">Jesse Overton</a> gets the job done well.</p>
<p>But in my particular scenerio, I also needed to install <a href="https://getcomposer.org/" rel="nofollow">Composer</a> dependencies after each deployment, and while that requirement doesn’t sound terribly complex, I was new to the WP Engine ecosystem, some fundamentals of SSH, as well as some of the basics of GitHub Actions. All that “newness” didn’t mix well, and it caused some lengthy frustrations. These frustrations spurred me to break down the entire process step-by-step. You’re reading that break-down.</p>
<p>The goal here isn’t to convince you to write your GitHub Actions workflows from scratch each time (leverage those third-party resources when you can!), but rather help bolster understanding of what’s happening behind the scenes whichever route you go, specifically as it all relates to WP Engine deployments.</p>
<h2 id="build-a-workflow-from-scratch"><a aria-hidden="true" tabindex="-1" href="#build-a-workflow-from-scratch"><span class="icon icon-link"></span></a>Build a Workflow from Scratch</h2>
<p>We’re gonna walk through what it looks like to build a GitHub Actions workflow from scratch which will do the following when a commit is made to the <code>main</code> branch. At a high level, here are the steps:</p>
<ol>
<li>Check out the repository files inside the action.</li>
<li>Push the files to the WP Engine remote Git host (thereby deploying them).</li>
<li>Run <code>composer install</code> inside the remote WP Engine server to install PHP dependencies.</li>
</ol>
<p>And again, so it’s ultra clear what’s going on under the hood, we won’t be using any third-party actions to do any of it. Just a bit of proprietary GitHub stuff, SSH, and some shell scripting.</p>
<h3 id="generate--set-ssh-keys"><a aria-hidden="true" tabindex="-1" href="#generate--set-ssh-keys"><span class="icon icon-link"></span></a>Generate &amp; Set SSH Keys</h3>
<p>Before we get our hands dirty with any code, we’ll need to generate <strong>two</strong> pairs of SSH keys – one pair for authenticating with WP Engine’s Git host, and another for accessing the server itself.</p>
<p>Run the following command, which will save a new pair of keys to <code>~/.ssh/gitkey</code> and <code>~/.ssh/gitkey.pub</code> files.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">sh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-f</span> ~/.ssh/gitkey
</code></pre></div>
<p>After executing the command, run through all of the prompts until you see some neat terminal art indicating the key generation is complete. Next, generate the key we’ll use to access the server when running Composer.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">sh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-f</span> ~/.ssh/wpeaccountkey
</code></pre></div>
<h3 id="add-keys-to-wp-engine"><a aria-hidden="true" tabindex="-1" href="#add-keys-to-wp-engine"><span class="icon icon-link"></span></a>Add Keys to WP Engine</h3>
<p>In the WP Engine dashboard, we’ll now need to add the newly created Git SSH key to each environment to which we’ll deploy. In reality, you’ll probably have multiple environments, but our purposes, we’ll just focus on one. In that evironment, head to the “Git Push” page, which will look something like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/34e56ba6-598a-4776-9c43-685ff69a4921/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=b1d2207577a3bdbf086e2d0057d53594c2204b1019b16e6c6b2df3f311a8dbef&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Copy the first <em>public</em> key we created by running <code>pbcopy &lt; ~/.ssh/gitkey.pub</code> and paste that value into the “SSH public key” field you see above. Give the key a name and save it.</p>
<p>With our Git SSH key in place, we’ll need to do the same for configuring WP Engine to allow us to connect to the running server itself. Navigate to <a href="https://my.wpengine.com/ssh_keys" rel="nofollow">your profile</a> in the dashboard, and create a new SSH key for your account. Locally, copy the other <em>public</em> key we created by running <code>pbcopy &lt; ~/.ssh/wpeaccountkey.pub</code> and pasting it into the field.</p>
<h3 id="add-keys-to-github-secrets"><a aria-hidden="true" tabindex="-1" href="#add-keys-to-github-secrets"><span class="icon icon-link"></span></a>Add Keys to GitHub Secrets</h3>
<p>While we’re at it, we’ll also need to set the <em>private</em> keys as <a href="https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository" rel="nofollow">secrets within GitHub</a>, which we’ll later use in our script. Copy the <code>~/.ssh/wpeaccountkey</code> and <code>~/.ssh/gitkey</code> values and save them respectively as <code>SSH_PRIVATE_ACCOUNT_KEY</code> and <code>SSH_PRIVATE_GIT_KEY</code>. Once saved, the UI should look something like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f3cc90a8-b282-4b91-a9fb-6ead58da4b83/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=02a972ccaa234be1f189c3bd355347b6acafd737e38d239b272f930dc36704f5&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<h3 id="stub-out-a-shell-script"><a aria-hidden="true" tabindex="-1" href="#stub-out-a-shell-script"><span class="icon icon-link"></span></a>Stub Out a Shell Script</h3>
<p>Next up, let’s start stubbing out the deployment process in a raw Shell script. Create it in the root of your WordPress project repository with the following command:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">&#x27;#!/usr/bin/env sh&#x27;</span> <span class="token operator">&gt;</span> deploy.sh
</code></pre></div>
<h3 id="push-to-wp-engines-git-host"><a aria-hidden="true" tabindex="-1" href="#push-to-wp-engines-git-host"><span class="icon icon-link"></span></a>Push to WP Engine’s Git Host</h3>
<p>At the top of that file, let’s first set it up to push the current repository to WP Engine’s remote Git host (<code>git.wpengine.com</code>) over the SSH protocol. Let’s store some key values in some variables – where we’ll be referencing our SSH keys, the name of the site we’re deploying, as well as a couple of other values we’ll need (your site name can be found in the <a href="https://my.wpengine.com/sites" rel="nofollow">WP Engine dashboard</a>).</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff"># !/usr/bin/env sh

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> SSH_PATH=&quot;$HOME/.ssh&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> WPE_GIT_HOST=&quot;git.wpengine.com&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> WPE_ENVIRONMENT=&quot;production&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> WPE_SITE_NAME=&quot;my-staging-site&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> KNOWN_HOSTS_PATH=&quot;$SSH_PATH/known_hosts&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> SSH_PRIVATE_GIT_KEY_PATH=$SSH_PATH/gitkey</span></span>
</code></pre></div>
<p>Now, we’ll need to add this Git host to a <code>known_hosts</code> file that we’ll create, so that the system can identify it as a valid host with which we’d like to communicate.</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff"># !/usr/bin/env sh

SSH_PATH=&quot;$HOME/.ssh&quot;
WPE_GIT_HOST=&quot;git.wpengine.com&quot;
WPE_ENVIRONMENT=&quot;production&quot;
WPE_SITE_NAME=&quot;my-staging-site&quot;
KNOWN_HOSTS_PATH=&quot;$SSH_PATH/known_hosts&quot;
SSH_PRIVATE_GIT_KEY_PATH=$SSH_PATH/gitkey
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> mkdir $SSH_PATH &amp;&amp; touch $KNOWN_HOSTS_PATH</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"> ssh-keyscan -t rsa &quot;$WPE_GIT_HOST&quot; &gt;&gt; &quot;$KNOWN_HOSTS_PATH&quot;</span></span>
</code></pre></div>
<p>So far, we’re referencing a file path where our SSH key is stored, but there’s nothing there just yet. Let’s fill it with an environment variable that’ll supply the private key from our GitHub secret.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token comment"># ^ ...other stuff we&#x27;ve already written.</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$SSH_PRIVATE_GIT_KEY</span>&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;<span class="token variable">$SSH_PRIVATE_GIT_KEY_PATH</span>&quot;</span>
</code></pre></div>
<p>And let’s also add some permissions to these files, so the action has the authority to do what it needs to do. At the end of the file, add the following:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token comment"># ^ ...other stuff we&#x27;ve already written.</span>

<span class="token function">chmod</span> <span class="token number">700</span> <span class="token string">&quot;<span class="token variable">$SSH_PATH</span>&quot;</span>
<span class="token function">chmod</span> <span class="token number">644</span> <span class="token string">&quot;<span class="token variable">$KNOWN_HOSTS_PATH</span>&quot;</span>
<span class="token function">chmod</span> <span class="token number">600</span> <span class="token string">&quot;<span class="token variable">$SSH_PRIVATE_GIT_KEY_PATH</span>&quot;</span>
</code></pre></div>
<p>At this point, we’re ready to push to the remote WP Engine Git host. These lines will do it:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">git</span> config core.sshCommand <span class="token string">&quot;ssh -i <span class="token variable">$SSH_PRIVATE_GIT_KEY_PATH</span> -o UserKnownHostsFile=<span class="token variable">$KNOWN_HOSTS_PATH</span>&quot;</span>
<span class="token function">git</span> remote <span class="token function">add</span> <span class="token variable">$WPE_ENVIRONMENT</span> git@<span class="token variable">$WPE_GIT_HOST</span><span class="token builtin class-name">:</span><span class="token variable">$WPE_ENVIRONMENT</span>/<span class="token variable">$WPE_SITE_NAME</span>.git
<span class="token function">git</span> push <span class="token variable">$WPE_ENVIRONMENT</span> HEAD:master <span class="token parameter variable">--force</span>
</code></pre></div>
<p>The first line sets up Git with our SSH key for authentication. The next will add the WP Engine Git repo as our remote, and the final line pushes up the code. You’ll notice we’re being very specific about the remote branch we’re pushing too – <code>HEAD:master</code>. This is because I originally hit an error complaining that <code>src refspec master does not match any</code>. After eventually coming across this <a href="https://stackoverflow.com/a/4183856" rel="nofollow">StackOverflow answer</a>, it was resolved by being extra specific in where I was pushing my code.</p>
<p>After this runs, our code will be deployed. Try it out by running <code>sh deploy.sh</code>. If all goes well, you should see output that looks something like this:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">remote:   git.wpengine.com: validating
remote:   - warning: changes will be deployed to production application <span class="token punctuation">..</span>.
remote:   - info: validating files <span class="token keyword">in</span> 53760de <span class="token punctuation">..</span>.
remote:   - info: found application servers <span class="token punctuation">..</span>.
remote:   - success: validation complete<span class="token operator">!</span>
remote:   git.wpengine.com: deploying
remote:   - info: preparing application updates <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> done.
remote:   - info: checking submodules <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> done.
remote:   - info: ensuring permissions <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> done.
remote:   - info: deploying to production environment <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> done.
remote:   - info: purging caches <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> done.
remote:   - info: cleanup <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> done.
remote:   git.wpengine.com: complete<span class="token operator">!</span>
</code></pre></div>
<h3 id="install-composer-dependencies"><a aria-hidden="true" tabindex="-1" href="#install-composer-dependencies"><span class="icon icon-link"></span></a>Install Composer Dependencies</h3>
<p>The next piece to all of this is automatically installing Composer dependencies once our code has been pushed to WP Engine’s server.</p>
<p>First, let’s ensure that Composer is installed on the system before attempting to install those dependencies. In order to do that, we’ll run commands on the server by passing them into an <code>ssh</code> command that authenticates us. Before we can make that <code>ssh</code> command, we’ll need to set variables defining where our other SSH key – <code>wpeaccountkey</code> – is stored on our system. We’ll also need to add our SSH host to our <code>known_hosts</code> file, and set some more permissions. I’ll group this set of commands together here, with the expectation of later organizing them with what we’ve already written above (you’ll probably notice that much of this looks familiar).</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token assign-left variable">WPE_SSH_HOST</span><span class="token operator">=</span><span class="token string">&quot;developtrinity.ssh.wpengine.net&quot;</span>
<span class="token assign-left variable">SSH_PRIVATE_ACCOUNT_KEY_PATH</span><span class="token operator">=</span><span class="token variable">$SSH_PATH</span>/wpeaccountkey
<span class="token assign-left variable">DEPLOYMENT_DIRECTORY</span><span class="token operator">=</span><span class="token string">&quot;sites/yoursite&quot;</span>

<span class="token comment"># Our `known_hosts` file now exists, so no need to create it.</span>
ssh-keyscan <span class="token parameter variable">-t</span> rsa <span class="token string">&quot;<span class="token variable">$WPE_SSH_HOST</span>&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token string">&quot;<span class="token variable">$KNOWN_HOSTS_PATH</span>&quot;</span>

<span class="token comment"># Fill our key file with the value from our GitHub secret.</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$SSH_PRIVATE_ACCOUNT_KEY</span>&quot;</span> <span class="token operator">&gt;</span> <span class="token string">&quot;<span class="token variable">$SSH_PRIVATE_ACCOUNT_KEY_PATH</span>&quot;</span>

<span class="token comment"># Set file permissions.</span>
<span class="token function">chmod</span> <span class="token number">600</span> <span class="token string">&quot;<span class="token variable">$SSH_PRIVATE_ACCOUNT_KEY_PATH</span>&quot;</span>
</code></pre></div>
<p>Now, drop in the <code>ssh</code> command, with which we’ll run a series of other commands setting up and running Composer. The <code>ssh</code> command allows you to either pass one command at a time, or a path to a file with several. We’re <em>sort of</em> taking the latter approach, but faking a separate file by using an <a href="https://en.wikipedia.org/wiki/Here_document#Unix_shells" rel="nofollow"><code>EOF</code></a><a href="https://en.wikipedia.org/wiki/Here_document#Unix_shells" rel="nofollow"> block</a>:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token comment"># ^ ...other stuff we&#x27;ve already written.</span>

<span class="token function">ssh</span> <span class="token variable">$WPE_SITE_NAME</span>@<span class="token variable">$WPE_SSH_HOST</span> <span class="token parameter variable">-i</span> <span class="token variable">$SSH_PRIVATE_ACCOUNT_KEY_PATH</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">UserKnownHostsFile</span><span class="token operator">=</span><span class="token variable">$KNOWN_HOSTS_PATH</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF</span>
<span class="token string">    # commands will go here</span>
<span class="token string">EOF</span>
</code></pre></div>
<p>This is where we’ll navigate to the directory in which our project lives, install Composer and our dependencies, and do a little clean-up:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">ssh</span> <span class="token variable">$WPE_SITE_NAME</span>@<span class="token variable">$WPE_SSH_HOST</span> <span class="token parameter variable">-i</span> <span class="token variable">$SSH_PRIVATE_ACCOUNT_KEY_PATH</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">UserKnownHostsFile</span><span class="token operator">=</span><span class="token variable">$KNOWN_HOSTS_PATH</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
    # Navigate to where our site lives.
    cd <span class="token variable">$DEPLOYMENT_DIRECTORY</span>

    # Download &amp; run the Composer installer.
    curl -s https://getcomposer.org/installer | php

    # Install production dependencies.
    php composer.phar install --no-dev

    # Clean up.
    rm composer.phar
EOF</span>
</code></pre></div>
<p>At this point, our script should do all we need it to do. The next step is to execute it within the context of GitHub Actions.</p>
<h3 id="turn-our-script-into-a-workflow"><a aria-hidden="true" tabindex="-1" href="#turn-our-script-into-a-workflow"><span class="icon icon-link"></span></a>Turn Our Script into a Workflow</h3>
<p>The template for this will be fairly straightforward. Inside of our WP site repository, we’ll save this file at <code>.github/workflows/wp-engine.yml</code>:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">name: Deploy to WP Engine

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Push to WP Engine &amp;amp; Install Composer Dependencies
        run: |
          # Our script will go here!</code></pre></div>
<p>If you’re unfamiliar with these workflow files, this basic template translates as:</p>
<ul>
<li>When a commit is pushed to the <code>main</code> branch,</li>
<li>checkout the repository with the <code>actions/checkout</code> action,</li>
<li>and run our script to push to WP Engine and install Composer dependencies.</li>
</ul>
<p>The final piece of this is to paste in our finalized script. But before we do, we’ll need to make a subtle change to our environment variables. In order to pull the correct secrets from GitHub, they’ll need to be formatted as <code>${{ secrets.VARIABLE_NAME }}</code>. Here’s our completed workflow, organized &amp; annotated a bit following all of our previous work.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">name: Deploy to WP Engine

on:
  push:
    branches: [test]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Push to WP Engine &amp;amp; Install Composer Dependencies
        run: |
          # Where we&amp;#39;ll store our two SSH keys.
          SSH_PATH=&amp;quot;$HOME/.ssh&amp;quot;

          # WP Engine&amp;#39;s Git host.
          WPE_GIT_HOST=&amp;quot;git.wpengine.com&amp;quot;

          # WP Engine&amp;#39;s server SSH host.
          WPE_SSH_HOST=&amp;quot;developtrinity.ssh.wpengine.net&amp;quot;

          # WP Engine&amp;#39;s environment.
          WPE_ENVIRONMENT=&amp;quot;production&amp;quot;

          # Our site name within WP Engine.
          WPE_SITE_NAME=&amp;quot;developtrinity&amp;quot;

          # The file SSH uses to verify validity of hosts.
          KNOWN_HOSTS_PATH=&amp;quot;$SSH_PATH/known_hosts&amp;quot;

          # Path to private SSH key used to authenticate w/ WP Engine&amp;#39;s Git host.
          SSH_PRIVATE_GIT_KEY_PATH=$SSH_PATH/wpegitkey

          # Path to private SSH key used to authenticate w/ WP Engine&amp;#39;s server.
          SSH_PRIVATE_ACCOUNT_KEY_PATH=$SSH_PATH/wpeaccountkey

          # The directory within WP Engine&amp;#39;s server where our site files live.
          DEPLOYMENT_DIRECTORY=&amp;quot;sites/developtrinity&amp;quot;

          # Explicitly create the `known_hosts` file, since the next command
          # will assume it exists &amp;amp; attempt to append do it.
          mkdir $SSH_PATH &amp;amp;&amp;amp; touch $KNOWN_HOSTS_PATH

          # Add our hosts to the `known_hosts` file.
          ssh-keyscan -t rsa &amp;quot;$WPE_GIT_HOST&amp;quot; &amp;gt;&amp;gt; &amp;quot;$KNOWN_HOSTS_PATH&amp;quot;
          ssh-keyscan -t rsa &amp;quot;$WPE_SSH_HOST&amp;quot; &amp;gt;&amp;gt; &amp;quot;$KNOWN_HOSTS_PATH&amp;quot;

          # Write our SSH keys to the appropriate files.
          echo &amp;quot;${{ secrets.SSH_PRIVATE_GIT_KEY }}&amp;quot; &amp;gt; &amp;quot;$SSH_PRIVATE_GIT_KEY_PATH&amp;quot;
          echo &amp;quot;${{ secrets.SSH_PRIVATE_ACCOUNT_KEY }}&amp;quot; &amp;gt; &amp;quot;$SSH_PRIVATE_ACCOUNT_KEY_PATH&amp;quot;

          # Set file permissions.
          chmod 700 &amp;quot;$SSH_PATH&amp;quot;
          chmod 644 &amp;quot;$KNOWN_HOSTS_PATH&amp;quot;
          chmod 600 &amp;quot;$SSH_PRIVATE_GIT_KEY_PATH&amp;quot;
          chmod 600 &amp;quot;$SSH_PRIVATE_ACCOUNT_KEY_PATH&amp;quot;

          # Push code to WP Engine&amp;#39;s Git host, which will deploy it to the server.
          git config core.sshCommand &amp;quot;ssh -i $SSH_PRIVATE_GIT_KEY_PATH -o UserKnownHostsFile=$KNOWN_HOSTS_PATH&amp;quot;
          git remote add $WPE_ENVIRONMENT git@$WPE_GIT_HOST:$WPE_ENVIRONMENT/$WPE_SITE_NAME.git
          git push $WPE_ENVIRONMENT HEAD:master --force

          # Authenticate with WP Engine&amp;#39;s server to install Composer dependencies.
          ssh $WPE_SITE_NAME@$WPE_SSH_HOST -i $SSH_PRIVATE_ACCOUNT_KEY_PATH -o UserKnownHostsFile=$KNOWN_HOSTS_PATH &amp;lt;&amp;lt; EOF
            # Navigate to the directory in which our site files live.
            cd $DEPLOYMENT_DIRECTORY

            # Download the Composer installer &amp;amp; execute it.
            curl -s https://getcomposer.org/installer | php

            # Install production dependencies.
            php composer.phar install --no-dev

            # Clean up.
            rm composer.phar
          EOF</code></pre></div>
<h2 id="youre-not-finished-yet"><a aria-hidden="true" tabindex="-1" href="#youre-not-finished-yet"><span class="icon icon-link"></span></a>You’re Not Finished Yet</h2>
<p>When you commit &amp; push this workflow file to your GitHub repositroy, you should see it successfully execute everything we planned. But! You still have some work to do. In most cases, you’ll have multiple environments to configure, each of which you might want to trigger based on a different type of action (pull request, a push to a specific branch, etc.). Hopefully, this will all help you get a better grasp of how the ecosystem works, so that you feel empowered to tackle that more complicated and unique configuration yourself.</p>
<h2 id="whats-missing"><a aria-hidden="true" tabindex="-1" href="#whats-missing"><span class="icon icon-link"></span></a>What’s Missing?</h2>
<p>All of what you read here is the output of my own pain working through these challenges – basically a targeted brain dump. If any of this flow is confusing, or if I skipped a key step that led to problems when you tried it out for yourself, let me know!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remember to Probably Target an Empty Object with Object.assign()]]></title>
        <id>https://macarthur.me/posts/remember-to-probably-target-an-empty-object-with-object-assign</id>
        <link href="https://macarthur.me/posts/remember-to-probably-target-an-empty-object-with-object-assign"/>
        <updated>2019-05-16T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hearken back, for a moment, to what it was like merging objects in 2014. There was no support for the feature in JavaScript runtimes themselves, and it was quite common to find a solution to the problem by wading through StackOverflow to find something like this: Despite the advancements JavaScript...]]></summary>
        <content type="html"><![CDATA[<p>Hearken back, for a moment, to what it was like merging objects in 2014. There was no support for the feature in JavaScript runtimes themselves, and it was quite common to find a solution to the problem by wading through StackOverflow to find something like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">obj1<span class="token punctuation">,</span> obj2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> newObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attributeName <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newObject<span class="token punctuation">[</span>attributeName<span class="token punctuation">]</span> <span class="token operator">=</span> obj1<span class="token punctuation">[</span>attributeName<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attributeName <span class="token keyword">in</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    newObject<span class="token punctuation">[</span>attributeName<span class="token punctuation">]</span> <span class="token operator">=</span> obj2<span class="token punctuation">[</span>attributeName<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> newObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> var1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> var2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// { key1: &quot;value1&quot;, key2: &quot;value2&quot; }</span>
</code></pre></div>
<p>Despite the advancements JavaScript has made since then, I reminisce this approach. It’s extremely clear what’s going on when you throw values into the method. The two objects are received, and a new, separate object is returned containing the properties &amp; values of both. Neither of your arguments are modified at all, and you could continue to go on and use <code>var1</code> and <code>var2</code> elsewhere, unscathed.</p>
<p>Recently, I made the mistake in assuming that <code>Object.assign()</code> operates in a similar way. I wanted a new merged object, but I also wanted to preserve the values I passed into the method for later use.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> var1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> var2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> var3 <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>I <em>expected</em> this to leave each of my three variables with the following values:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// What I THOUGHT I&#x27;d get:</span>

var1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

var2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

var3 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span>
  <span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>But that’s not what I got. Instead, <code>var1</code> had been mutated, giving it the exact same value as <code>var3</code>:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// What I ACTUALLY got:</span>

var1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span>
  <span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

var2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

var3 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">key1</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span>
  <span class="token literal-property property">key2</span><span class="token operator">:</span> <span class="token string">&quot;value2&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Looking at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" rel="nofollow">the documentation</a> for <code>Object.assign()</code>, this makes sense. Here’s the syntax:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token spread operator">...</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>And the description is pretty clear about what it does:</p>
<p>“The Object.assign() method is used to copy the values of all enumerable own properties from one or more <em>source</em> objects to a <em>target</em> object. It will return the target object.”</p>
<p>The method makes no promises to not mutate that target object. It’ll copy over properties to it and spit it that mutated version back to you.</p>
<p>Obviously, the solution to this is pretty simple. Pass a new, empty object as the target, and you’re good to go:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">let var3 = Object.assign(var1, var2);</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">let var3 = Object.assign({}, var1, var2);</span></span>
</code></pre></div>
<p>A few more characters, a lot less frustration, and no more surprise mutations.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Formatting PHP More Efficiently with a Bash Function]]></title>
        <id>https://macarthur.me/posts/formatting-my-php-more-efficiently-with-a-bash-function</id>
        <link href="https://macarthur.me/posts/formatting-my-php-more-efficiently-with-a-bash-function"/>
        <updated>2019-04-16T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[For quite some time now, I’ve been working with a PHP application that, up until recently, had no clearly-defined coding standards in place. At some point, the decision was made to enforce PSR-2, and to do so at an incremental level. When a file is touched, format to PSR-2. To...]]></summary>
        <content type="html"><![CDATA[<p>For quite some time now, I’ve been working with a PHP application that, up until recently, had no clearly-defined coding standards in place. At some point, the decision was made to enforce PSR-2, and to do so at an incremental level. When a file is touched, format to PSR-2.</p>
<p>To do this in the command line, I’ve been using <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer" rel="nofollow">PHP-CS-Fixer</a>. It’s pretty straightforward in how it works. Call the command, pass a file, specify a standard:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">php-cs-fixer /path/to/file.php --rules=@PSR2</code></pre></div>
<p>But fairly quickly, typing all those characters added up, and it was made more difficult by the fact that I need to hold <code>SHIFT</code> + <code>2</code> in order to crank out an <code>@</code>. Woe is me!</p>
<h2 id="wrap-that-complexity-in-a-function"><a aria-hidden="true" tabindex="-1" href="#wrap-that-complexity-in-a-function"><span class="icon icon-link"></span></a>Wrap that Complexity in a Function</h2>
<p>To remedy this a bit, I turned to writing a simple Bash function to wrap up some of the work I had been doing over and over. It was a good move. Here’s how it went:</p>
<p>In my <code>~./zshrc</code> file, save the following function declaration. If you’re not using <a href="https://ohmyz.sh/" rel="nofollow">Oh My ZSH</a>, this would be placed in your <code>~/.bashrc</code> file, or the configuration file for whatever shell you’re using.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">function fphp {
    php-cs-fixer fix $1 --rules=@PSR2
}</code></pre></div>
<p>To actually use the function, you’ll need to reload your configuration file.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">source ~/.zshrc</code></pre></div>
<p>After that, you’re ready to run! Instead of specifying a long command name, pasting in the file path, and setting a standard, you can just run this to get the same result.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">fphp /path/to/file.php</code></pre></div>
<h2 id="handling-multiple-paths"><a aria-hidden="true" tabindex="-1" href="#handling-multiple-paths"><span class="icon icon-link"></span></a>Handling Multiple Paths</h2>
<p>That’s much better, but sometimes, you might want to format several different files by file path at once. Using the version of PHP-CS-Fixer that I am (2.14.0), it’s technically possible to do this, but requires <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/2390" rel="nofollow">some extra work</a> I didn’t want to deal with. Without doing that extra work, the following error is thrown:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">php-cs-fixer /path/to/file.php /path/to/some/other/file.php --rules=@PSR2</code></pre></div>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">In ConfigurationResolver.php line 579:
For multiple paths config parameter is required.</code></pre></div>
<p>Thankfully, since the functionality we want is all wrapped up in a function, it’s relatively easy to beef that sucker up to handle multiple paths as we provide them. Basically, take whatever arguments our function is given and run the same command on each of them.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">function fphp {
    for filePath in &amp;quot;$@&amp;quot;
    do
        php-cs-fixer fix $filePath --rules=@PSR2
    done
}</code></pre></div>
<p>Run <code>source ~/.zshrc</code>, and now we can easily format multiple files at once:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">fphp /path/to/file.php /path/to/some/other/file.php</code></pre></div>
<h2 id="weve-only-bashed-the-surface"><a aria-hidden="true" tabindex="-1" href="#weve-only-bashed-the-surface"><span class="icon icon-link"></span></a>We’ve Only Bashed the Surface</h2>
<p>Obviously, my use case here is pretty specific, and there are a bazillion other ways Bash funcification (just coined that; it better stick) can optimize your command line workflow. As a top-of-mind example, my teammate and <em>buddy</em> <a href="https://medium.freecodecamp.org/bash-shortcuts-to-enhance-your-git-workflow-5107d64ea0ff" rel="nofollow">Buddy Reno has written about using them</a> to awesomely overhaul how you use Git in your projects.</p>
<p>Whatever your entry point has been or will be, do your part and be generous with your findings! To start, if you’ve got a Bash-related tip that’s been helpful to you in the past, share it here!</p>
<p><a href="06de3e87-c97e-487a-931e-217387993ac9">2022-02-22-send-an-http-request-on-page-exit</a></p>
<p>A post on CSS Tricks exploring why HTTP requests sent during page navigation are at risk of abandonment, as well as options available to prevent it from happening.</p>
<p><a href="50da6983-e31b-494b-87ee-1144354395ca">2022-06-15-maps-store-objects-by-reference</a></p>
<p>No matter how many times I revisit it, I have pretty consistent track record of being tripped up by how JavaScript assigns values to variables.</p>
<h2 id="primitives-assigned-by-value"><a aria-hidden="true" tabindex="-1" href="#primitives-assigned-by-value"><span class="icon icon-link"></span></a>Primitives: Assigned by Value</h2>
<p>Primitive values (numbers, strings, etc.) are assigned by <em>value,</em> meaning that assigning one variable to another variable assigned to a primitive value will result in <em>two, distinct values</em> being stored in memory. The entire <em>value</em> is copied.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">const number1 = 100;const number2 = number1;// Variable / Memory Value:// number1 -&amp;gt; 100// number2 -&amp;gt; 100</code></pre></div>
<h2 id="objects-assigned-by-reference"><a aria-hidden="true" tabindex="-1" href="#objects-assigned-by-reference"><span class="icon icon-link"></span></a>Objects: Assigned by Reference</h2>
<p>Everything else (objects, including functions, arrays, etc.) are assigned by <em>reference</em>. Assigning a newly created object to a variable is actually creating a <em>reference</em> to that object’s location in memory. Any further variable assignments will also point to that exact same location.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">const object1 = { someProperty: &amp;#39;some value&amp;#39; };const object2 = object1;// Variable / Memory Value:// object1 -&amp;gt; { someProperty: &amp;#39;some value&amp;#39; }// object2 -&amp;gt; object1</code></pre></div>
<p>And that’s why things like this work. If you mess with the properties of an object — no matter which variable is referencing it — that central value in memory will be changed, impacting every variable pointing to it.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">let object1 = { someProperty: &amp;#39;some value&amp;#39; };let object2 = object1;let object3 = object2;let object4 = object3;let object5 = object4;object5.someProperty = &amp;#39;some OTHER value!&amp;#39;;console.log(object1);// { someProperty: &amp;#39;some OTHER value!&amp;#39; }</code></pre></div>
<h2 id="a-map-follows-the-same-rules"><a aria-hidden="true" tabindex="-1" href="#a-map-follows-the-same-rules"><span class="icon icon-link"></span></a>A Map() Follows the Same Rules</h2>
<p>This is a pretty fundamental concept in JavaScript, but that didn’t stop me from forgetting about it while dealing with a <code>Map()</code>. Just like a regular, old variable, a value inside a Map() is stored differently depending on the value’s type — primitive or otherwise. From <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get" rel="nofollow">MDN</a>:</p>
<blockquote>
<p>If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map object.</p>
</blockquote>
<p>In my case, I was working with somthing like this (highly contrived):</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html">const aMap = new Map();const anObj = {  name: &#x27;Alex&#x27;}aMap.set(&#x27;a&#x27;, anObj);aMap.set(&#x27;b&#x27;, anObj);aMap.set(&#x27;c&#x27;, anObj);aMap.get(&#x27;c&#x27;).name = &#x27;Bob&#x27;;console.table(Array.from(aMap.entries()));
</code></pre></div>
<p>While I was intending to modify the <code>name</code> only by on the <code>a</code> key, the results prints as follows:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html">| (index) |  0  |        1        |-----------------------------------|    0    | &#x27;a&#x27; | { name: &#x27;Bob&#x27; } ||    1    | &#x27;b&#x27; | { name: &#x27;Bob&#x27; } ||    2    | &#x27;c&#x27; | { name: &#x27;Bob&#x27; } |
</code></pre></div>
<p>Bob is everywhere. In hindsight, this is no surprise. <em>Primitives by value, objects by reference.</em> If I want these values to be updated independently, the answer is to duplicate the object, reserving it a new, distinct place in memory:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">const aMap = new Map();const anObj = {  name: &#x27;Alex&#x27;}- aMap.set(&#x27;a&#x27;, anObj);+ aMap.set(&#x27;a&#x27;, {...anObj});- aMap.set(&#x27;b&#x27;, anObj);+ aMap.set(&#x27;b&#x27;, {...anObj});- aMap.set(&#x27;c&#x27;, anObj);+ aMap.set(&#x27;c&#x27;, {...anObj});aMap.get(&#x27;c&#x27;).name = &#x27;Bob&#x27;;console.table(Array.from(aMap.entries()));
</code></pre></div>
<p>And with that, you’re released to update properties freely:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html">| (index) |  0  |        1         |------------------------------------|    0    | &#x27;a&#x27; | { name: &#x27;Alex&#x27; }  ||    1    | &#x27;b&#x27; | { name: &#x27;Alex&#x27; } ||    2    | &#x27;c&#x27; | { name: &#x27;Bob&#x27; } |
</code></pre></div>
<p>Just one “Bob,” as desired.</p>
<h2 id="only-a-matter-of-time"><a aria-hidden="true" tabindex="-1" href="#only-a-matter-of-time"><span class="icon icon-link"></span></a>Only a Matter of Time</h2>
<p>Stay tuned for another post basically covering the same concept within another context after it inevitably trips me up again.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[When It Makes Sense to Use a Utility Function Instead of a Polyfill]]></title>
        <id>https://macarthur.me/posts/when-it-makes-sense-to-use-a-utility-function-instead-of-a-polyfill</id>
        <link href="https://macarthur.me/posts/when-it-makes-sense-to-use-a-utility-function-instead-of-a-polyfill"/>
        <updated>2020-05-15T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Modern iterations of JavaScript have introduced some nice methods that make writing code a lot more legible, performant, and fun to write. Take, for example, the find() method on the Array prototype, which allows you to elegantly retrieve the first item in an array that meets some condition. Features like...]]></summary>
        <content type="html"><![CDATA[<p>Modern iterations of JavaScript have introduced some nice methods that make writing code a lot more legible, performant, and fun to write. Take, for example, the <code>find()</code> method on the <code>Array</code> prototype, which allows you to elegantly retrieve the first item in an array that meets some condition.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> players <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bill&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Baker&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> player <span class="token operator">=</span> players<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">===</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// {id: 9, name: &quot;Bill&quot;}</span>
</code></pre></div>
<p>Features like this are slick, so it’s a bummer when they’re not supported by your target browsers (like IE11). In those situations, it’s tempting to reach for the closest polyfill you can find, <code>npm install</code>, and press forward. But if you’re striving to keep your bundle size as slim as possible, <strong>your best option</strong> <em><strong>might</strong></em> <strong>be to write a utility function instead.</strong></p>
<h2 id="polyfills-can-be-fat"><a aria-hidden="true" tabindex="-1" href="#polyfills-can-be-fat"><span class="icon icon-link"></span></a>Polyfills Can Be Fat</h2>
<p>In many (if not most) cases, polyfill authors aim to keep their packages as close to the official specification as possible, or attempt to bridge the slight differences in how various browsers implement that feature. This makes sense – they’re written to be distributed and (often) to align with an established standard, and so they need to behave predictably and consistently regardless of how a consumer chooses to implement them.</p>
<p>Consider that <code>find()</code> method. It sounds simple, but with a good share of polyfills out there, you get a lot more than what you might expect (or need). <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill" rel="nofollow">The one provided by MDN</a>, for example, makes up 1,327 bytes:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// https://tc39.github.io/ecma262/#sec-array.prototype.find</span>
<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token property-access">find</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">,</span> <span class="token string">&quot;find&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">predicate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 1\. Let O be ? ToObject(this value).</span>
      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">throw</span> <span class="token known-class-name class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#x27;&quot;this&quot; is null or not defined&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 2\. Let len be ? ToLength(? Get(O, &quot;length&quot;)).</span>
      <span class="token keyword">var</span> len <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token comment">// 3\. If IsCallable(predicate) is false, throw a TypeError exception.</span>
      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> predicate <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">throw</span> <span class="token known-class-name class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;predicate must be a function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 4\. If thisArg was supplied, let T be thisArg; else let T be undefined.</span>
      <span class="token keyword">var</span> thisArg <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token comment">// 5\. Let k be 0.</span>
      <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token comment">// 6\. Repeat, while k &lt; len</span>
      <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// a. Let Pk be ! ToString(k).</span>
        <span class="token comment">// b. Let kValue be ? Get(O, Pk).</span>
        <span class="token comment">// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).</span>
        <span class="token comment">// d. If testResult is true, return kValue.</span>
        <span class="token keyword">var</span> kValue <span class="token operator">=</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> kValue<span class="token punctuation">,</span> k<span class="token punctuation">,</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword control-flow">return</span> kValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// e. Increase k by 1.</span>
        k<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 7\. Return undefined.</span>
      <span class="token keyword control-flow">return</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>And from what I can find, that’s a pretty common thing. The <code>Array.prototype.fill()</code> polyfill weighs in at about <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill" rel="nofollow">928 bytes</a>, <code>Array.prototype.findIndex()</code> comes in at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex#Polyfill" rel="nofollow">1,549 bytes</a>, and <code>Array.from()</code> sits at <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill" rel="nofollow">2,665 bytes</a>.</p>
<p>The range in file size will obviously vary from polyfill to polyfill, but the implication is still clear. These tools aren’t built to satisfy you and your specific context, and so that means you’ll likely be subscribing to more than what your circumstances require by leveraging them.</p>
<h2 id="a-small-utility-may-save-you-some-bytes"><a aria-hidden="true" tabindex="-1" href="#a-small-utility-may-save-you-some-bytes"><span class="icon icon-link"></span></a>A Small Utility May Save You Some Bytes</h2>
<p>When you don’t need the full scope of what a polyfill provides, you can shave some bundle weight by rolling something more specific to you. And depending on the method, it often doesn’t take much. Gander at these few examples from methods I fairly commonly use:</p>
<h3 id="a-simple-arrayprototypefind-utility"><a aria-hidden="true" tabindex="-1" href="#a-simple-arrayprototypefind-utility"><span class="icon icon-link"></span></a>A Simple <code>Array.prototype.find()</code> Utility</h3>
<p>Looking at <code>find()</code> once again, a suitable utility method might look like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">find</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> players <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bill&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Baker&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">===</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// {id: 9, name: &quot;Bill&quot;}</span>
</code></pre></div>
<h3 id="a-simple-arrayprototypefindindex-utility"><a aria-hidden="true" tabindex="-1" href="#a-simple-arrayprototypefindindex-utility"><span class="icon icon-link"></span></a>A Simple <code>Array.prototype.findIndex</code> Utility</h3>
<p>And that could be easily converted into a <code>findIndex()</code> utility as well:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">findIndex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> players <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bill&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Baker&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bo&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token function">findIndex</span><span class="token punctuation">(</span>players<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token operator">===</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 1</span>
</code></pre></div>
<h3 id="a-simple-arrayfrom-utility"><a aria-hidden="true" tabindex="-1" href="#a-simple-arrayfrom-utility"><span class="icon icon-link"></span></a>A Simple <code>Array.from()</code> Utility</h3>
<p>If you’re simply looking to convert something like a <code>NodeList</code> into an array, you could use something like this, which in this case, performs virtually the same function as <code>Array.from()</code> (in this case), and doesn’t require that you ship those extra 2,665 bytes.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">arrayFrom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arrayLikeThing</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span>arrayLikeThing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">arrayFrom</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [ ...array of nodes ]</span>
</code></pre></div>
<h3 id="a-simple-arrayprototypefill-utility"><a aria-hidden="true" tabindex="-1" href="#a-simple-arrayprototypefill-utility"><span class="icon icon-link"></span></a>A Simple <code>Array.prototype.fill()</code> Utility</h3>
<p>For one more example, here’s how a simple utility method for <code>fill()</code> might look:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fill</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> array<span class="token punctuation">,</span> value<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token keyword nil">undefined</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  end <span class="token operator">=</span> end <span class="token operator">?</span> end <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> array<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
  array<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>
    start<span class="token punctuation">,</span>
    end <span class="token operator">-</span> start<span class="token punctuation">,</span>
    array<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">concat</span><span class="token punctuation">.</span><span class="token method function property-access">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">array</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [ 1, &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;, 5 ]</span>
</code></pre></div>
<p>Again, none of these utilities serve as a straight-up replacement for what any of the native APIs provide, and <strong>they’re not intended to do everything a polyfill would do.</strong> But they get <em>your</em> job done, they’re light, and it’s reasonably straightforward to build them yourself.</p>
<h2 id="what-about-ready-made-utility-libraries"><a aria-hidden="true" tabindex="-1" href="#what-about-ready-made-utility-libraries"><span class="icon icon-link"></span></a>What about ready-made utility libraries?</h2>
<p>You might be thinking of something like <a href="https://lodash.com/" rel="nofollow">Lodash</a> here. Depending on your needs, that might be a suitable choice. Still, similar tradeoffs exist in choosing to leverage tools like this rather than whipping up a utility more unique to your needs. Libraries like Lodash are intended for wide distribution, and so the methods they provide often just do more than what your specific circumstances require.</p>
<p>For example, our <code>findIndex</code> implementation was less than 10 lines of code. But Lodash’s version is <a href="https://github.com/lodash/lodash/blob/4.6.0-npm-packages/lodash.findindex/index.js#L1743" rel="nofollow">11 lines</a>, and it also depends on a shared <code>baseFindIndex</code> method, which accounts for <a href="https://github.com/lodash/lodash/blob/4.6.0-npm-packages/lodash.findindex/index.js#L175" rel="nofollow"><em>another</em></a><a href="https://github.com/lodash/lodash/blob/4.6.0-npm-packages/lodash.findindex/index.js#L175" rel="nofollow"> 11 lines</a>.</p>
<p>Libraries like this can provide confidence that writing your own utilities may not, and it may also be a slimmer approach than pulling in a polyfill. But even so, you’ll probably be signing up for a bit of weight that you could likely avoid by rolling something yourself.</p>
<h2 id="sometimes-a-polyfill-does-make-sense"><a aria-hidden="true" tabindex="-1" href="#sometimes-a-polyfill-does-make-sense"><span class="icon icon-link"></span></a>Sometimes, a Polyfill <em>Does</em> Make Sense</h2>
<p>This definitely isn’t a blanket prescription for how you should handle feature support for older browsers. Depending on the context, it might make perfect sense to include a polyfill, lean on a utility library, or do nothing at all. A few scenarios come to mind:</p>
<ul>
<li><strong>You’re writing a library to be distributed.</strong> If that’s the case, you might want to leave your code as-is and instead require consumers to polyfill themselves when needed. This is helpful because it’ll lessen package size for a majority number of people, while still providing a path forward for the minority. In fact, it’s the approach I take with <a href="https://typeitjs.com/" rel="nofollow">TypeIt</a>. I don’t include API polyfills for IE and older, but I do document which ones people will need to include themselves, should they need to support an older browser.</li>
<li><strong>You use a particular feature a lot.</strong> If it’s become a habit to leverage a given feature, and each context is slightly varied, it might make sense to pull in a comprehensive polyfill. That piece of code, albeit beefy, might cover more specification gotchas between each implementation, and may also make it easier to transition away from the polyfill when native browser support becomes adequate. Not to mention, the ergonomics of some of these APIs are really good, and it may be worth the efficiency gains in developers getting to lean into them.</li>
<li><strong>You practice differential serving.</strong> It’s possible to automatically polyfill based on your target browsers using tools like <a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins" rel="nofollow">@babel/preset-env</a>. If you’re automating it like this, it’s become a popular pattern to generate two separate bundles – one for modern consumers, and one for legacy. This way, <em>most</em> people get a slimmer bundle, and you can freely use certain features without worrying so much about the added bloat.</li>
<li><strong>Ain’t got time 4 dat.</strong> It takes time to roll a utility function, and when you do, there’s always the chance you’ll miss something that a polyfill might have covered for you. That makes for the potential to spin your wheels when there may have been a better ROI by simply pulling in that polyfill.</li>
</ul>
<h2 id="whatever-you-do-mind-your-bundle"><a aria-hidden="true" tabindex="-1" href="#whatever-you-do-mind-your-bundle"><span class="icon icon-link"></span></a>Whatever You Do, Mind Your Bundle.</h2>
<p>Especially when so many resources are quickly available via <code>npm install</code>, it’s easy to lose sight of what’s actually ending up in your bundle (and what that means for your users). So, no matter how you approach providing new-ish features to your application, do it with your production code in mind.</p>
<p>Thanks for reading!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Removing Usernames from Password Reset Emails]]></title>
        <id>https://macarthur.me/posts/removing-usernames-from-password-reset-urls-in-woocommerce</id>
        <link href="https://macarthur.me/posts/removing-usernames-from-password-reset-urls-in-woocommerce"/>
        <updated>2018-02-05T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Securely handling personal information on the web is a pretty big deal, and one of the ways you do that is making sure none of it’s sent via query string in a URL. Things like this are bad: https://your-site.com?email=booger%40email.com In fact, Google has some clear policies explicitly prohibiting certain information...]]></summary>
        <content type="html"><![CDATA[<p>Securely handling personal information on the web is a pretty big deal, and one of the ways you do that is making sure none of it’s sent via query string in a URL. Things like this are bad:</p>
<p><code>https://your-site.com?email=booger%40email.com</code></p>
<p>In fact, Google has some clear policies explicitly prohibiting certain information from being passed through a URL, including things like <a href="https://developers.google.com/analytics/solutions/crm-integration#user_id" rel="nofollow">“email addresses, user logins, social security numbers, phone numbers or any piece of data that is deemed to be”PII&quot;</a>. And if you do send any of this information to Google, <a href="https://support.google.com/adwords/answer/6389382?hl=en" rel="nofollow">you’ll be penalized</a> until the issue is resolved.</p>
<h3 id="a-vulnerability-in-woocommerce"><a aria-hidden="true" tabindex="-1" href="#a-vulnerability-in-woocommerce"><span class="icon icon-link"></span></a>A Vulnerability in WooCommerce</h3>
<p>Out of the box, the WordPress e-commerce plugin <a href="https://woocommerce.com/" rel="nofollow">WooCommerce</a> has a weak spot in this area. Password reset emails contain a link for a user to click to reset his/her password. That link, however, contains information that could be passed to a third party (like Google Analytics), posing a threat to users’ privacy, and penalizing you for enabling it.</p>
<p>That vulnerable information is a username. Or, as WordPress often handles it, a user login. I’ll be using “username” here because I like it more. For example: <code>http://my-site.com/settings/account/lost-password/?key=NaEYetJTi6fI2HKaNfxT&amp;login=bartjansen</code></p>
<p>To better protect private information like this, the solution is relatively straightforward: <strong>Instead of passing a username, use an ID</strong>. An ID will be unique to the WordPress instance, and make it much more difficult to use to identify an individual. And from what I’ve read, <a href="https://support.google.com/adwords/answer/6389382?hl=en" rel="nofollow">Google endorses this type of approach</a>.</p>
<h3 id="how-do-i-fix-this"><a aria-hidden="true" tabindex="-1" href="#how-do-i-fix-this"><span class="icon icon-link"></span></a>How Do I Fix This?</h3>
<p>Long term, WooCommerce should change how it handles password reset emails, and I’ve already submitted a pull request to make that happen. But in the meantime, it’s relatively easy to fix it on your own site right with a few bits of code. Let’s dig into your theme…</p>
<h3 id="change-how-a-password-reset-link-is-constructed"><a aria-hidden="true" tabindex="-1" href="#change-how-a-password-reset-link-is-constructed"><span class="icon icon-link"></span></a>Change How a Password Reset Link is Constructed</h3>
<p>In each of the password reset email templates included within WooCommerce, we’ll want to use the available <code>$user_login</code> variable to get the user’s ID, and use that to construct a link that does <strong>not</strong> include a username.</p>
<p>To do this, you’ll want to copy each of these templates into a <code>woocommerce</code> directory inside your active theme. Keep the file structure in tact as you do. For example, <code>woocommerce/templates/emails/plain/customer-reset-password.php</code> will be placed in <code>your-theme-woocommerce/emails/plain/customer-reset-password.php</code>. Then, start editing.</p>
<p><strong>woocommerce/templates/emails/plain/customer-reset-password.php</strong></p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token function">phpif</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;ABSPATH&#x27;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token comment">// Exit if accessed directly}// Getting the user ID here!$user_id = get_user_by(&#x27;login&#x27;, $user_login)-&gt;ID;echo &quot;= &quot; . $email_heading . &quot; =\n\n&quot;;echo __( &#x27;Someone requested that the password be reset for the following account:&#x27;, &#x27;woocommerce&#x27; ) . &quot;\r\n\r\n&quot;;echo esc_url( network_home_url( &#x27;/&#x27; ) ) . &quot;\r\n\r\n&quot;;echo sprintf( __( &#x27;Username: %s&#x27;, &#x27;woocommerce&#x27; ), $user_login ) . &quot;\r\n\r\n&quot;;echo __( &#x27;If this was a mistake, just ignore this email and nothing will happen.&#x27;, &#x27;woocommerce&#x27; ) . &quot;\r\n\r\n&quot;;echo __( &#x27;To reset your password, visit the following address:&#x27;, &#x27;woocommerce&#x27; ) . &quot;\r\n\r\n&quot;;// Passing the user ID here!echo esc_url( add_query_arg( array( &#x27;key&#x27; =&gt; $reset_key, &#x27;id&#x27; =&gt; $user_id ), wc_get_endpoint_url( &#x27;lost-password&#x27;, &#x27;&#x27;, wc_get_page_permalink( &#x27;myaccount&#x27; ) ) ) ) . &quot;\r\n&quot;;echo &quot;\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n\n&quot;;echo apply_filters( &#x27;woocommerce_email_footer_text&#x27;, get_option( &#x27;woocommerce_email_footer_text&#x27; ) );</span></span>
</code></pre></div>
<p><strong>woocommerce/templates/emails/customer-reset-password.php</strong></p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token function">phpif</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">defined</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;ABSPATH&#x27;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token comment">// Exit if accessed directly}// Getting the user ID here!$user_id = get_user_by(&#x27;login&#x27;, $user_login)-&gt;ID;</span><span class="token delimiter important">?&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">do_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;woocommerce_email_header&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$email_heading</span><span class="token punctuation">,</span> <span class="token variable">$email</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">_e</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;Someone requested that the password be reset for the following account:&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;woocommerce&#x27;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token function">__</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;Username: %s&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;woocommerce&#x27;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$user_login</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">_e</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;If this was a mistake, just ignore this email and nothing will happen.&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;woocommerce&#x27;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">_e</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;To reset your password, visit the following address:&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;woocommerce&#x27;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>link<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">esc_url</span><span class="token punctuation">(</span> <span class="token function">add_query_arg</span><span class="token punctuation">(</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;key&#x27;</span> <span class="token operator">=&gt;</span> <span class="token variable">$reset_key</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;id&#x27;</span> <span class="token operator">=&gt;</span> <span class="token variable">$user_id</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">wc_get_endpoint_url</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;lost-password&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;&#x27;</span><span class="token punctuation">,</span> <span class="token function">wc_get_page_permalink</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;myaccount&#x27;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>            <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">_e</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;Click here to reset your password&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;woocommerce&#x27;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">do_action</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;woocommerce_email_footer&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$email</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
</code></pre></div>
<h3 id="process-a-user-id-url-variable-instead-of-username"><a aria-hidden="true" tabindex="-1" href="#process-a-user-id-url-variable-instead-of-username"><span class="icon icon-link"></span></a>Process a User ID URL Variable Instead of Username</h3>
<p>Next, we need to remove the action that requires a user login be passed in the URL, and replace it with one that accepts an <code>id</code>. We can then use that value to get the username, which will still be used when the user clicks the generated link. Do this inside your theme’s <code>functions.php</code> file.</p>
<p><strong>functions.php</strong></p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">remove_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;template_redirect&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;WC_Form_Handler::redirect_reset_password_link&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;template_redirect&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">is_account_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token global">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;key&#x27;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span> <span class="token global">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;id&#x27;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//-- Get the username by user ID.        $user_login = get_user_by(&#x27;id&#x27;, $_GET[&#x27;id&#x27;])-&gt;user_login;        $value = sprintf( &#x27;%s:%s&#x27;, wp_unslash( $user_login ), wp_unslash( $_GET[&#x27;key&#x27;] ) );        WC_Shortcode_My_Account::set_reset_password_cookie( $value );        wp_safe_redirect( add_query_arg( &#x27;show-reset-form&#x27;, &#x27;true&#x27;, wc_lostpassword_url() ) );        exit;    }});</span>
</code></pre></div>
<p>Finished. Now, when users request to reset their passwords, the links they’re sent via email will contain no reference to a username. Instead, it’ll be something like this: <code>http://my-site.com/settings/account/lost-password/?key=NaEYetJTi6fI2HKaNfxT&amp;id=23423</code></p>
<p>Your customers are safer, and you’ll have less to worry about.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Plot Proposal for Frozen III]]></title>
        <id>https://macarthur.me/posts/frozen-three-plot-proposal</id>
        <link href="https://macarthur.me/posts/frozen-three-plot-proposal"/>
        <updated>2019-12-28T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Kristoff, seeking a career more marketable than being an iceman, enrolls in a coding bootcamp in the Southern Isles, where a bitter and vengeful Prince Hans has been forced by his brothers to maintain a legacy Backbone application. Faking a change of heart, Hans befriends Kristoff, hoping to leverage his...]]></summary>
        <content type="html"><![CDATA[<p>Kristoff, seeking a career more marketable than being an iceman, enrolls in a coding bootcamp in the Southern Isles, where a bitter and vengeful Prince Hans has been forced by his brothers to maintain a legacy Backbone application.</p>
<p>Faking a change of heart, Hans befriends Kristoff, hoping to leverage his connection to Arendelle’s icing industry in order to exact revenge on the kingdom. It works, and Hans convinces Kristoff to hire him to rebuild the ice delivery e-commerce platform.</p>
<p>Hans’ software exploits a performance vulnerability in Chromium browsers (used by the vast majority of the kingdom), causing every machine to get real hot every time a purchase is made.</p>
<p>Soon enough, the kingdom’s climate begins to get dangerously warm, feeding a vicious cycle: ordering more ice causes the kingdom to get warmer, which causes people to order more ice, and so on.</p>
<p>Elsa, Anna, and the gang embark on a mission to convince all of Arendelle to switch to Firefox.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reminding Myself that Maps Store Objects by Reference Too]]></title>
        <id>https://macarthur.me/posts/maps-store-objects-by-reference</id>
        <link href="https://macarthur.me/posts/maps-store-objects-by-reference"/>
        <updated>2022-06-15T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[No matter how many times I revisit it, I have pretty consistent track record of being tripped up by how JavaScript assigns values to variables. Primitives: Assigned by Value Primitive values (numbers, strings, etc.) are assigned by value, meaning that assigning one variable to another variable assigned to a primitive...]]></summary>
        <content type="html"><![CDATA[<p>No matter how many times I revisit it, I have pretty consistent track record of being tripped up by how JavaScript assigns values to variables.</p>
<h2 id="primitives-assigned-by-value"><a aria-hidden="true" tabindex="-1" href="#primitives-assigned-by-value"><span class="icon icon-link"></span></a>Primitives: Assigned by Value</h2>
<p>Primitive values (numbers, strings, etc.) are assigned by <em>value,</em> meaning that assigning one variable to another variable assigned to a primitive value will result in <em>two, distinct values</em> being stored in memory. The entire <em>value</em> is copied.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> number1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> 
<span class="token keyword">const</span> number2 <span class="token operator">=</span> number1<span class="token punctuation">;</span> 

<span class="token comment">// Variable / Memory Value: </span>
<span class="token comment">// number1 -&gt; 100</span>
<span class="token comment">// number2 -&gt; 100</span>
</code></pre></div>
<h2 id="objects-assigned-by-reference"><a aria-hidden="true" tabindex="-1" href="#objects-assigned-by-reference"><span class="icon icon-link"></span></a>Objects: Assigned by Reference</h2>
<p>Everything else (objects, including functions, arrays, etc.) are assigned by <em>reference</em>. Assigning a newly created object to a variable is actually creating a <em>reference</em> to that object’s location in memory. Any further variable assignments will also point to that exact same location.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">someProperty</span><span class="token operator">:</span> <span class="token string">&#x27;some value&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> object2 <span class="token operator">=</span> object1<span class="token punctuation">;</span>

<span class="token comment">// Variable / Memory Value: </span>
<span class="token comment">// object1 -&gt; { someProperty: &#x27;some value&#x27; }</span>
<span class="token comment">// object2 -&gt; object1</span>
</code></pre></div>
<p>And that’s why things like this work. If you mess with the properties of an object — no matter which variable is referencing it — that central value in memory will be changed, impacting every variable pointing to it.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">someProperty</span><span class="token operator">:</span> <span class="token string">&#x27;some value&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> object2 <span class="token operator">=</span> object1<span class="token punctuation">;</span>
<span class="token keyword">let</span> object3 <span class="token operator">=</span> object2<span class="token punctuation">;</span>
<span class="token keyword">let</span> object4 <span class="token operator">=</span> object3<span class="token punctuation">;</span>
<span class="token keyword">let</span> object5 <span class="token operator">=</span> object4<span class="token punctuation">;</span>

object5<span class="token punctuation">.</span><span class="token property-access">someProperty</span> <span class="token operator">=</span> <span class="token string">&#x27;some OTHER value!&#x27;</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// { someProperty: &#x27;some OTHER value!&#x27; }</span>
</code></pre></div>
<h2 id="a-map-follows-the-same-rules"><a aria-hidden="true" tabindex="-1" href="#a-map-follows-the-same-rules"><span class="icon icon-link"></span></a>A Map() Follows the Same Rules</h2>
<p>This is a pretty fundamental concept in JavaScript, but that didn’t stop me from forgetting about it while dealing with a <code>Map()</code>. Just like a regular, old variable, a value inside a Map() is stored differently depending on the value’s type — primitive or otherwise. From <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get" rel="nofollow">MDN</a>:</p>
<blockquote>
<p>If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map object.</p>
</blockquote>
<p>In my case, I was working with somthing like this (highly contrived):</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> aMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> anObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#x27;Alex&#x27;</span>
<span class="token punctuation">}</span>

aMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;a&#x27;</span><span class="token punctuation">,</span> anObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
aMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;b&#x27;</span><span class="token punctuation">,</span> anObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
aMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;c&#x27;</span><span class="token punctuation">,</span> anObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

aMap<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">&#x27;c&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">=</span> <span class="token string">&#x27;Bob&#x27;</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">table</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>aMap<span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>While I was intending to modify the <code>name</code> only by on the <code>a</code> key, the results prints as follows:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html">| (index) |  0  |        1        |
-----------------------------------
|    0    | &#x27;a&#x27; | { name: &#x27;Bob&#x27; } |
|    1    | &#x27;b&#x27; | { name: &#x27;Bob&#x27; } |
|    2    | &#x27;c&#x27; | { name: &#x27;Bob&#x27; } |
</code></pre></div>
<p>Bob is everywhere. In hindsight, this is no surprise. <em>Primitives by value, objects by reference.</em> If I want these values to be updated independently, the answer is to duplicate the object, reserving it a new, distinct place in memory:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">const aMap = new Map();
const anObj = {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> name: &#x27;Alex&#x27;</span>
<span class="token line"></span></span>}

<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> aMap.set(&#x27;a&#x27;, anObj);</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> aMap.set(&#x27;a&#x27;, {...anObj});</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> aMap.set(&#x27;b&#x27;, anObj);</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> aMap.set(&#x27;b&#x27;, {...anObj});</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> aMap.set(&#x27;c&#x27;, anObj);</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> aMap.set(&#x27;c&#x27;, {...anObj});</span>
<span class="token line"></span></span>
aMap.get(&#x27;c&#x27;).name = &#x27;Bob&#x27;;

console.table(Array.from(aMap.entries()));
</code></pre></div>
<p>And with that, you’re released to update properties freely:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html">| (index) |  0  |        1         |
------------------------------------
|    0    | &#x27;a&#x27; | { name: &#x27;Alex&#x27; }  |
|    1    | &#x27;b&#x27; | { name: &#x27;Alex&#x27; } |
|    2    | &#x27;c&#x27; | { name: &#x27;Bob&#x27; } |
</code></pre></div>
<p>Just one “Bob,” as desired.</p>
<h2 id="only-a-matter-of-time"><a aria-hidden="true" tabindex="-1" href="#only-a-matter-of-time"><span class="icon icon-link"></span></a>Only a Matter of Time</h2>
<p>Stay tuned for another post basically covering the same concept within another context after it inevitably trips me up again.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Let’s Stop Making it Cool to Hate jQuery]]></title>
        <id>https://macarthur.me/posts/lets-stop-making-it-cool-to-hate-jquery</id>
        <link href="https://macarthur.me/posts/lets-stop-making-it-cool-to-hate-jquery"/>
        <updated>2018-03-19T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[When I started in development, beginning a new project often felt like drowning and then being asked to write some functioning JavaScript. At the time, all I needed to do was perform some DOM stuff — make an element disappear on a click, add some classes, or animate a dropdown....]]></summary>
        <content type="html"><![CDATA[<p>When I started in development, beginning a new project often felt like drowning and then being asked to write some functioning JavaScript. At the time, all I needed to do was perform some DOM stuff — make an element disappear on a click, add some classes, or animate a dropdown. For all of these tasks, jQuery provided functionality that was simple to implement, reliable across browsers, and most important at the time, easy for me to understand what the heck was going on.</p>
<p>Since then, JavaScript APIs and features have matured, browsers have stepped up their game, and educational resources have become even more accessible. As a result, dependence on jQuery has expectedly decreased. But as an unwelcomed side effect, it’s also become very cool to dump on it with a passionate, fiery rage.</p>
<p>I won’t say that you <em>can’t</em> hate jQuery, but you do need to have a legitimate reason that you can articulate, because the case to give the library the reverence it deserves is pretty solid, and the case that we should quickly run from it because “ewwww, it’s jQuery” is weak, and based on some concerns that I think are largely out of proportion.</p>
<h3 id="jquery-helped-make-the-web--and-you--what-they-are-today"><a aria-hidden="true" tabindex="-1" href="#jquery-helped-make-the-web--and-you--what-they-are-today"><span class="icon icon-link"></span></a>jQuery helped make the web – and you – what they are today.</h3>
<p>Because of how undisputed it is, we don’t even need to spend much time discussing the technical problems jQuery helped solve when it was introduced – the inconsistent browser support of JavaScript features, the lacking or convoluted JavaScript APIs, and other challenges. The fact that jQuery made development a heck of a lot faster and easier isn’t questioned. And for that, it deserves respect, as well as for the impact it had on the evolution and adoption of the language as we know it today.</p>
<p>On top of that, there’s a decent chance it also left a mark on who you are as a developer. Especially if you consider yourself to be “self-taught”, the authors of jQuery helped make entry into and competency within this field a little less painful. In fact, if it weren’t for the smoother learning curve jQuery provided, many might have thrown in the towel altogether.</p>
<p>Of course, I’m mainly speaking from personal experience. When I started myself, working with <code>$(&#x27;.class&#x27;).slideDown()</code> was far less intimidating than trying to write a CSS class with an easing transition, and then apply that class with <code>document.querySelector(&#x27;.class&#x27;).classList.add(&#x27;is-open&#x27;)</code>. And trying to take it to the next level with a vanilla rendition that would allow for dynamic height transitions was totally out of the question. (Speaking of, I’ve made a ~600 byte modern version of jQuery’s <code>slide</code> utilities that <a href="https://github.com/alexmacarthur/slide-element" rel="nofollow">you should check out</a>.)</p>
<p>I was able to do the work required of me with less training and time, and it gave me a level of satisfaction through my productivity that kept me interested in sticking with the discipline. The psychology behind it all seems to be very akin to Dave Ramsey’s <a href="https://www.ramseysolutions.com/debt/how-the-debt-snowball-method-works" rel="nofollow">debt snowball method</a>. The quick wins built momentum, encouraging me to take on more in-depth, challenging tasks as I went along. Thanks to the easy-to-grasp-and-get-crap-done API the library provided, jQuery (and other libraries like it) undeniably played a role in how effectively I became immersed in the field.</p>
<p><em><strong>“But if you’re gonna learn JavaScript, learn JavaScript! Not some abstraction of it!”</strong></em> Agreed, but take note of the type of people I’m discussing here. I’m not focusing on the people who have intentionally invested time to exclusively <em>learn</em> from the ground up, like those who’ve done so within a coding bootcamp, university curriculum, or some other structured learning. I’m speaking of the people who are already in the trenches, in that increasingly common position of being asked to do the work while simultaneously learning how any of it works. In these cases, developers can’t afford to slow their pace of production by diving into the fundamentals of JavaScript and abstain from learning abstractions like jQuery first, which often already lay hold of the codebase in which they’re working. For these people, jQuery allowed people to deliver the value being asked of them, while serving as a catalyst to immerse them into the field of web development and thereby catapulting them into continued learning.</p>
<h3 id="its-probably-not-hurting-anybody"><a aria-hidden="true" tabindex="-1" href="#its-probably-not-hurting-anybody"><span class="icon icon-link"></span></a>It’s probably not hurting anybody.</h3>
<p>While a lot of the dismissal of jQuery often just sounds like “because jQuery,” one of the more common concrete objections is the performance implications of using or sticking with the library. And it usually comes in two parts.</p>
<p><em><strong>“jQuery is HUGE!”</strong></em> Legitimate concern, but if we’re loading our scripts like we should (at the bottom of the page so they don’t block rendering, via <code>defer</code>/<code>async</code> attributes, etc.), this concern becomes significantly uh… smaller. None of these tactics completely eliminate the need to think about it, since the time required to load, parse, and execute JavaScript still impact’s user experience (namely, <a href="https://web.dev/interactive/" rel="nofollow">Time to Interactive</a>), but to fiercely dismiss a library exclusively because of the ~30kb of minified, gzipped weight it adds to your application just isn’t good enough.</p>
<p>That ‘good enough’ level drops even further when you consider how willing we are to throw in other modern packages of similar file size without a second thought. Often, the same people who want to violently kill jQuery are the same ones who are completely fine loading React + friends onto a marketing page for a lead form. But if those people also claim to so adamantly prioritize performance, the math isn’t exactly in their favor. Using <a href="https://bundlephobia.com/" rel="nofollow">Bundlephobia</a>, here’s how the sizes of each library line up:</p>
<table><thead><tr><th>Library</th><th>Minified + Gzipped</th></tr></thead><tbody><tr><td><a href="https://bundlephobia.com/package/react@17.0.2" rel="nofollow">React</a> + <a href="https://bundlephobia.com/package/react-dom@17.0.2" rel="nofollow">React DOM</a> (17.0.2)</td><td>42.2kb</td></tr><tr><td><a href="https://bundlephobia.com/package/jquery@3.6.0" rel="nofollow">jQuery (v3.6.0)</a></td><td>30.4kb</td></tr></tbody></table>
<p>Without fail, bringing up these numbers raises the tantential objection that a comparison like this isn’t black &amp; white: “<em>for specific use cases, React’s bundle size is permissible due to its specific strengths</em>.” To which I would agree, and then engage in a hearty dialogue over whether React is the only library that can claim such an exception. But even so, at this point, the goalposts have moved. We’re no longer arguing about whether a library’s size should preclude you from using it, but rather, how specific characteristics of that it may or may not warrant it.</p>
<p>So, what about the people who are concerned less about bundle size and take more serious issue with the performance of the library’s code execution itself?</p>
<p><em><strong>“jQuery is an unperformant abstraction!”</strong></em> This is the objection to jQuery in which I place the most sympathy. I like it when my JavaScript does things fast and efficiently, and specifically when it comes to DOM manipulations, native APIs and other libraries (like React) of similar size just perform better than jQuery for the type of work they were designed for. But therein lies the point… these libraries weren’t designed to compete in the same way. From the beginning, jQuery was largely used to alleviate beef we had with browsers and to make singular tasks a little easier. React, on the other hand, is designed to build reactive, declarative, state-managed user interfaces. Because of React’s underlying purpose, it’s no surprise that DOM manipulation is faster and easier to maintain. But I’d never dream of swapping out jQuery with React to handle simple, separated interactions in light of that. Implementation apples and oranges.</p>
<p>Related to that, the circumstances in which jQuery is often used just doesn’t even warrant this type of performance. I’m <em>not</em> saying it’s unimportant – just that it’s not worth upending your workflow just to get back a shred of page reflow no one would ever notice. The ROI of rushing to strip out jQuery on this basis alone is tremendously low, making it another insufficient excuse to detest it. Sometimes, it’s just a marketing site, and no one’s going to throw up their hands because your pop-up modal didn’t render seven milliseconds faster.</p>
<h3 id="but-you-probably-shouldnt-use-jquery-for-a-new-project"><a aria-hidden="true" tabindex="-1" href="#but-you-probably-shouldnt-use-jquery-for-a-new-project"><span class="icon icon-link"></span></a>But! You probably shouldn’t use jQuery for a new project.</h3>
<p>Don’t think I’m trying to make the case that we should still lean toward grabbing jQuery for a new project. I’m not. As I’ve said, today’s browsers’ JavaScript implementations are <em>good</em> – good enough that your time is better invested in starting with vanilla JavaScript rather than an abstraction for simple needs, and all things being equal, we should be reaching for the approach that performs better too. Read that crisp &amp; clear:</p>
<p><strong>If you’re starting a new project, I</strong> <em><strong>don’t</strong></em> <strong>think jQuery should be on the list of resources to leverage.</strong></p>
<p>But if you’re working with a codebase that incorporates jQuery, it <em>really is OK</em> to keep using it. You’re not a bad person, and you’re not a crappy developer. In fact, if you’re probably one of the smarter ones, because you’re not frantically running from a library that still does a darn good job at what it was designed to do.</p>
<p>So, don’t fret. When the time is right, dispose of jQuery. But when you do, do it out of smart decision making – when the time is right, when the ROI is significant, and when your project calls for it. Nothing else.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Time I (Sorta) Had a Real Use Case for a Bitwise Operator in Client-Side JavaScript]]></title>
        <id>https://macarthur.me/posts/use-case-for-bitwise-operator-in-javascript</id>
        <link href="https://macarthur.me/posts/use-case-for-bitwise-operator-in-javascript"/>
        <updated>2021-05-21T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[There’s a certain number of JavaScript features that I’ve never really used and find highly intimidating. Bitwise operators are among them. These operators exist for manipulating binary representations of data, and for the type of work I usually do, I’ve never met a scenario when I’ve needed to dive into...]]></summary>
        <content type="html"><![CDATA[<p>There’s a certain number of JavaScript features that I’ve never really used and find highly intimidating. Bitwise operators are among them.</p>
<p>These operators exist for manipulating binary representations of data, and for the type of work I usually do, I’ve never met a scenario when I’ve needed to dive into nitty-gritty bit handling. As far as I imagined, they’d only be useful to NASA engineers writing their newest rover’s operating system, or something else super cerebral.</p>
<p>But then I found myself working on <a href="https://github.com/alexmacarthur/slide-element" rel="nofollow">a project</a> with an explicit priority to shave off as many bytes as possible. As it turns out, a bitwise operator could be shoehorned into supporting that objective. And at this point, I’d take any shot at justifying me spending time understanding what they do and how they work. So, I went for it.</p>
<h2 id="quick-overview-of-bitwise"><a aria-hidden="true" tabindex="-1" href="#quick-overview-of-bitwise"><span class="icon icon-link"></span></a>Quick Overview of Bitwise</h2>
<p>There’s a ton of great documentation out there that’ll do a better job of explaining the what, why, and how of JavaScript’s bitwise operators, but for some quick context (as well as some practice explaining this stuff myself), here’s a brief overview.</p>
<p>The data used in the applications we build are represented by multiple bits – 1s and 0s – that are pieced together to make up bytes of information. For example, the numbers <code>10</code>, <code>20</code>, and <code>30</code> are represented by the following bit sequences:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">01010 // 10
10100 // 20
11110 // 30</code></pre></div>
<p>JavaScript’s bitwise operators allow us to perform operations on the individual, corresponding bits of two values, which results in a new binary sequence. Several operators exist – AND, OR, XOR, and more – all of which compare bits in a different way.</p>
<p>Let’s use the bitwise AND (&amp;) operator to illustrate. This operator will spit out a <code>1</code> when the bits in a certain positioned are both <code>1</code>. So, if we wanted to know the result of a bitwise AND operation between <code>20</code> and <code>30</code> in JavaScript, we might write something like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">&amp;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 20</span>
</code></pre></div>
<p>To “show our work” in that operation, we can stack the binary representations of each number on top of each other, and then compare the values in each position. If they’re both <code>1</code>, the output for that position is <code>1</code>:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">// Moving vertically, compare each bit.
// If both are `1`, the resulting bit is `1`.

10100 // 20
11110 // 30
-----
10100 // 20</code></pre></div>
<p>Similarly, the OR (|) operator returns a <code>1</code> if either of the corresponding bits are <code>1</code>:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">// bitwise OR

10100 // 20
11110 // 30
-----
11110 // 30</code></pre></div>
<p>You get the idea.</p>
<h2 id="my-situation"><a aria-hidden="true" tabindex="-1" href="#my-situation"><span class="icon icon-link"></span></a>My Situation</h2>
<p>In my particular case, this sort of operator’s usefulness didn’t have much to do with the binary values themselves. Rather, it had more to do with allowing me to select a certain array item using the least amount of characters possible. Here’s the stage (pared-down quite a bit):</p>
<p>In <a href="https://github.com/alexmacarthur/slide-element" rel="nofollow">slide-element</a>, I return a Promise after a sliding animation is complete for an element. That animation is powered by a CSS transition, so knowing when to <code>resolve()</code> that Promise requires listening for both the <code>transitionend</code> and <code>transitioncancel</code> events. The former fires whenever an animation is allowed to fully complete (or “end”), and the latter fires whenever it’s stopped before completion (or “cancelled”). To attach those listeners, I store them in an array and loop over <code>addEventListener</code>, resolving my Promise when an animation is finished.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;transitionend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;transitioncancel&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  events<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// Animation is done... whether it&#x27;s completed or cancelled.</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2 id="cleaning-up-unneeded-event-listeners"><a aria-hidden="true" tabindex="-1" href="#cleaning-up-unneeded-event-listeners"><span class="icon icon-link"></span></a>Cleaning Up Unneeded Event Listeners</h2>
<p>Attaching the listeners and resolving the Promise is straightforward enough. Where things get a little more complicated is the cleanup. After an animation is finished, I don’t want to let old listeners hang around to potentially cause unexpected behavior or performance bottlenecks.</p>
<p>One thing that helps is setting <code>{ once: true }</code> on each event listener I set up. This causes the listener to detach itself after firing, removing the need for me to do it. But the <em>other</em> event listener is left to fend for itself. I went through a couple of approaches to handle this.</p>
<h3 id="cleanup-approach-1-loop--remove-event-listeners"><a aria-hidden="true" tabindex="-1" href="#cleanup-approach-1-loop--remove-event-listeners"><span class="icon icon-link"></span></a>Cleanup Approach #1: Loop &amp; Remove Event Listeners</h3>
<p>This option entailed storing my callback as a variable, and then looping over the events whenever one of them is triggered to fire <code>removeEventListener</code>, referencing that same callback in memory.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;transitionend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;transitioncancel&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Whenever one of the events fires, remove all listeners.</span>
    events<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      event<span class="token punctuation">.</span><span class="token method function property-access">removeEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  events<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>This approach worked, but it’s a little convoluted, and felt like too much code to do a simple task. As a result, I moved to another tactic that didn’t involve <code>removeEventListener()</code> at all.</p>
<h3 id="cleanup-approach-2-programatically-trigger-the-remaining-listener"><a aria-hidden="true" tabindex="-1" href="#cleanup-approach-2-programatically-trigger-the-remaining-listener"><span class="icon icon-link"></span></a>Cleanup Approach #2: Programatically Trigger the Remaining Listener</h3>
<p>This method involves “faking” the event by dispatching a <code>TransitionEvent</code> instance on <em>other</em> listener. For example, whenever <code>transitionend</code> was triggered, a <code>transitioncancel</code> event would kick off to trigger &amp; remove the remaining listener via the <code>{ once: true }</code> configuration.</p>
<p>The key piece here is accessing the <em>other</em> event type based on the one that just fired. Conveniently, I was working with an array that had exactly two items, <strong>whose indices would always be binary</strong>, truthy/falsey values (I’d like there to be a term for such an array, but I can’t seem to find one). So, I could do something like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;transitionend&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;transitioncancel&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  events<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    box<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      box<span class="token punctuation">.</span><span class="token method function property-access">dispatchEvent</span><span class="token punctuation">(</span>
        <span class="token comment">// Trigger the OTHER event listener, in order to remove it.</span>
        <span class="token keyword">new</span> <span class="token class-name">TransitionEvent</span><span class="token punctuation">(</span><span class="token constant">EVENTS</span><span class="token punctuation">[</span>index <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>But on my byte-shaving crusade, that made my gut twist a bit (lol). If it’s a binary value I’m trying to access, I shouldn’t need to rely on a ternary to explicitly return either a <code>1</code> or a <code>0</code>. Thankfully, this is just the sort of low-level calculation bitwise operators are well-suited for. All I was interested in was the <em>opposite</em> boolean value, <strong>making the XOR operator the perfect choice.</strong></p>
<p>The “exclusive or” operator evaluates to <code>1</code> if only <em>one</em> of the operands is <code>1</code>. This makes it a great low-level “switch,” since it’ll flip values whenever one of the operand changes, like the index of a two-item array being looped over.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#x27;first&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;second&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Loop #1: &#x27;first&#x27; is the current item.</span>
<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>index <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#x27;second&#x27; is the other.</span>

<span class="token comment">// Loop #2: &#x27;second&#x27; is the current item</span>
<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>index <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#x27;first&#x27; is the other.</span>
</code></pre></div>
<p>Knowing this, I could make a subtle change to my event handling snippet:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">new Promise((resolve) =&gt; {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const events = [&quot;transitionend&quot;, &quot;transitioncancel&quot;];</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> events.forEach((event, index) =&gt; {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   box.addEventListener(event, (e) =&gt; {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     box.dispatchEvent(</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       // Trigger the OTHER event listener, in order to remove it.</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">       new TransitionEvent(EVENTS[index ? 1 : 0])</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       new TransitionEvent(EVENTS[index ^ 1])</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     );</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     resolve();</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   }, { once: true });</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> });</span>
<span class="token line"></span></span>}
</code></pre></div>
<p>If you’re doing the math as you follow along, that change gives me a savings of <strong>four whole characters,</strong> and a fresh understanding of how bitwise operators actually work!</p>
<h2 id="was-this-solution-worth-it"><a aria-hidden="true" tabindex="-1" href="#was-this-solution-worth-it"><span class="icon icon-link"></span></a>Was This Solution Worth It?</h2>
<p>If you consider the amount of time spent digging into this, and the tangible value it brought to the package, lol, nope. As a friend of mine put it in response to hearing about all of this, it “sounds like a solution looking for a problem.”</p>
<p>But! This was a small project of mine for which I chose to make bundle size a big, possibly irrational priority. Pair that with the fact that I’d been itching for a chance to learn about what this bitwise garbage even means and how I could use it, then yes, it was <em>absolutely</em> worth it.</p>
<p>When a moment like this ever arises for yourself, I’d encourage you to do the same. At best, you’ll land on a solution with some discernible benefit. At worst, it may not have made much of a difference, but you’ll be able to take those learnings with you onto the next thing.</p>
<p>Get bitty!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating the Simplest WordPress Plugin]]></title>
        <id>https://macarthur.me/posts/creating-the-simplest-wordpress-plugin</id>
        <link href="https://macarthur.me/posts/creating-the-simplest-wordpress-plugin"/>
        <updated>2018-04-04T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you’re making modifications to the functionality of your WordPress site or application, there are generally two places where people put the code to do it. A theme’s functions.php file. A plugin. Given the choice, which option should you almost always choose? A plugin. Why? The list of reasons is...]]></summary>
        <content type="html"><![CDATA[<p>If you’re making modifications to the functionality of your WordPress site or application, there are <em>generally</em> two places where people put the code to do it.</p>
<ol>
<li>A theme’s functions.php file.</li>
<li>A plugin.</li>
</ol>
<p>Given the choice, which option should you almost always choose?</p>
<p><strong>A plugin.</strong></p>
<p>Why? The list of reasons is longer than this, but here are the big ones:</p>
<p><strong>1. Features are better organized and isolated, making it easier to debug.</strong> For example, if your application is having an issue, you can start by toggling individual plugins rather than your entire theme. If the the bug goes away when a particular plugin has been deactivated, you’ve just narrowed the down the range of possible causes.</p>
<p><strong>2. You can update your theme without worrying about losing any unrelated functionality.</strong> Let’s say I’ve purchased a premium theme and also have a lazy loading plugin installed. When updates are made to the theme, or if I change themes altogether, my lazy loading should be unaffected, because that feature is contained in its own plugin.</p>
<p>I’ll probably be referencing this plugin-over-functions.php suggestion in my posts, so here’s a brief set of instructions on creating the most basic WordPress plugin you can use to build out a feature for your site. It’s void of any opinions on structure, design, or anything else. It’s just bare bones framework for making what WordPress recognizes as a plugin it can activate. That’s it.</p>
<p><strong>1. In your</strong> <strong><code>wp-content/plugins/</code></strong> <strong>directory, create a folder named</strong> <strong><code>simplest-plugin</code>****.</strong></p>
<p><strong>2. Inside that folder, create a</strong> <strong><code>simplest-plugin.php</code></strong> <strong>file.</strong></p>
<p><strong>3. Open up that newly created file and add a header comment.</strong> There are several pieces of information a plugin’s header comment <em>should</em> have, and <a href="https://developer.wordpress.org/plugins/the-basics/header-requirements/" rel="nofollow">you can read about them here</a>, but I mean it when I say we’re creating the <em>simplest</em> plugin, so I’m just going to add a plugin name:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*Plugin Name: Simplest Plugin*/</span></span>
</code></pre></div>
<p><strong>4. Confirm the plugin exists and can be activated.</strong> Head to your <code>wp-admin/plugins.php</code> page and scroll down to find your inactive plugin.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/4b9dfd07-bd4c-4d08-8034-c907e713befd/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=2ffadc538eb0d2ae86343cc279c8db38cd37e55743d237b3e635557ed197dbb8&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>It doesn’t have much – no description, version, author, or details, and you <em>should</em> include all of these things, but that’s not the point of this post. The point here is that you now have the barest-of-bones framework in which you can build functionality into your site or application.</p>
<p>It’s that simple!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlining Conditional Statements with Logical Operators]]></title>
        <id>https://macarthur.me/posts/streamlining-conditional-statements-with-logical-operators</id>
        <link href="https://macarthur.me/posts/streamlining-conditional-statements-with-logical-operators"/>
        <updated>2020-03-09T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve been seeing my preference change in how I write simple conditional statements in JavaScript. Consider the following: Back in the day, that’s how just about every “if I have this, then do this” statement looked. As complexity and context changed, I might have pivoted a bit, but for the...]]></summary>
        <content type="html"><![CDATA[<p>I’ve been seeing my preference change in how I write simple conditional statements in JavaScript. Consider the following:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>snack<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token function">eat</span><span class="token punctuation">(</span>snack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Back in the day, that’s how just about every “if I have this, then do this” statement looked. As complexity and context changed, I might have pivoted a bit, but for the most part, this was the go-to pattern. And for good reason – it’s clear and easy to translate into spoken vernacular:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">If I have a snack, then eat it.</code></pre></div>
<h2 id="early-return-gets-the-worm"><a aria-hidden="true" tabindex="-1" href="#early-return-gets-the-worm"><span class="icon icon-link"></span></a>Early Return Gets the Worm</h2>
<p>Then, I started to shift toward preferring the early return:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>snack<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">cat</span><span class="token punctuation">(</span>snack<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Not having to nest the meat of my code in an <code>if/else</code> block felt simpler. Do a quick check, and if you’re not qualified to be here, don’t bother running anything else. Just get outta the way.</p>
<p>My hunch is that once fluency with the semantics of the language became stronger, my brain naturally began to style the code in light of how it’s <em>read as code</em>, rather than <em>spoken as English.</em> And for whatever reason, the flow of an early return was cognitively easier to grasp, particularly as the complexity of the method potentially grew.</p>
<p>This becomes clearer with a more complex example. Something like this is totally fine:</p>
<h3 id="before-early-returns"><a aria-hidden="true" tabindex="-1" href="#before-early-returns"><span class="icon icon-link"></span></a>Before Early Returns</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> greeting<span class="token punctuation">;</span>

<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isFamily</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  greeting <span class="token operator">=</span> <span class="token string">&quot;hug&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isBuddy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  greeting <span class="token operator">=</span> <span class="token string">&quot;high five&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
  greeting <span class="token operator">=</span> <span class="token string">&quot;handshake&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword control-flow">return</span> greeting<span class="token punctuation">;</span>
</code></pre></div>
<p>But it feels stringy and a little more difficult to read than something like this:</p>
<h3 id="after-early-returns"><a aria-hidden="true" tabindex="-1" href="#after-early-returns"><span class="icon icon-link"></span></a>After Early Returns</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isFamily</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token string">&quot;hug&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">isBuddy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token string">&quot;high five&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword control-flow">return</span> <span class="token string">&quot;handshake&quot;</span><span class="token punctuation">;</span>
</code></pre></div>
<p>What’s interesting here is that while it’s easier to read <em>as code</em>, it’s not at all <em>how people speak</em>. As the semantics become more second nature, the oral flow of the code seems to become less of a concern.</p>
<h2 id="along-came-short-circuiting"><a aria-hidden="true" tabindex="-1" href="#along-came-short-circuiting"><span class="icon icon-link"></span></a>Along Came Short-Circuiting</h2>
<p>Soon enough, my preference changed again. This time, toward leveraging <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators" rel="nofollow">logical operators</a> for simple expressions.</p>
<p>After executing one side of the <code>&amp;&amp;</code> or <code>||</code> operators, JavaScript will <em>short-circuit</em> if it’s logically unnecessary to run the remaining expression(s), returning the value of the last expression that was evaluated. You’ve probably seen short-circuiting used with the <code>||</code> operator when setting fallback values for variables.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> myVar <span class="token operator">=</span> <span class="token string">&quot;left side&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;right side&quot;</span><span class="token punctuation">;</span> 
<span class="token comment">// evaluates to &quot;left side&quot;</span>

<span class="token keyword">const</span> myOtherVar <span class="token operator">=</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> <span class="token string">&quot;not null at all&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// evaulates to &quot;not null at all&quot;</span>
</code></pre></div>
<p>This tactic is cleaner than using a ternary, and far more elegant than an <code>if/else</code> block.</p>
<h3 id="good-ifthen-block"><a aria-hidden="true" tabindex="-1" href="#good-ifthen-block"><span class="icon icon-link"></span></a>Good: <code>If/Then</code> Block</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myVar<span class="token punctuation">;</span>

<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>otherVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  myVar <span class="token operator">=</span> otherVal<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
  myVar <span class="token operator">=</span> <span class="token string">&quot;fallback&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="better-ternary"><a aria-hidden="true" tabindex="-1" href="#better-ternary"><span class="icon icon-link"></span></a>Better: Ternary</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myVar <span class="token operator">=</span> otherVal <span class="token operator">?</span> otherVal <span class="token operator">:</span> <span class="token string">&quot;fallback&quot;</span><span class="token punctuation">;</span>
</code></pre></div>
<h3 id="best-logical-operator"><a aria-hidden="true" tabindex="-1" href="#best-logical-operator"><span class="icon icon-link"></span></a>Best: Logical Operator</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myVar <span class="token operator">=</span> otherVal <span class="token operator">||</span> <span class="token string">&quot;fallback&quot;</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Similarly, the <code>&amp;&amp;</code> operator continues to evaluate as long as the previous value is <code>truthy</code>, returning the last evaluated expression.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> myVar <span class="token operator">=</span> <span class="token string">&quot;left side&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;right side&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// evaluates to &quot;right side&quot;</span>

<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token string">&quot;a string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myVar <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// evaluates to &quot;&quot;</span>
</code></pre></div>
<h3 id="a-simple-short-circuited-conditional"><a aria-hidden="true" tabindex="-1" href="#a-simple-short-circuited-conditional"><span class="icon icon-link"></span></a>A Simple Short-Circuited Conditional</h3>
<p>And that makes for some succinct conditional statements, allowing you to abandon the <code>if/else</code> block altogether. As long as the first expression is <code>truthy</code>, the next will be evaluated as well.</p>
<h3 id="before-ifthen-block"><a aria-hidden="true" tabindex="-1" href="#before-ifthen-block"><span class="icon icon-link"></span></a>Before: <code>If/Then</code> Block</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>snack<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token function">eat</span><span class="token punctuation">(</span>snack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h3 id="after-logical-operator"><a aria-hidden="true" tabindex="-1" href="#after-logical-operator"><span class="icon icon-link"></span></a>After: Logical Operator</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">snack <span class="token operator">&amp;&amp;</span> <span class="token function">eat</span><span class="token punctuation">(</span>snack<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h3 id="a-slightly-more-intense-example"><a aria-hidden="true" tabindex="-1" href="#a-slightly-more-intense-example"><span class="icon icon-link"></span></a>A Slightly More Intense Example</h3>
<p>For something a little more involved, let’s say you wanted to attempt a chain of actions only until one is successful, storing that value in a variable. And if none is successful, fall back to a default value. It’s possible to pull this off using the same sort of <code>if/else</code> block, dealing with the stringy nature of the flow.</p>
<h3 id="option-1-ifelse-block"><a aria-hidden="true" tabindex="-1" href="#option-1-ifelse-block"><span class="icon icon-link"></span></a>Option #1: <code>If/Else</code> Block</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> firstTruthyReturnValue<span class="token punctuation">;</span>

<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">tryIt</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  firstTruthyReturnValue <span class="token operator">=</span> <span class="token function">tryIt</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">tryIt</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  firstTruthyReturnValue <span class="token operator">=</span> <span class="token function">tryIt</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token function">tryIt</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  firstTruthyReturnValue <span class="token operator">=</span> <span class="token function">tryIt</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
  firstTruthyReturnValue <span class="token operator">=</span> <span class="token string">&quot;default value&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Or, for a more modern approach, you could use <code>Array.prototype.find()</code> to <em>find</em> that value. It’s a bit more elegant, but requires that you also handle the default value a bit more explicitly than you might have hoped.</p>
<h3 id="option-2-arrayprototypefind"><a aria-hidden="true" tabindex="-1" href="#option-2-arrayprototypefind"><span class="icon icon-link"></span></a>Option #2: <code>Array.prototype.find()</code></h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> possibilities <span class="token operator">=</span> <span class="token punctuation">[</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">,</span> val3<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> firstTruthyReturnValue <span class="token operator">=</span> possibilities<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token function">tryIt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

firstTruthyReturnValue <span class="token operator">=</span> firstTruthyReturnValue <span class="token operator">===</span> <span class="token keyword nil">undefined</span> 
	<span class="token operator">?</span> <span class="token string">&quot;default&quot;</span> 
	<span class="token operator">:</span> firstTruthyReturnValue<span class="token punctuation">;</span>
</code></pre></div>
<p>But by using a logical operator, all that mess can be pulled together more elegantly, while preserving the ability set a default value.</p>
<h3 id="option-3-logical-operators"><a aria-hidden="true" tabindex="-1" href="#option-3-logical-operators"><span class="icon icon-link"></span></a>Option #3: Logical Operators</h3>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> firstTruthyReturnValue <span class="token operator">=</span>
  <span class="token function">tryIt</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tryIt</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">tryIt</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;default value&quot;</span><span class="token punctuation">;</span>
</code></pre></div>
<h2 id="possible-objections"><a aria-hidden="true" tabindex="-1" href="#possible-objections"><span class="icon icon-link"></span></a>Possible Objections</h2>
<p>There may be some purists out there who insist on strictly using the <code>if/else</code> block, switch statement, and ternary for their conditionals. That’s fine – I’m only documenting my personal progression of preference to date.</p>
<p>There are also those who probably say this approach makes the code less readable. I empathize with that. It takes a second to get your brain to reliably parse conditionals written in this way especially when it’s so far removed from how people speak.</p>
<p>But that’s not a deterrent for me, maybe for the same reason many favor the early return, or even those who are good with using the <code>||</code> operator to set fallback values for variables. Once you get used to the semantics, the gained elegance might hook you for life.</p>
<p>Or, you might yet again change your preference a few months down the road, which is entirely possible for me.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[If Democratic Candidates were JavaScript Packages]]></title>
        <id>https://macarthur.me/posts/if-democratic-candidates-were-javascript-packages</id>
        <link href="https://macarthur.me/posts/if-democratic-candidates-were-javascript-packages"/>
        <updated>2020-01-19T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[BernieSanders.js - a helper library for making next-generation punch card programs for the browser. ElizabethWarren.js - a probability and statistics library widely used in reservation casinos. AmyKlobuchar.js - a highly opinionated alternative to ESLint, providing harsher, more demanding errors (no warnings). JoeBiden.js - a battle-tested framework for building RPG games...]]></summary>
        <content type="html"><![CDATA[<p><strong>BernieSanders.js</strong> - a helper library for making next-generation punch card programs for the browser.</p>
<p><strong>ElizabethWarren.js</strong> - a probability and statistics library widely used in reservation casinos.</p>
<p><strong>AmyKlobuchar.js</strong> - a highly opinionated alternative to ESLint, providing harsher, more demanding errors (no warnings).</p>
<p><strong>JoeBiden.js</strong> - a battle-tested framework for building RPG games for the browser, featuring an API just as approachable to junior devs <a href="https://t.co/ReXr7Njg53?amp=1" rel="nofollow">as white devs.</a></p>
<p><strong>PeteButtigieg.js</strong> - not really sure what it does or when to use it, but it’s popular up in South Bend.</p>
<p><strong>AndrewYang.js</strong> - an inline podcast audio player that will literally pay you to use it.</p>
<p><strong>TulsiGabbard.js</strong> - Russian asset bundler.</p>
<p><strong>MikeBloomberg.js</strong> - a financial charting library embracing many of the exciting new features available in Netscape Navigator.</p>
<p>Got one I missed? <a href="https://github.com/alexmacarthur/macarthur-me/blob/master/src/posts/2020-01-19-if-democratic-candidates-were-javascript-packages.md" rel="nofollow">Make a pull request</a> with your addition followed by “(contributed by Your Name)”, and I might include it.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Three Favorite Reasons to Get a Credit Card and Why They’re All Inadequate]]></title>
        <id>https://macarthur.me/posts/favorite-reasons-to-get-a-credit-card</id>
        <link href="https://macarthur.me/posts/favorite-reasons-to-get-a-credit-card"/>
        <updated>2022-01-09T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve lived without a credit card for nearly a decade now. Life hasn’t been hard without one. With a debit card (backed by my own, real money) readily available and accepted anywhere a credit card is, I wouldn’t even say it’s been inconvenient. Even so, more than a few times,...]]></summary>
        <content type="html"><![CDATA[<p>I’ve lived without a credit card for nearly a decade now. Life hasn’t been hard without one. With a debit card (backed by my own, real money) readily available and accepted anywhere a credit card is, I wouldn’t even say it’s been inconvenient.</p>
<p>Even so, more than a few times, I’ve been roped into (or instigated, lol) hearty discussions with people who insist that there are indisputable reasons why I and everyone else should have a credit card. Despite some of those reasons being total garbage (”get a 20% discount on these American Eagle pants!”), I’ve found a few to be fairly compelling on more than one occasion — enough to make me think about whether my plastic abstinence is more rooted in dogma than reason. But time after time, thinking through even the best of these reasons only lands me right back where I’ve stood for several years now.</p>
<p>I’ve thought about it enough times now to warrant getting something written down; if anything, for the purpose of being able to point people to resource when I don’t have the patience to try to regurgitate thoughts from scratch in the moment.</p>
<p>So, here they are: my three favorite reasons to get a credit card, and why they’re still not good enough for me.</p>
<h2 id="1-credit-cards-are-safer-than-debit-cards"><a aria-hidden="true" tabindex="-1" href="#1-credit-cards-are-safer-than-debit-cards"><span class="icon icon-link"></span></a>1. “Credit cards are safer than debit cards.”</h2>
<p>This one gets me because it strikes right at my security gland. And it also comes off as pretty agreeable, because credit cards <em>do</em> offer solid protection in the event that either your number or physical card is used fraudulently. In fact, it’s the law. The <a href="https://www.experian.com/blogs/ask-experian/what-is-the-fair-credit-billing-act/" rel="nofollow">Fair Credit Billing Act</a> shields you from any responsibility for charges that occur after you report a stolen card. And even if the bad guys did rack up any charges before then, the maximum amount you’re responsible for is $50.</p>
<p>But even paying <em>that</em> is pretty rare. Most major credit cards have <a href="https://www.investopedia.com/terms/z/zero-liability-policy.asp" rel="nofollow">zero-liability policies</a>, meaning you won’t owe a cent on anything purchased by anyone but yourself — no matter how or when the purchase was made. It’s little surprise that people tout the peace of mind credit cards offer in this way, especially in an age when online commerce dominates. You’d be hard-pressed to find yourself out of any sum of money due to someone getting a hold of your card, either physically or digitally.</p>
<p><strong>But! It’s also true that debit cards enjoy virtually the same level of security.</strong> And in an increasing number of cases, those protections are <em>exactly</em> the same. This type of plastic isn’t covered by the same legislation as credit cards. Rather, they fall within the scope of the <a href="https://www.ftc.gov/enforcement/statutes/electronic-fund-transfer-act" rel="nofollow">Electronic Fund Transfer Act</a>. Under that law, the following protections are in force when your debit card becomes compromised, depending on how it happened:</p>
<h3 id="physical-card-is-loststolen"><a aria-hidden="true" tabindex="-1" href="#physical-card-is-loststolen"><span class="icon icon-link"></span></a>Physical Card is Lost/Stolen</h3>
<p><a href="0d1ef91f-d5e6-4574-a5ed-3bc55c3271f3">child_database</a></p>
<h3 id="card-number-is-loststolen"><a aria-hidden="true" tabindex="-1" href="#card-number-is-loststolen"><span class="icon icon-link"></span></a>Card Number is Lost/Stolen</h3>
<p><a href="34ca5bba-0182-4f21-a36c-0a6b46186e09">child_database</a></p>
<p>Just taking these restrictions at face value, the only chance you’re going to be liable for an extraordinary amount of money is if you fail to report your card within 60 days. And if takes you that long to realize something’s going on, I’d question whether you’re even adult enough to have a card to begin with.</p>
<h3 id="zero-liability-for-everyone"><a aria-hidden="true" tabindex="-1" href="#zero-liability-for-everyone"><span class="icon icon-link"></span></a>Zero-Liability for Everyone</h3>
<p>But still, there’s good news on top of that — <strong>more and more providers are choosing to offer the same zero-liability policies on their</strong> <em><strong>debit</strong></em> <strong>cards too</strong>. The top two players dominating this space are <a href="https://www.fool.com/the-ascent/research/credit-debit-card-market-share-network-issuer/" rel="nofollow">Visa and Mastercard</a>. And <em>both</em> have zero-liability policies in place — regardless of whether your card is physically lost/stolen. (For more reading, here are details on <a href="https://www.mastercard.us/en-us/personal/find-a-card/standard-mastercard-debit.html" rel="nofollow">Mastercard’s policy</a>, and <a href="https://usa.visa.com/pay-with-visa/visa-chip-technology-consumers/zero-liability-policy.html" rel="nofollow">here’s Visa’s</a>.)</p>
<p>I called my own bank to verify this, and sure enough, here’s a snippet of the document I was emailed. The language is pretty clear, and the bank’s representative confirmed it verbally for me as well. No matter what the type of transaction, if it was unauthorized and I wasn’t being an idiot in exposing my card information, my butt’s covered:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2a39de6d-bd7e-42a7-bef1-14411bbdbc2a/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=ec17774f46f4d212f574ef55ad5cc6438fa940023b0b7fa4e594693a0651d35f&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>And that means, void of any hair-splitting intricacies I’m missing, <strong>a credit card doesn’t have a discernable security advantage over a debit card.</strong></p>
<h3 id="but-it-takes-time-for-fraud-to-be-resolved"><a aria-hidden="true" tabindex="-1" href="#but-it-takes-time-for-fraud-to-be-resolved"><span class="icon icon-link"></span></a>“But it takes TIME for fraud to be resolved!”</h3>
<p>On the surface, this concern sounds legitimate. If you have relatively straightforward financial needs, you might have a single account where most of your available spending money lives. And if that’s gone, even momentarily, it could wreak havoc on your day-to-day life. But most (read: practically all) debit cards come with daily purchase limits out of the box. They vary by bank &amp; account, but with one of any sort in place, I have a hard time imagining one of these nightmare scenarios actually occurring.</p>
<p>But let’s say it happens. Maybe you temporarily increase the limit on your card, and someone takes advantage of that opportunity to clean you out. The felt consequences of that event are largely avoidable by <strong>maintaining a healthy emergency fund in a</strong> <em><strong>separate</strong></em> <strong>account</strong> – something every responsible adult should do anyway. If things get any weirder than that (e.g.: you raise the limit on BOTH accounts, both get fraudulently accessed, and every cent of both manages to get stolen at the same time), I think it’s time to change your identity altogether and commit to using straight cash for the rest of your life.</p>
<p>So, in light of the law, increasingly common zero-liability policies, built-in card protections, and the safeguards good money habits inherently bring with them, the appeal of this reason starts to become pretty weak.</p>
<h2 id="2-i-use-the-rewards-to-cover-expenses-i-wouldve-had-anyway"><a aria-hidden="true" tabindex="-1" href="#2-i-use-the-rewards-to-cover-expenses-i-wouldve-had-anyway"><span class="icon icon-link"></span></a>2. “I use the rewards to cover expenses I would’ve had anyway.”</h2>
<p>Out of the claims we’re looking at, this one’s advantage is its appeal to cold, hard reason. Everyone has boring, predictable expenses they need to make each month. Why <em>wouldn’t</em> you soften their blow by leveraging credit card perks, especially if those perks can be funneled right back into the category of “things I would’ve had to buy anyway” (think: cash back for groceries, airline points for an upcoming trip to visit family, etc.).</p>
<p>If I believed most people to be self-disciplined machines, I wouldn’t have an objection here, especially if you have a perfect, maybe even automated track record of paying off your card’s balance each month.</p>
<p>And to be fair, there are <em>real</em> stories of people raking in legitimate perks through their use of credit cards, <a href="https://web.archive.org/web/20210422211556/https://www.creditcards.com/credit-card-news/how-much-money-make-with-cash-back-cards/" rel="nofollow">like Katie DeCicco</a>, who brings in ~$6,000/year with business expenses. Or <a href="https://www.pointswithacrew.com/about/" rel="nofollow">this “travel hacker”</a> who prides himself on accumulating “free” airline miles for his family of eight.</p>
<p>But to be <em>even more</em> fair, we need to consider some contextual details. Katie had to spend <em>$650,000 dollars</em> to reap that $6k, and that travel hacker’s perks require far more effort than just regular, predictable spending, like routinely <a href="https://www.pointswithacrew.com/how-i-got-a-million-points-and-you-can-too/" rel="nofollow">signing up for new cards</a> just for the sign-up bonuses. And at work underneath all of this is the human psyche, which isn’t highly regarded as being immune to subconscious influence. Unsurprisingly, there’s a wide body of research that thoroughly backs that up.</p>
<h3 id="cards-make-you-spend-more"><a aria-hidden="true" tabindex="-1" href="#cards-make-you-spend-more"><span class="icon icon-link"></span></a>Cards Make You Spend More</h3>
<p>The connection between your payment method of choice and your spending tendencies is pretty undeniable. When your options are reduced to either a card linked to someone else’s money and physical cash that belongs to <em>you</em>, you spend (probably unknowingly) far more with card than you do cash. Just a few examples:</p>
<ul>
<li>An <a href="https://link.springer.com/article/10.1023/A:1008196717017" rel="nofollow">MIT study found</a> that people are willing to spend up to <em>100% more</em> using credit cards.</li>
<li>Toll rates tended to <a href="https://www.nber.org/papers/w12924" rel="nofollow">increase by 20-40%</a> once electronic/automatic payment mechanisms were installed.</li>
<li>People were found to tip <a href="https://fortunly.com/statistics/cash-versus-credit-card-spending-statistics#according-to-an-mit-study-credit-cards-make-people-spend-more-money-sometimes-up-to-83-more" rel="nofollow">13% more when paying with a credit card</a>.</li>
</ul>
<p>If you dig into some of these and other sources, there’s a common thread as to why people behave this way. <strong>It</strong> <em><strong>feels</strong></em> <strong>different giving your physical cash away than it does a quick swipe of a card.</strong> And there’s more at play than just a different “feeling.” <a href="https://www.cmu.edu/homepage/practical/2007/winter/spending-til-it-hurts.shtml" rel="nofollow">As George Loewenstein noted</a> after studying the relationship between making purchases and the brain’s registration of pain:</p>
<blockquote>
<p>Credit cards effectively anesthetize the pain of paying. You swipe the card and it doesn’t feel like you’re giving anything up to make the purchase, unlike paying cash where you have to hand over bills.</p>
</blockquote>
<p>Summarized: when it hurts less, it costs more.</p>
<h3 id="ok-but-debit-cards-are-cards-too-right"><a aria-hidden="true" tabindex="-1" href="#ok-but-debit-cards-are-cards-too-right"><span class="icon icon-link"></span></a>“Ok, but debit cards are <em>cards</em> too, right?”</h3>
<p>Yes — the fact that a debit card is still a <em>card</em> means that its users are subject to many of the same psychological forces as a credit card. But there are a couple of distinctions between the two that make the credit card worse:</p>
<p><strong>First, they mess with our tendency to make decisions based on the amount of resources we</strong> <em><strong>think</strong></em> <strong>we have available</strong>. <a href="https://www.inverse.com/culture/59670-credit-card-psychology" rel="nofollow">Dr. Carey Morewedge</a> refers to this perception as “cognitive availability.” If we think a purchase would take up a decent chunk of our available money, it hurts more, decreasing our chance of doing it.</p>
<p>For example, if I’m carrying $100 in cash and I’m considering a $50 purchase, that decision would mean parting with <em>50%</em> of my available money. Ouch. But that same $50 purchase would be a lot less painful if I were to use a debit card linked to a checking account with $10,000 in it.</p>
<p>Credit cards take this to an entirely new level, kicking the bottom out of the amount of money you have “cognitively available.” When you use a credit card, there’s virtually <em>no limit</em> at all, aside from whatever daily transaction limit exists. And that means there’s far, <em>far</em> less “payment pain” using a credit card over any other payment methods.</p>
<p><strong>Second, it screws with our already poor habit of valuing the present over the future.</strong> When we use a debit card, the consequence of that decision is felt immediately (the money is taken right out of your account), putting the satisfaction of whatever we just purchased in a dimmer light. But with a credit card, that pain is pushed off into the future, taking a back seat to the immediate gratification of whatever how belongs to us. Morewedge explains it better:</p>
<blockquote>
<p>I don’t value my future money as much as I value my present money, and so with a credit card, by moving the payment into the future, it’s less psychologically painful than if I paid right now.</p>
</blockquote>
<p>And based on the limited amount of research I was able to find directly comparing credit cards and debit cards, all of this seems to hold up, with credit cards taking the #1 spot in terms of <a href="https://irrationallabs.com/content/uploads/2020/04/Irrationally-Healthy.pdf" rel="nofollow">most money spent at a grocery store.</a></p>
<p>Of course, at the end of the day, all the research in the world won’t sway a person who believes they’re the exception to it. Still, it’s worth asking: do you really think that using a card with a built-in reward mechanism and that’s attached to someone else’s money <em>doesn’t</em> have a subconscious impact on your spending? If you answer “yes,” you might be right and you’re in the minority who’s risen above these psychological forces.</p>
<p>But you’re probably not.</p>
<h2 id="3-i-need-a-credit-card-to-build-a-healthy-credit-score"><a aria-hidden="true" tabindex="-1" href="#3-i-need-a-credit-card-to-build-a-healthy-credit-score"><span class="icon icon-link"></span></a>3. “I need a credit card to build a healthy credit score.”</h2>
<p>Ok, it’s a straight-up fact that you don’t <em>need</em> a credit score to live life in the modern world. Despite that truth, many still think it’s necessary to do things like get into an apartment, rent a car, or get a mortgage. <strong>But you can pretty much always do these things via alternative methods</strong>. Google it. Listen to <a href="https://www.youtube.com/watch?v=1alhWkWyijs" rel="nofollow">this episode</a> of <em>The Fine Print</em> podcast. Or call around yourself.</p>
<p>That aside, the hassle required to do some of these things make it a little more complicated. For some things, having a poor or non-existent score racks up to a minor inconvenience (you might need to put up a larger rental deposit or submit some more extensive proof that you have an income and pay your bills on time, etc.). But for others, it can be a serious pain in the cheeks — like getting a mortgage manually underwritten. It’d be remiss of me to not acknowledge some of the horror stories in navigating this process, like <a href="https://danwatt.org/2020/10/actually-getting-a-mortgage-with-no-credit-score" rel="nofollow">this one from a friend</a>.</p>
<p>Just hearing stories like that stresses me out. And imagining going through it myself helps me understand why having a card for this reason is so appealing. At the same time, it enrages me that we live within a system designed to depend on such a backwards method of “qualifying” someone to do something. I could have zero debt, a perfect housing/utilities payment history, have been awarded the Medal of Honor, and STILL have a harder time getting a decent mortgage than someone who’s played the FICO game well.</p>
<p>In fact, virtually none of how that score is calculated has anything to do with healthy money habits (saving, budgeting, investing, paying your bills on time, etc.). Instead, there’s a heckuva large focus on <a href="https://www.equifax.com/personal/education/credit/score/how-is-credit-score-calculated" rel="nofollow">how well you “manage” debt</a>, rewarding those who play according to the rules with the <a href="https://www.experian.com/blogs/ask-experian/why-would-you-want-a-good-credit-score/" rel="nofollow">primary privilege of taking on more debt</a>. It’s almost as if it was designed to be cyclically manipulative.</p>
<h3 id="make-your-past-mistakes-work-for-you"><a aria-hidden="true" tabindex="-1" href="#make-your-past-mistakes-work-for-you"><span class="icon icon-link"></span></a>Make Your Past Mistakes Work for You</h3>
<p>The slimy, senseless nature of the credit score is enough to make me opt out of chasing it altogether (even if it will cost me a slice of my sanity).</p>
<p>But if you choose to do the same, it still doesn’t necessarily mean you’re signing up for a world of hurt. If you already have outstanding debt you’re paying off, you can use it to maintain a decent score for the time being. It’s untrue that regularly swiping plastic is the only or most impactful thing you can do for your score. In reality, staying on top of <em>any</em> debt will factor into it — <a href="https://www.nerdwallet.com/article/loans/student-loans/do-student-loans-affect-your-credit" rel="nofollow">like student loans</a>.</p>
<p>I’m an example of this. Over the course of ~4 years, we paid off ~$50k in student loans. Our credit score held up just fine, and after we were done, we had no problems going through the traditional mortgage process, despite not having used a card in several years. We certainly weren’t relieved to have debt for this purpose, but it was helpful being able to make useful what was otherwise a regretful burden.</p>
<p>No matter which way you slice it, saying someone “needs” a card to build a score should raise some eyebrows on multiple levels. And I only buy into things that cause my eyebrows to stand firm and level.</p>
<h2 id="no-im-not-amish"><a aria-hidden="true" tabindex="-1" href="#no-im-not-amish"><span class="icon icon-link"></span></a>No, I’m not Amish.</h2>
<p>I guess no one’s actually asked me that, but it’s the vibe I get sometimes when someone finds out I haven’t used a credit card in a decade. I don’t mind — I’m an Enneagram #3, so I actually kind of like the attention (perhaps that’s factored into why I’ve chosen this path, lol).</p>
<p>But just for thoroughness, I should note that I happily use tools like Venmo &amp; Google Pay (don’t h8), and of course, my debit card. Like I said before, life isn’t really inconvenient as a result of living this way. It’s just one that’s tied to money that actually exists, with a built-in safety mechanism to deter me from making stupid financial decisions. I won’t say you <em>must</em> follow suit, but I will issue a challenge:</p>
<p>Do it, and you won’t regret it as much as you think you will. Cut ‘em up! 🙂</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Better Resource Hints for WordPress]]></title>
        <id>https://macarthur.me/posts/introducing-better-resource-hints-wordpress-plugin</id>
        <link href="https://macarthur.me/posts/introducing-better-resource-hints-wordpress-plugin"/>
        <updated>2018-05-19T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[It’s easy to rattle off a bunch of ways you can improve the performance of your website: minify your CSS & JS optimize your images cache the crap out of it use a CDN etc. Those are all important, but there’s also a more modern, less-discussed approach that can almost...]]></summary>
        <content type="html"><![CDATA[<p>It’s easy to rattle off a bunch of ways you can improve the performance of your website:</p>
<ul>
<li>minify your CSS &amp; JS</li>
<li>optimize your images</li>
<li>cache the crap out of it</li>
<li>use a CDN</li>
<li>etc.</li>
</ul>
<p>Those are all important, but there’s also a more modern, less-discussed approach that can almost immediately earn you some serious performance points: <strong>resource hints</strong>. Sparing the <a href="https://www.w3.org/TR/resource-hints/" rel="nofollow">long, detailed explanation of what these actually are</a>, you can think of them as rules you give the browser for how and when it downloads resources needed for your website, including CSS, JS, images, fonts, and any other assets. When the browser follows these rules, your site loads and becomes interactive more quickly, causing metrics like time to interactive and perceptual speed index to improve.</p>
<p>And now, it’s a lot easier to implement and manage these hints on your WordPress site.</p>
<p>I just introduced <a href="https://wordpress.org/plugins/better-resource-hints/" rel="nofollow">Better Resource Hints</a>, a WordPress plugin that enables you to intelligently implement different resource hints for your website with little intimidation or complicated configuration. Just by turning it on, the plugin will take a conservative but effective approach to setting up these hints, and allow you to beef it up if needed.</p>
<p>Specifically, this plugin leverages the following types of hints:</p>
<p><strong>Preconnecting</strong> – This one is similar to the more common hint “dns-prefetch,” but a more beefier version. Instead of just resolving the DNS as early as possible, the preconnect hint handles TLS negotiations and TCP handshakes, resulting in reduced page latency.</p>
<p><strong>Preloading</strong> – Preloading occurs when the browser is told it can start downloading an asset in the background early during page load, instead of waiting until the asset is explicitly called to start the process. This hint is most beneficial for assets loaded later on in the page, but are nonetheless essential to the page’s functionality. More often than not, the type of asset that benefits most from this is JavaScript, but it can be used for any type of resource. Enabling this results in an overall faster load time, and quicker time to interactive.</p>
<p><strong>Prefetching</strong> – Prefetching assets is similar to preloading, but the assets are downloaded in low priority for the purpose of caching them for later use. For example, if a user hits your home page and is likely to go to a page that uses a heavy JavaScript file, it’s wise to prefetch that asset on the home page, so it’s cached and ready to go on the next. Again, the result is a quicker subsequent page load, quicker time to interactive, and an improved overall user experience. This is different from DNS prefetching, which will only resolve the DNS of a resource’s host, and not actually download the resource itself.</p>
<p><strong>Server Push</strong> – If enabled, server push will tell your server to start delivering an asset before the browser even asks for it. This results in a much faster delivery of key assets, and it be toggled on for both preloaded, prefetched, and preconnected assets. Note: This feature requires a server that supports server push, and is the most experimental strategy this plugin provides.</p>
<p>There’s not much to lose here. <a href="https://wordpress.org/plugins/better-resource-hints/" rel="nofollow">Download the plugin</a>, activate it, and start measuring your performance gains using a tool like Google Lighthouse. Regardless of the results, <a href="/contact">let me know!</a> I want to know what I can do to make the plugin better in any way.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Don't Feel Bad About Using XMLHttpRequest]]></title>
        <id>https://macarthur.me/posts/dont-feel-bad-about-using-xmlhttprequest</id>
        <link href="https://macarthur.me/posts/dont-feel-bad-about-using-xmlhttprequest"/>
        <updated>2020-07-15T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while back, I began contributing to a small JavaScript library responsible for sending a POST request with some data to an endpoint. At the time, it used axios to make that request, and I wanted to simplify things by shedding a dependency. The obvious alternative was fetch – modern,...]]></summary>
        <content type="html"><![CDATA[<p>A while back, I began contributing to a small JavaScript library responsible for sending a POST request with some data to an endpoint. At the time, it used <a href="https://github.com/axios/axios" rel="nofollow">axios</a> to make that request, and I wanted to simplify things by shedding a dependency. The obvious alternative was <code>fetch</code> – modern, native, and ergonomic.</p>
<p>But in this very particular case, the following bits of context made me wonder if this obvious choice was the <em>best</em> choice. The package…</p>
<ol>
<li>would be distributed amongst several teams</li>
<li>had a simple, single responsibility, with little need to do anything after that responsibility had been fulfilled (so, a Promised-based API wasn’t a must-have)</li>
<li>would need to work for users on IE11 (for <em>most</em> teams – some had dropped that requirement)</li>
</ol>
<h2 id="where-fetch-held-me-up"><a aria-hidden="true" tabindex="-1" href="#where-fetch-held-me-up"><span class="icon icon-link"></span></a>Where Fetch Held Me Up</h2>
<p>The <code>fetch</code> API is a welcomed upgrade to making HTTP requests in JavaScript, but in order to leverage it here, teams would need to rely on two different polyfills: the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" rel="nofollow">Promise</a> object, and the <code>fetch</code> API itself. And that would mean putting at least a little more burden on the teams who implement it, as well as the users who interact with it:</p>
<ul>
<li>It’d require teams supporting IE to set up additional dependencies, which would involve vetting which polyfills to use (there are several for any given API), ensuring none are already being loaded by the application, and potentially working through unforseen issues.</li>
<li>Unless some sort of <a href="https://macarthur.me/posts/should-we-implement-differential-serving" rel="nofollow">differential serving</a> is set up, it’d require most users to download polyfills they don’t actually need (<a href="https://caniuse.com/#feat=fetch" rel="nofollow">~94%+ are on browsers</a> that support <code>fetch</code>).</li>
</ul>
<p>For my simple needs, this just felt like too much, especially considering the strong culture of performance that exists throughout the organization as a whole.</p>
<h2 id="making-prehistoric-http-requests"><a aria-hidden="true" tabindex="-1" href="#making-prehistoric-http-requests"><span class="icon icon-link"></span></a>Making Prehistoric HTTP Requests</h2>
<p>So, I thought back to what our ancestors used to do such things: <code>XMLHttpRequest</code>. The O.G. of HTTP requests in JavaScript. I’ve heard rumors of this thing. The verbosity. The insanity it’s left in its wake.</p>
<p>Despite that reputation, I gave it a shot wiring it up. And as it turned out, <strong>for simple requests, most of those rumors were overblown.</strong> After the switch, my implementation went from something like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword control-flow">await</span> axios<span class="token punctuation">.</span><span class="token method function property-access">post</span><span class="token punctuation">(</span>
    <span class="token string">&quot;http://localhost:4000&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;x-api-key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-api-key&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&quot;Request failed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>To something more like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:4000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token method function property-access">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token method function property-access">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;x-api-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-api-key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>That’s a very similar amount of code for virtually the same functionality. <strong>And no polyfills.</strong></p>
<h2 id="why-xmlhttprequest-made-sense"><a aria-hidden="true" tabindex="-1" href="#why-xmlhttprequest-made-sense"><span class="icon icon-link"></span></a>Why XMLHttpRequest Made Sense</h2>
<p>Given all that aforementioned context, a few notable perks surfaced as a result of switching to <code>XMLHttpRequest</code>.</p>
<h3 id="1-less-code-shipped"><a aria-hidden="true" tabindex="-1" href="#1-less-code-shipped"><span class="icon icon-link"></span></a>1. Less code shipped.</h3>
<p>Being so old-school in terms of making HTTP requests, <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Browser_compatibility" rel="nofollow">browser support</a> isn’t even remotely a concern. By using it, teams can avoid loading those polyfills still required to use <code>fetch</code> in IE, saving about ~4kb of bundled code (assuming teams would’ve used these two pretty good polyfills I came across):</p>
<table><thead><tr><th>Polyfill</th><th>Size (minified)</th><th>Size (minified + gzipped)</th></tr></thead><tbody><tr><td><a href="https://bundlephobia.com/result?p=promise-polyfill@8.1.3" rel="nofollow"><code>promise-polyfill</code></a></td><td>2.9kb</td><td>1.1kb</td></tr><tr><td><a href="https://bundlephobia.com/result?p=unfetch@4.1.0" rel="nofollow"><code>unfetch</code></a></td><td>1kb</td><td>554b</td></tr></tbody></table>
<p>Those savings aren’t monumental, but they shouldn’t be scoffed at either, especially considering the low amount of effort on my part, and the fact that those savings will be multipled throughout several different projects.</p>
<h3 id="2-simpler-distribution"><a aria-hidden="true" tabindex="-1" href="#2-simpler-distribution"><span class="icon icon-link"></span></a>2. Simpler distribution.</h3>
<p>Being polyfill-free, I don’t need to worry about asking other teams to deal with extra dependencies at all. No vetting process, no added documentation. Just grab the library &amp; go. This also means we’ll be avoiding the consequences that arise when teams inevitably fail to read that added documentation.</p>
<h3 id="3-less-risky-implementation"><a aria-hidden="true" tabindex="-1" href="#3-less-risky-implementation"><span class="icon icon-link"></span></a>3. Less risky implementation.</h3>
<p>When pulling in the package, teams don’t need to deal with the array of potential issues that come up from introducing global dependencies, such as double-loading polyfills that are already being pulled in, or subtle differences in how a polyfill behaves relative to the actual specification. Any risk in implementing the library is limited to the package code itself. In general, the JavaScript polyfill landscape is the <a href="https://twitter.com/BenLesh/status/1283491594327515140" rel="nofollow">wild west</a>, with no guarantees that packages will meet the full specification of an API (in fact, many don’t intend to). Being able to sidestep the unavoidable risks in dealing with them is huge.</p>
<h2 id="some-common-objections"><a aria-hidden="true" tabindex="-1" href="#some-common-objections"><span class="icon icon-link"></span></a>Some Common Objections</h2>
<p>Despite these good things, there are a few objections I’ve seen come up a few times:</p>
<h3 id="1-we-should-lean-into-writing-modern-javascript"><a aria-hidden="true" tabindex="-1" href="#1-we-should-lean-into-writing-modern-javascript"><span class="icon icon-link"></span></a>1. We should lean into writing modern JavaScript!</h3>
<p>Agreed, but not if that means doing so <em>for the sake of</em> writing modern JavaScript. If “modern” code introduces complexity and costs that could be avoided without a significant amount of effort, there’s no shame in going old-school. There’s a balance that needs to be found with every project, and more often than not, the “new” might have the best case (in fact, most of the time, I’d just go with <code>fetch</code>). But more classic solutions shouldn’t be immediately dismissed <em>exclusively</em> because there’s a flashier option out there. “It’s 2020, use <code>fetch</code> already!” is a weak argument to me.</p>
<h3 id="2-isnt-xmlhttprequest-deprecated"><a aria-hidden="true" tabindex="-1" href="#2-isnt-xmlhttprequest-deprecated"><span class="icon icon-link"></span></a>2. Isn’t XMLHttpRequest deprecated?</h3>
<p>No. A <em>part</em> of it (<a href="https://xhr.spec.whatwg.org/#synchronous-flag" rel="nofollow">the ability to make synchronous HTTP requests</a>) is in the process of being removed from the platform due to the horrid performance issues that come along with it. But the core API itself isn’t going anywhere, and still offers advantages over <code>fetch</code>, like <a href="https://xhr.spec.whatwg.org/#interface-progressevent" rel="nofollow">being able to track progress</a> on file uploads.</p>
<p>By using <code>XMLHttpRequest</code>, you’re not just piling on tech debt you’ll need to clean up a couple years from now. In fact, choosing it might actually set you up for <em>less</em> work in the future, since you’d otherwise be removing polyfills when they’re no longer needed (assuming you currently need to support IE).</p>
<h3 id="3-that-api-is-disgusting"><a aria-hidden="true" tabindex="-1" href="#3-that-api-is-disgusting"><span class="icon icon-link"></span></a>3. That API is disgusting!</h3>
<p>Yeah, it is. That’s why I’m placing decent emphasis on it being best for <em>simple</em> requests. The instant the scope of a package goes beyond that, or as soon as you drop IE as a supported browser, <code>fetch</code>(or something else) might be a better way to go. Until then, at the very least, play with it for a while instead of dismissing it based off water cooler dev chatter. You’ll likely discover (like I did) that it’s not nearly as bad as people make it out to be.</p>
<h3 id="4-i-like-my-promise-based-api"><a aria-hidden="true" tabindex="-1" href="#4-i-like-my-promise-based-api"><span class="icon icon-link"></span></a>4. I like my Promise-based API!</h3>
<p>Me too! But thankfully, it’s easy enough to wrap an <code>XMLHttpRequest</code> implementation in a Promise to retain that interface. You’ll get those ergonomics, and you’ll still have to deal with one less polyfill than if you had gone with something like <code>fetch</code>.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fire</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:4000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token method function property-access">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  xhr<span class="token punctuation">.</span><span class="token method function property-access">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;x-api-key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my-api-key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    xhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">&lt;</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token property-access">responseText</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    xhr<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Something went wrong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    xhr<span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token keyword control-flow">await</span> <span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2 id="sometimes-new-might-not-be-best"><a aria-hidden="true" tabindex="-1" href="#sometimes-new-might-not-be-best"><span class="icon icon-link"></span></a>Sometimes, New <em>Might</em> Not Be Best</h2>
<p>It’s easy to get excited about advancements to web APIs like <code>fetch</code>, and they’re very often the best tool for the job. But if we’re not careful, it’s just as easy to become dogmatic about using newer technologies exclusively because they’re new. As you wade these waters, try to keep the full scope of your circumstances in mind – the users, the needs, the environment, everything. You may find out that the best tool for the job is the one that’s been around since your grandma was making HTTP requests.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Evading Goodhart’s Law in My Personal Life]]></title>
        <id>https://macarthur.me/posts/evading-goodharts-law</id>
        <link href="https://macarthur.me/posts/evading-goodharts-law"/>
        <updated>2022-08-02T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A few months ago, I stumbled across Goodhart’s Law: When a measure becomes a target, it ceases to be a good measure. An example: The owner of a business wants his company to become a reputable brand on Twitter. To get there, he begins rewarding his social team for the...]]></summary>
        <content type="html"><![CDATA[<p>A few months ago, I stumbled across <a href="https://en.wikipedia.org/wiki/Goodhart%27s_law" rel="nofollow">Goodhart’s Law</a>:</p>
<p><em>When a measure becomes a target, it ceases to be a good measure.</em></p>
<p>An example: The owner of a business wants his company to become a reputable brand on Twitter. To get there, he begins rewarding his social team for the number of followers the account accumulates. Over time, that number goes through the roof. There’s celebration!</p>
<p>But then the owner skims through the tweets. He’s frustrated to see a high ratio of click bait with an overabundance of spammy hashtags. And on top of that, most of the new followers are bots or totally outside the company’s target market. Improving the <strong>measurement</strong> was a success, but the reaching the <strong>objective</strong> — growth as a <em>reputable</em> brand on Twitter — was a failure.</p>
<p>Jonathan Smart <a href="https://www.linkedin.com/posts/jonathansmart_bvssh-activity-6938086576065265664-bmTO" rel="nofollow">shared this illustration</a> on LinkedIn a while back. It captures the spirit of the idea perfectly.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/18658446-e9bf-42e6-ab99-bda7923304c7/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=1dfe8d186d5d7f924ff654ec8d1ea779d5404cbfa96c875050241b761fe74772&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>This phenomenon reveals some noteworthy things about us:</p>
<p><strong>First, we’re good at optimizing for specific outcomes.</strong></p>
<p>Usually, that’s a good thing. But if we’re not careful, it risks yielding some unintended consequences.</p>
<p>Consider high-stakes testing in schools. When standardized test scores are used to judge the performance of students and the effectiveness of teachers, classroom energy pivots from thoroughly teaching the material to <a href="https://www.usnews.com/news/national-news/articles/2017-11-13/better-tests-dont-lead-to-better-teaching-study-finds" rel="nofollow">preparing students to test well</a>. Two very different things. Schools are given the definition of success, and anything that doesn’t help achieve that end falls out of focus. No one intends for it to happen, but it does.</p>
<p>The story of the SEO industry also bears witness to this. Years ago, web content creators figured out that filling a site with (at least partially) relevant keywords and building a network of backlinks can boost its page rank. Knowing this, energies yet again shifted — this time from creating high-quality, engaging content to optimizing for these metrics. Keyword stuffing became a thing. Link farms were born. And eventually, Google and other search engines responded to these “<a href="https://blog.hubspot.com/marketing/black-hat-seo" rel="nofollow">black hat SEO</a>” tactics by either dampening the benefit, or straight-up penalizing sites for practicing them.</p>
<p>The takeaway is that when we are so dead-focused on a particular metric (or small set of them), the underlying <em>purpose</em> of that metric (a good education, strong content, etc.) can fade into our peripheral, perhaps disappearing altogether. If you’ve heard of the <a href="https://en.wikipedia.org/wiki/Troxler%27s_fading" rel="nofollow">Troxler effect</a>, it should feel similar:</p>
<blockquote>
<p>When one fixates on a particular point for even a short period of time, an unchanging stimulus away from the fixation point will fade away and disappear.</p>
</blockquote>
<p>TL;DR: Stare at something long enough and you’ll become blind to everything around it.</p>
<p>Try it out by focusing on the black cross in the image below. After staring for a while, if you’re a normal human, the pink, fuzzy dots will vanish:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a4e17035-f2ec-479d-a2c3-cc4b9102ce6d/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=538f05970d92da2739dd4b8202d49c29e78cd76904b134004352f99d66b937bd&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>You probably did a really good job ensuring the black cross didn’t sneak away. Nice work! But you likely also lost sight of what made the image interesting.</p>
<p><strong>Second, we’re picky (and lazy) about what we choose to measure,</strong> gravitating toward the things are simple and quantifiable (counting is easy). This shouldn’t be surprising. Many aims are difficult to reason about without hard numbers. Take “brand influence.” We know that winning in this area goes beyond revenue, follower count, or market share. But metrics like these are all we have when trying to get our heads around such a concept.</p>
<p>As a consequence, though, it’s easy to fall into some sort of analytical <a href="https://en.wikipedia.org/wiki/Streetlight_effect" rel="nofollow">streetlight effect</a>, using certain measurements to track progress for no other reason than them being the ones within reach. It’s a common challenge with any objective worth pursuing. We measure what we can monitor, at the risk of leaving out other elusive, unquantifiable, but meaningful indicators.</p>
<p><strong>Third, we’re quick to assume there’s two-way causality between events.</strong></p>
<p>We tend to believe that…</p>
<p>“If we meet an <strong>objective</strong>, our <strong>measurement</strong> moves up.”</p>
<p>… will also make for the inverse:</p>
<p>“If we make our <strong>measurement</strong> move up, we will have met our <strong>objective</strong>.”</p>
<p>But the <a href="https://en.wikipedia.org/wiki/Questionable_cause" rel="nofollow">Questionable Cause fallacy</a> and <a href="https://www.indy100.com/viral/bizarre-correlations-that-will-leave-you-wishing-nicolas-cage-would-retire-7240456" rel="nofollow">probably Nicolas Cage</a> say this isn’t always the case. <em>A</em> may cause <em>B</em>, but <em>B</em> will not necessarily cause <em>A</em>. And sometimes, they aren’t causally related in either direction, but simply share some other correlation that tricks us into thinking they’re really tied to the same lever. It’s a hard tendency to break when we’re so eager to grasp for something we can be confident will lead to an outcome.</p>
<h2 id="goodhart-gets-personal"><a aria-hidden="true" tabindex="-1" href="#goodhart-gets-personal"><span class="icon icon-link"></span></a>Goodhart Gets Personal</h2>
<p>All of this is usually discussed in the context of public policy, business strategy, and other boring grown-up topics. But as the it rolled around in my head, I began catching this law rear its head in several areas of my life (like, all of them), and I was very much taken aback. I started to notice how often I think things like this:</p>
<ul>
<li><em><strong>If I run more miles, I know I’ll be healthier.</strong></em> But then I start religiously obsessing over getting my runs in, compromising other areas of my well-being. Rather than eat lunch, I go on a run. I sacrifice sleep to squeeze in a few more miles. My <a href="https://www.strava.com/athletes/27922666" rel="nofollow">Strava account looks great</a>, but it’s questionable whether I’m actually healthier.</li>
<li><em><strong>If I read more books, I know I’ll be smarter.</strong></em> But then I find myself gravitating toward shorter books with shallow content, instead of substantive ones that challenge me to think. I start skimming pages rather than wrestling with them. None of the concepts stick because I’m always looking forward to crossing off another book from my list. I’m reading more, but only marginally better off for it.</li>
<li><em><strong>If I spend more time with my kids, I’ll strengthen my relationship with them.</strong></em> But then the time I do spend with them becomes hollow. There’s physical proximity, but not much more. We’ll spend an entire day together, but my focus will be on various projects in the garage while they bike on their own in the driveway. I’m “with” them, but not in a way that actually means anything. Again, the numbers are good, but the objective fails.</li>
</ul>
<p>None of the aims in this non-exhaustive list are inherently bad. In fact, I think they’re all <em>good</em>. <strong>But if they become the end goal themselves, my efforts become little more than an exercise in vanity.</strong> And even if these things do help to propel me toward some deeper purpose, my mind can become so fixated on moving a needle that it’s impossible for me to notice the real impact anyway. I’m blinded by the satisfaction of pulling something off. My life becomes one big demonstration of the Troxler effect.</p>
<h2 id="spiritual-parallels"><a aria-hidden="true" tabindex="-1" href="#spiritual-parallels"><span class="icon icon-link"></span></a>Spiritual Parallels</h2>
<p>I can’t help but see similarities in how the Bible speaks of faith and works. Rather than being the ultimate sole objective in the life of a Christian, works should overflow <em>out of</em> our faith as a byproduct. They’re a necessary side effect of the best objective having already been achieved by Christ:</p>
<blockquote>
<p>So also faith by itself, if it does not have works, is dead. But someone will say, ‘You have faith and I have works.’ Show me your faith apart from your works, and I will show you my faith by my works.</p>
</blockquote>
<p>James 2:17-18 (ESV)</p>
<p>And there’s no two-way causality here. Flipping the order will get you nowhere. Jesus is pretty direct:</p>
<blockquote>
<p>Not everyone who says to me, ‘Lord, Lord,’ will enter the kingdom of heaven, but the one who does the will of my Father who is in heaven. On that day many will say to me, ‘Lord, Lord, did we not prophesy in your name, and cast out demons in your name and do many mighty works in your name’ And then will I declare to them, ‘I never knew you; depart from me, you workers of lawlessness.’</p>
</blockquote>
<p>Matthew 7:21–23 (ESV)</p>
<p>You can show up with the results, but unless they’re aligned with and driven by something (someone) greater, they’re <em>worthless</em>.</p>
<h2 id="skirting-the-law"><a aria-hidden="true" tabindex="-1" href="#skirting-the-law"><span class="icon icon-link"></span></a>Skirting the Law</h2>
<p>Given how natural it is, I don’t think you can just “decide” not to succumb to these forces. But there do seem to be some good approaches to warding them off. Here are the favorites I’ve come across.</p>
<p><strong>Diversify how you measure for success.</strong></p>
<p>There’s a simple way to the short-circuit the Troxler effect: continually shift your focus, just a little bit, every so often. Test it yourself by going back up to that image and staring again. But this time, make little shifts in focus around the cross, always maintaining it within your direct view. The diversification of focus will prevent anything from fading away, no matter how long you’re staring. You get to keep an eye on the cross without losing site of the peripheral details.</p>
<p>Similarly, <a href="https://builtin.com/data-science/goodharts-law" rel="nofollow">diversifying your measurements</a> can provide a more comprehensive picture of whether you’re hitting the mark without losing sight of the objective. For that business owner looking to build his brand’s influence on Twitter, those might include:</p>
<ul>
<li>The engagement rate of Twitter followers (likes, replies, retweets).</li>
<li>The ratio of followers who are likely to be bots.</li>
<li>The fraction of tweets engaging with other users vs. just one-off posts.</li>
</ul>
<p>Or, for me looking to strengthen my relationship with my kids:</p>
<ul>
<li>The frequency at which they ask me to play a game with them.</li>
<li>The number of times they immediately go to me when they’re hurt, scared, or worried.</li>
<li>How often they want to show me the artwork they’ve made or the new trick they learned on the climbing dome.</li>
</ul>
<p>Shake up your measurements, and you’ll end up with a more whole, accurate view of how well you’re actually pulling things off.</p>
<p><strong>Second, track the untrackable.</strong></p>
<p>We’re missing something if we to bind the success of every objective to something we can count; the nature of some aims make it impossible to do so. This is the entire essence of the <a href="https://en.wikipedia.org/wiki/McNamara_fallacy" rel="nofollow">McNamara Fallacy</a>, named for the former U.S. Secretary of Defense, who was known to judge the success of the Vietnam War exclusively by measurements like body counts. He would adamantly dismiss any metric that couldn’t be quantified.</p>
<p>But in reality, some of the most valuable metrics you can chase are completely subjective but just as telling.</p>
<p>For the company’s brand influence, maybe it’s hearing how helpful a follower found its content to be in a certain area of life. Or maybe it’s noticing the depth of the questions you get from others in the industry, clearly hungry to learn from your efforts.</p>
<p>For my kids and me, that might mean watching the way they greet me when I come home from work. Or maybe it’s paying attention to the inflection of their voice when they come to me after they’ve screwed up. Unquantifiable, but immensely valuable.</p>
<p><strong>Finally, maybe just don’t measure.</strong></p>
<p>Running has always been somewhat of a pressure release valve for me. A means physically resetting and shaking off stress. For these reasons among others, I enjoy it.</p>
<p>But there was a season when the numbers got in the way. While training for races, the enjoyment I got out of it was displaced by the pressure to hit a certain mile count or pace. Rather than looking forward to getting on the road, I was eager for it to be over. I started to question whether contemptuously squeezing the stats out of a run was worth the feedback I’d get when I’d eventually post a picture of a race medal to Instagram.</p>
<p>Depending on the circumstances, maybe measuring an output at all does a disgrace to the real objective. Maybe the thing you’re measuring are just gifts, and aren’t meant to be monitored, but simply enjoyed.</p>
<p>I wonder if Paul’s getting at something like this in Galatians 5. It’s in the context of the freedom Christ has achieved <em>for</em> us, allowing us to no longer live in submission to “a yoke of slavery” (v1). Being free, we are called not to live by the flesh, but by the Spirit. It’s here where Paul lists the “works” of the former:</p>
<blockquote>
<p>Now the works of the flesh are evident: sexual immorality, impurity, sensuality, idolatry, sorcery, enmity, strife, jealousy, fits of anger, rivalries, dissensions, divisions, envy, drunkenness, orgies, and things like these. I warn you, as I warned you before, that those who do, such things will not inherit the kingdom of God.</p>
</blockquote>
<p>Galations 5:19-21</p>
<p>But later on when describing life by the Spirit, he provides another list. This time, they’re notably described as “fruit.”</p>
<blockquote>
<p>But the fruit of the Spirit is love, joy, peace, patience, kindness, goodness, faithfulness, gentleness, self-control; against such things there is no law.</p>
</blockquote>
<p>Galations 5:22-23</p>
<p>“Works” is a something I do. “Fruit” is something I harvest. It’s an output indicative of choosing to live by something holy rather than ungodly, sure. But more than anything else, that verse reads to me like those things are <em>gifts</em>. The work is done, and I’m simply invited to enjoy them in gratitude.</p>
<p>I’ve seen (and done so myself) people use this passage as some sort of litmus test for authentic Christianity — a “measurement” in the Goodhart sense. I don’t want to dismiss that altogether, but if that’s all we see in this passage, I think we’re missing the point. That list of things isn’t just evidence of our sanctification. They’re good things that result from choosing to live under a certain Authority. Knowing this makes me breathe more easily, both on the road &amp; off.</p>
<h2 id="be-not-deceived"><a aria-hidden="true" tabindex="-1" href="#be-not-deceived"><span class="icon icon-link"></span></a>Be Not Deceived</h2>
<p>There’s a hint of irony in writing this very post, because I’ll probably fall prey to Goodhart’s law by doing so. I’ll walk away from publishing this with a boost of achievement. My total post count will go up. I’ll get some site hits. Maybe some comments. And I’ll yet again deceive myself into believing that all those metrics are indicative of something greater I’ve achieved as a result. What’s extra rich is that I don’t even know what that “something” is. I’ve just become so conditioned to focus on the numbers that it really doesn’t matter anymore.</p>
<p>It should go without saying: the habit isn’t going anywhere. But at the very least, I’m hoping that reflecting on all of this will help crack the blinds of awareness and lead me to catch it more frequently in my daily life. And maybe with enough practice, more and more fuzzy, pink dots will come back into view.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why I Like Tailwind CSS]]></title>
        <id>https://macarthur.me/posts/why-i-like-tailwind-css</id>
        <link href="https://macarthur.me/posts/why-i-like-tailwind-css"/>
        <updated>2020-08-06T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve used Tailwind CSS for a few projects over the last several months, and it’s been steadily growing on me – to the point of it becoming my go-to tool for styling new projects. At the same time, I’m seeing a lot of people ask what all the hype is...]]></summary>
        <content type="html"><![CDATA[<p>I’ve used <a href="https://tailwindcss.com/" rel="nofollow">Tailwind CSS</a> for a few projects over the last several months, and it’s been steadily growing on me – to the point of it becoming <strong>my go-to tool for styling new projects</strong>.</p>
<p>At the same time, I’m seeing a lot of people ask what all the hype is about, often in an effort to determine if it’s right for them too. I’ve responded to those questions a couple of times now, and thought it’d be handy to have a quick reference as to why I’ve come to like it myself, as well as the challenges I’ve experienced along the way. All of this is based on my own experience from recent memory, so it’s likely to change to some degree as time goes on. Still, hopefully it helps someone else grasp if it’s something they should try out themselves.</p>
<h2 id="things-i-really-like"><a aria-hidden="true" tabindex="-1" href="#things-i-really-like"><span class="icon icon-link"></span></a>Things I Really Like</h2>
<p><strong>1. I can prototype</strong> <em><strong>much</strong></em> <strong>more quickly.</strong></p>
<p>Other styling approaches I’ve used require me to jump between multiple different files just to stand up a page with some basic asthetics. At minimum, that’d mean an HTML file and a stylesheet. And whenever I was in a highly-componentized BEM project (like I most often was), that could mean a <em>lot</em> of files open at once – the file containing the HTML and then one SCSS file for each UI component I was writing.</p>
<p>With Tailwind, however, all I really need to pay attention to is the HTML. Fewer VS Code tabs for my brain to manage means I can prototype more easily and quickly.</p>
<p><strong>2. Built-in PurgeCSS means I only ship the styles I actually use.</strong></p>
<p>When working with other utility-based CSS frameworks, it’s a pain to ensure you don’t ship any of the CSS you don’t actually use. Depending on the framework, your options are to manually import the things you actually use, give up altogether, or try your hand at configuring a tool like <a href="https://purgecss.com/" rel="nofollow">PurgeCSS</a> to remove unused classes on compilation. As of v1.4, <a href="https://tailwindcss.com/docs/release-notes/#tailwind-css-v1-4" rel="nofollow">Tailwind has PurgeCSS built in</a>, with a lot of the hassle abstracted away, so I can focus on styling without worrying so much about CSS bloat.</p>
<p><strong>3. I can throw away HTML without orphaning accompanying CSS.</strong></p>
<p>Especially when I’m prototyping something, it’s common for me to spontaneously throw out HTML I thought I’d need but don’t. When my styles and makeup are maintained separately, a second step is required to remove that unnecessary CSS. I often forget to do that, forever leaving it orphaned. The markup-driven styling provided by Tailwind means all I have to throw away is the HTML itself. Nothing else (unless I have some custom components I’ve composed somewhere, but that’s rare).</p>
<p><strong>4. I don’t need to name so many things.</strong></p>
<p>It takes time, it’s hard, and I suck at it. When using Tailwind, the only time I need to dream up a class name is when I’m composing my own components, which isn’t often at all. For the most part, I can spend my time bringing my UI to life, rather than wasting it second-guessing what I chose to name something.</p>
<p><strong>5. Consistent design token values (font sizes, colors, spacing, etc.) are set up for me.</strong></p>
<p>When starting with more of a bare-bones, roll-my-own styling approach, it’s a chore to determine what my base font sizes, colors, spacing values, and everything else should be. Tailwind offers consistent sets of these values out-of-the-box, while also enabling me to <a href="https://tailwindcss.com/docs/margin/#customizing" rel="nofollow">customize them</a> as needed.</p>
<p><strong>6. It’s easy to incrementally adopt in a project.</strong></p>
<p>If you want to leverage just <em>some</em> of the utilities provided by Tailwind, or want to migrate to it more slowly, it’s relatively easy to do so without overcommitting yourself or putting the entire project through a refactor. After setting it up (the most common way to do so is probably <a href="https://tailwindcss.com/docs/installation#using-tailwind-with-postcss" rel="nofollow">as a PostCSS plugin</a>), you can either <a href="https://tailwindcss.com/docs/configuration/" rel="nofollow">manually configure Tailwind</a> to include only what you need, or rely on the aforementioned PurgeCSS integration to remove the styles you don’t use. I appreciate that flexibility.</p>
<p><strong>7. The documentation is incredible.</strong></p>
<p>In particular, the search functionality in the Tailwind documentation is nearly psychic (and the “press ‘/’ to focus” feature is a huge nice-to-have). If I’m looking for some utility, my first search attempt nearly always returns what I need without requiring me to try again with different terms. It’s just good. Moreover, it’s fast, thorough, and filled with helpful examples.</p>
<h3 id="some-challenges-ive-seen"><a aria-hidden="true" tabindex="-1" href="#some-challenges-ive-seen"><span class="icon icon-link"></span></a>Some Challenges I’ve Seen</h3>
<p>My admiration for this tool is strong, but it’d be unfair to leave out the challenges I’ve had working with it.</p>
<p><strong>1. The learning curve can be steep.</strong></p>
<p>At first, it sort of felt like I was relearning CSS itself, and that was frustrating. There’s a utility for virtually everything (it seems like), and trying to get my brain to map real CSS attributes to those utilities just took some time (I’m still working on it). This is where that documentation really shines, because if it weren’t for that, I’d have given up early on.</p>
<p><strong>2. HTML can quickly become ugly &amp; convoluted.</strong></p>
<p>Much of this is probably just preferential, or perhaps due to the fact that it goes against what I’ve become accustomed to while working with BEM for so long. But at the same time, when working with something like JSX in React or any other templating language infused with a moderate amount of logic, it can get rough to parse everything going on in a component with utility classes sprinkled everywhere.</p>
<p>I experienced some of this pain when building <a href="https://typeitjs.com/" rel="nofollow">TypeIt’s site</a> with Tailwind + <a href="https://gatsbyjs.org/" rel="nofollow">Gatsby</a>. In order to fine-tune the styling I wanted, I had to do stuff like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div
  className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></span>
<span class="token string">            lg:flex</span>
<span class="token string">            justify-center</span>
<span class="token string">            fixed</span>
<span class="token string">            lg:relative</span>
<span class="token string">            top-0</span>
<span class="token string">            left-0</span>
<span class="token string">            h-full</span>
<span class="token string">            w-full</span>
<span class="token string">            bg-white</span>
<span class="token string">            translate-left</span>
<span class="token string">            lg:translate-none</span>
<span class="token string">            overflow-scroll</span>
<span class="token string">            lg:overflow-visible</span>
<span class="token string">            pt-8</span>
<span class="token string">            md:p-0</span>
<span class="token string">            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>menuIsOpen <span class="token operator">?</span> <span class="token string">&quot;translate-none&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="token string">          </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">&quot;self-start mx-auto lg:-mx-3 lg:mt-0 block lg:flex mb-8 lg:mb-0&quot;</span><span class="token operator">&gt;</span>
    <span class="token punctuation">{</span>links<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>li
          key<span class="token operator">=</span><span class="token punctuation">{</span>link<span class="token punctuation">.</span><span class="token property-access">path</span><span class="token punctuation">}</span>
          ref<span class="token operator">=</span><span class="token punctuation">{</span>navItemRef<span class="token punctuation">}</span>
          className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">siteNavListItem flex px-5 flex-col lg:flex-row items-center font-light justify-center mb-5 lg:mb-0 relative</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span>
        <span class="token operator">&gt;</span>
          <span class="token punctuation">{</span><span class="token comment">/* link content... */</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre></div>
<p>With so many utility classes in play, it was just <em>hard</em> to figure out the best way to format everything while keeping the entire file relatively legible.</p>
<p>Admittedly, there are some tricks to help mitigate this, mainly relying on strategies Tailwind recommends to <a href="https://tailwindcss.com/docs/extracting-components/" rel="nofollow">componentize parts of your UI</a>, such as:</p>
<ul>
<li>using Tailwind’s <code>@apply</code> directive to create single classes composed of utilities.</li>
<li>writing templates or JS components that accept the data you’d like to display.</li>
</ul>
<p>But these all feel like more work I just don’t want to do. All that said, “messy” HTML, at some level, may just be a necessary trade-off of using a styling approach like Tailwind does, much like any other approach has trade-offs of its own.</p>
<h3 id="why-do-you-like-it"><a aria-hidden="true" tabindex="-1" href="#why-do-you-like-it"><span class="icon icon-link"></span></a>Why Do You Like It?</h3>
<p>Despite the couple of challenges I’ve seen, Tailwind has allowed me to style UI components in a more productive fashion, and I’ll likely keep it around as my go-to tool for doing such things. Even so, that might not be the case for everyone. So, I’m curious to hear what you like about Tailwind, as well as the challenges you’ve encountered. Are there things you like or hate that I don’t mention here, or are even offshoots of any of them? Bring ’em up!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Shell Function to Copy the Latest Commit SHA]]></title>
        <id>https://macarthur.me/posts/building-a-shell-function-to-copy-latest-commit-sha</id>
        <link href="https://macarthur.me/posts/building-a-shell-function-to-copy-latest-commit-sha"/>
        <updated>2019-08-29T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Frequently enough, I find myself needing to copy the SHA of the latest commit in project, and doing it manually was becoming a chore. I’d been getting more comfortable and excited about improving efficiency by rolling custom shell functions (like I wrote about here), and so this felt like a...]]></summary>
        <content type="html"><![CDATA[<p>Frequently enough, I find myself needing to copy the SHA of the latest commit in project, and doing it manually was becoming a chore. I’d been getting more comfortable and excited about improving efficiency by rolling custom shell functions (<a href="/posts/formatting-my-php-more-efficiently-with-a-bash-function">like I wrote about here</a>), and so this felt like a good candidate for another one. After a bit of searching, this was confirmed – very little was out there on someone else building a simple terminal command to do such a thing. So, I went for it.</p>
<p><strong>Problem:</strong> Copy the SHA of my last commit is clunky and takes time.</p>
<p><strong>Solution:</strong> Make a shell function that’ll allow me to do it with a simple terminal command.</p>
<h2 id="building-the-function"><a aria-hidden="true" tabindex="-1" href="#building-the-function"><span class="icon icon-link"></span></a>Building the Function</h2>
<p>Most of the experimentation I did for this was done in a regular shell script on my machine. But to quickly test the script as a terminal command, I copied my iterations inside my <code>~/.zshrc</code> and sourced it with <code>source ~/.zshrc</code>. Over time, this is how those iterations progressed.</p>
<h3 id="iteration-1--stupid-simple"><a aria-hidden="true" tabindex="-1" href="#iteration-1--stupid-simple"><span class="icon icon-link"></span></a>Iteration #1 :: Stupid Simple</h3>
<p>Setting up the basics of the function was pretty straightforward:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token comment"># `clc` stands for `copy last commit`.function clc {    LAST_COMMIT_SHA=$(git rev-parse HEAD)    echo &quot;$LAST_COMMIT_SHA&quot; | tr -d &#x27;\n&#x27; | pbcopy    echo &quot;Copied ${LAST_COMMIT_SHA}.&quot;}</span>
</code></pre></div>
<p>At this point, I can run <code>clc</code> in my terminal, and by doing so, grab the last commit SHA, remove the line breaks, copy it to the clipboard, and spit out a nice confirmation message. Gets the job done! But.</p>
<h3 id="iteration-2--copy-from-different-branch"><a aria-hidden="true" tabindex="-1" href="#iteration-2--copy-from-different-branch"><span class="icon icon-link"></span></a>Iteration #2 :: Copy From Different Branch</h3>
<p>When I’m cherry-picking, I often want the latest commit SHA from different branch – not my current one. So, I upgraded the function to accept a branch name as a parameter. If the parameter is set, check out that branch, grab the latest commit SHA, and return to the original branch.</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">function clc {+    # The original script wrapped in a nested function:+    function copy_last_commit() {        LAST_COMMIT_SHA=$(git rev-parse HEAD)        echo &quot;$LAST_COMMIT_SHA&quot; | tr -d &#x27;\n&#x27; | pbcopy        echo &quot;Copied ${LAST_COMMIT_SHA}.&quot;+    }++    # Added to check out branch, if parameter is set.+    if [ ! -z &quot;$1&quot; ]; then+        if git checkout $1 &gt;/dev/null; then+            copy_last_commit+            git checkout - &gt;/dev/null+        else+            echo &quot;Checkout wasn&#x27;t successful. Didn&#x27;t copy anything.&quot;+        fi+    else+        copy_last_commit+    fi}
</code></pre></div>
<p>Now, we can run something like <code>clc some-branch</code>. That’ll cause the branch to be checked out (<code>git checkout $1 &gt;/dev/null</code>), and if that’s successful, the copying will commence, spitting out something like this:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">Switched to branch &amp;#39;my-branch&amp;#39;
Copied 3ccbd742f916659c50cbff6c2f63e2ba28a168b5.
Switched to branch &amp;#39;master&amp;#39;</code></pre></div>
<p>If, by chance, I pass a non-existent branch name and it fails, an error message is output. And, of course, if no branch parameter is passed, the just check go straight to copying the commit SHA of the current branch. But!</p>
<h3 id="iteration-3--respect-unstaged-changes"><a aria-hidden="true" tabindex="-1" href="#iteration-3--respect-unstaged-changes"><span class="icon icon-link"></span></a>Iteration #3 :: Respect Unstaged Changes</h3>
<p>Often times, my active branch has a bunch of unstaged changes, and running this command to grab a SHA from a different branch produces this message:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">Please commit your changes or stash them before you switch branches.
Aborting
Checkout wasn&amp;#39;t successful. Didn&amp;#39;t copy anything.</code></pre></div>
<p>So, I went for upgrading this again – this time, instead of completely checking out the branch, using <code>git stash</code> to stash away our changes and restore them. It’s lot more flexible, not requiring that you have a clean working directory.</p>
<p>In doing this, it’s important that we only <code>stash</code> when it’s actually needed. Running <code>git stash</code> when there’s nothing to stash does <em>nothing</em> – no new stash is created. And if we automatically run <code>git stash pop</code> when a new stash wasn’t actually created, we might end up restoring a previous stash we don’t want (you can view all the stashes in your repo using <code>git stash list</code>).</p>
<p>I performed this check using <code>git status -s</code> and saving it to the variable <code>IS_DIRTY</code>. If the working tree is “dirty,” stash the changes, and restore them when we’re all done.</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">function clc {    # The original script wrapped in a nested function:    function copy_last_commit() {        LAST_COMMIT_SHA=$(git rev-parse HEAD)        echo &quot;$LAST_COMMIT_SHA&quot; | tr -d &#x27;\n&#x27; | pbcopy        echo &quot;Copied ${LAST_COMMIT_SHA}.&quot;    }    # Added to check out branch, if parameter is set.    if [ ! -z &quot;$1&quot; ]; then+        IS_DIRTY=$(git status -s)++        if [[ ! -z $IS_DIRTY ]]; then+            git stash push -u &gt;/dev/null+            echo &quot;Stashed unstaged stages.&quot;+        fi        if git checkout $1 &gt;/dev/null; then            copy_last_commit            git checkout - &gt;/dev/null        else            echo &quot;Checkout wasn&#x27;t successful. Didn&#x27;t copy anything.&quot;        fi+        if [[ ! -z $IS_DIRTY ]]; then+            git stash pop &gt;/dev/null+            echo &quot;Restored unstaged changes.&quot;+        fi    else        copy_last_commit    fi}
</code></pre></div>
<p>Because it tripped me up, take extra notice that I’m not using a simple <code>git stash</code> command to stash my changes. Instead I’m using <code>git stash push -u</code>. This is because I want to stash away <em>all</em> my current changes, including files I might have just created but not yet committed. The more verbose <code>git stash push</code> followed by the <code>-u</code> (which stands for <code>--include-untracked</code>) flag will do just that.</p>
<h2 id="iteration-4--tear-down--rebuild-everything-"><a aria-hidden="true" tabindex="-1" href="#iteration-4--tear-down--rebuild-everything-"><span class="icon icon-link"></span></a>Iteration #4 :: Tear Down &amp; Rebuild Everything 🤦</h2>
<p>At this point, I was feeling pretty good about myself. I had worked through all the weird shell issues I had hit along the way, and actually published this very blog post on the whole process.</p>
<p>And then, a couple of Reddit users (thanks, <a href="https://www.reddit.com/user/nunull/" rel="nofollow">nunull</a> and <a href="https://www.reddit.com/user/austin-schaffer/" rel="nofollow">austin-schaffer</a>!) pointed out that I don’t actually <em>need</em> to perform a checkout just to get at a commit SHA. This should have been obvious since was already using <code>git rev-parse HEAD</code> to pull the SHA. Swapping out <code>HEAD</code> for whatever branch I need would have done the trick, completely removing the need for any of that complicated checkout and stash logic 🤦.</p>
<p>With that revelation, the function goes from all of those lines of code down to just a few:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token keyword">function</span> <span class="token function-name function">clc</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">BRANCH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-parse --abbrev-ref HEAD<span class="token variable">)</span></span> <span class="token operator">||</span> <span class="token assign-left variable">BRANCH</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token assign-left variable">LAST_COMMIT_SHA</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-parse $BRANCH <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">1</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$LAST_COMMIT_SHA</span>&quot;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">&#x27;\n&#x27;</span> <span class="token operator">|</span> pbcopy    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Copied <span class="token variable">${LAST_COMMIT_SHA}</span>.&quot;</span><span class="token punctuation">}</span>
</code></pre></div>
<p>See, Reddit ain’t so bad! Thanks again to the two who called this out!</p>
<h2 id="see-the-touched-up-final-product"><a aria-hidden="true" tabindex="-1" href="#see-the-touched-up-final-product"><span class="icon icon-link"></span></a>See the Touched Up Final Product</h2>
<p>I’ve added a couple of pretty terminal colors in the version that lives in <a href="https://gist.github.com/alexmacarthur/933a50c3e072baaf7b6ed18b94e0e873" rel="nofollow">this Gist</a>.</p>
<h2 id="using-the-function"><a aria-hidden="true" tabindex="-1" href="#using-the-function"><span class="icon icon-link"></span></a>Using the Function</h2>
<p>To use this in your local shell, you could throw it in your <code>~/.bashrc</code> or <code>~/.zshrc</code> file, but it’s probably better to store it somewhere else on your system. I can’t speak for <code>bash</code> users, but if you’re using <code>zsh</code>, that’s just a matter of putting the file in your <code>$ZSH/custom</code> directory and sourcing it.</p>
<h3 id="install-as-custom-zsh-function"><a aria-hidden="true" tabindex="-1" href="#install-as-custom-zsh-function"><span class="icon icon-link"></span></a>Install as Custom ZSH Function</h3>
<p>To make it super easy, run the following command, which will retrieve the function from my GitHub Gist and put it into the appropriate location:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">curl</span> https://gist.githubusercontent.com/alexmacarthur/933a50c3e072baaf7b6ed18b94e0e873/raw/59f22ae740d83f39a88b70f4aebb0c27b2f9805f/copy-last-commit.zsh <span class="token parameter variable">-o</span> <span class="token variable">$ZSH</span>/custom/clc.zsh
</code></pre></div>
<h3 id="running-the-command"><a aria-hidden="true" tabindex="-1" href="#running-the-command"><span class="icon icon-link"></span></a>Running the Command</h3>
<p>After doing that, source it up with <code>source ~/.zshrc</code>, and you should be able to run the command.</p>
<p>Running <code>clc</code> will return something like this:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">Copied 3ccbd742f916659c50cbff6c2f63e2ba28a168b5 from master.</code></pre></div>
<p>Running <code>clc new-branch</code> will return something like this:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">Copied 3ccbd742f916659c50cbff6c2f63e2ba28a168b5 from new-branch.</code></pre></div>
<h2 id="did-i-miss-something"><a aria-hidden="true" tabindex="-1" href="#did-i-miss-something"><span class="icon icon-link"></span></a>Did I Miss Something?</h2>
<p>It wouldn’t surprise me. If you have any suggestions or improvements, let me know!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Avoid Heavy Babel Transformations by (Sometimes) Not Writing Modern JavaScript]]></title>
        <id>https://macarthur.me/posts/avoid-heavy-babel-transformations-by-sometimes-not-writing-modern-javascript</id>
        <link href="https://macarthur.me/posts/avoid-heavy-babel-transformations-by-sometimes-not-writing-modern-javascript"/>
        <updated>2020-05-20T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guest post in which I explore some of the times you might consider using “old school” approaches in JavaScript in order to avoid particularly heavy Babel transformations. ...]]></summary>
        <content type="html"><![CDATA[<p>A guest post in which I explore some of the times you might consider using “old school” approaches in JavaScript in order to avoid particularly heavy Babel transformations.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Preloading JavaScript Assets in WordPress]]></title>
        <id>https://macarthur.me/posts/preloading-javascript-in-wordpress</id>
        <link href="https://macarthur.me/posts/preloading-javascript-in-wordpress"/>
        <updated>2018-04-05T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Squeezing every last drop of performance out of your website on any platform is an always-changing, never-ending, often addictive battle. Among the several tactics you can employ in this fight, leveraging resource hints is a modern approach that can yield some significant ROI – with preloading is a particularly impactful...]]></summary>
        <content type="html"><![CDATA[<p>Squeezing every last drop of performance out of your website on any platform is an always-changing, never-ending, often addictive battle.</p>
<p>Among the several tactics you can employ in this fight, leveraging <a href="https://www.w3.org/TR/resource-hints" rel="nofollow">resource hints</a> is a modern approach that can yield some significant ROI – with preloading is a particularly impactful place to start. <a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" rel="nofollow">It’s a topic worth learning about in more depth yourself</a>, but in short, preloading directs a browser to asynchronously load an asset as soon as possible in the background, so it’s ready to be used when the page calls for it. While the <em>amount</em> of data being loaded by your page won’t change, the start-to-end process of it all will go more quickly, impacting metrics like <a href="https://web.dev/interactive/" rel="nofollow">TTI</a>.</p>
<p>Preloading is most useful for fetching resources that are discovered late within the page life cycle – things like fonts or images that are referenced from within a stylesheet, or other assets that are requested via JavaScript. But it’s also been used to prioritize top-level assets on a page, like your main JavaScript files:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://my-script.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- a bunch o&#x27; content --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://my-script.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>When a page like this loads, the browser is told to download the referenced asset at high priority, beating out the priority placed on other resources that might have been requested.</p>
<h2 id="what-this-doesnt-mean"><a aria-hidden="true" tabindex="-1" href="#what-this-doesnt-mean"><span class="icon icon-link"></span></a>What This Doesn’t Mean</h2>
<p>To be fair, a setup like this won’t <em>guarantee</em> you great gains in raw performance, and that’s because the browser’s already <em>really</em> good at this sort of thing. For the past several years, browsers have implement a practice called “speculative scanning,” or “preload scanning.” Per this process, as the browser is building the DOM for the page, it will parse the HTML document for resources it’ll eventually need (JavaScript, CSS, etc.), and <a href="https://hacks.mozilla.org/2017/09/building-the-dom-faster-speculative-parsing-async-defer-and-preload/" rel="nofollow">begin downloading those in the background</a>. You get this for free, right out of the box.</p>
<p>But what this process <em>won’t</em> do for you is tell the browser which assets it finds are <em>most</em> important (it’ll default to its own logic for that – usually by placement on the page). In the WordPress space especially, this is where the <code>preload</code> hint is especially handy. Depending on the site, a WordPress application often enqueues several different JavaScript, CSS, and image resources all at once, with a lot of those having low priority on certain pages, and higher priority on others. Indiciating which ones are most crucial can give the browser a leg up when your site loads.</p>
<h2 id="automate-javascript-preloading-in-wordpress"><a aria-hidden="true" tabindex="-1" href="#automate-javascript-preloading-in-wordpress"><span class="icon icon-link"></span></a>Automate JavaScript Preloading in WordPress</h2>
<p>In WordPress, it’s easy enough to manually spit out a <code>link ref=&quot;preload&quot;</code> tag for each file you’d like to preload, but it’s kind of a pain to set up if you’re managing a site with a lot of different scripts being loaded throughout the frame of the page. You want this automated, and you want that automation to be smart about which scripts are chosen to be preloaded.</p>
<p>The most straightforward solution to this is to <strong>loop over your registered scripts preload them in the header.</strong> This can be achieved by simply running the following few lines of code in your application. You <em>could</em> drop them in your theme’s <code>functions.php</code> file, but don’t. Instead, just <a href="https://macarthur.me/posts/creating-the-simplest-wordpress-plugin" rel="nofollow">make a really simple plugin</a>. It’s almost always a better option.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;wp_head&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">global</span> <span class="token variable">$wp_scripts</span><span class="token punctuation">;</span>

  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$wp_scripts</span><span class="token operator">-&gt;</span><span class="token property">queue</span> <span class="token keyword">as</span> <span class="token variable">$handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$script</span> <span class="token operator">=</span> <span class="token variable">$wp_scripts</span><span class="token operator">-&gt;</span><span class="token property">registered</span><span class="token punctuation">[</span><span class="token variable">$handle</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//-- If version is set, append to end of source.</span>
    <span class="token variable">$source</span> <span class="token operator">=</span> <span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">src</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">ver</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;?ver=<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">ver</span><span class="token punctuation">}</span></span>&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//-- Spit out the tag.</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;link rel=&#x27;preload&#x27; href=&#x27;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$source</span><span class="token punctuation">}</span></span>&#x27; as=&#x27;script&#x27;/&gt;\n&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Here’s what’s going on: On the <code>wp_head</code> hook (which fires after our scripts have been enqueued), we’re looping through our registered scripts and printing out a <code>link</code> tag in our <code>head</code> for each resource. In the end, we’ve given our registered JavaScript resources priority over every other asset that the browser has otherwise discovered for download.</p>
<p>Two notes about this setup:</p>
<p><strong>1. We’re hooking into</strong> <strong><code>wp_head</code></strong> <strong>with an early priority to spit out our</strong> <strong><code>link</code></strong> <strong>tags.</strong> We’re choosing this hook because it fires after our scripts have been enqueued, and it allows us to get as close to the top of the page as possible. The priority of <code>1</code> means it’ll fire early on – before most other stuff gets printed in the head. The <code>wp_print_scripts</code> or <code>wp_print_styles</code> hooks would also work just fine – it’d just mean that our hints are generated a little farther down on the page.</p>
<p><strong>2. We’re making sure the URLs of these assets match</strong> <em><strong>exactly</strong></em><strong>, including the version.</strong> You’ll notice that if a version isn’t set on an asset we’re looping over, not even the <code>?</code> is attached to our source URL. That’s because if the <code>href</code> in your <code>link</code> tag doesn’t match the <code>src</code> attribute of your <code>script</code> tag, the browser will think these are two different resources, and you’ll have gained nothing.</p>
<p><strong>3. We’re preloading even the scripts that are enqueued in the</strong> <strong><code>&lt;head&gt;</code>****.</strong> It might seem counterintuitive, since the browser should give them relatively high priority due to where they’re located. But it’s possible that other scripts may compete with these, and we want to deliberately give <em>ours</em> the highest priority, regardless of where the actual <code>&lt;script&gt;</code> tags are placed.</p>
<h2 id="think-about-scoping"><a aria-hidden="true" tabindex="-1" href="#think-about-scoping"><span class="icon icon-link"></span></a>Think About Scoping</h2>
<p>With this setup, we’re preloading every enqueued script out of the box, and as a result, it’s possible that we’re setting priority to scripts of less concern to us. So, for your specific use case, consider introducing some logic that would make this a little more intentional. For example, if you want to explicitly prioiritze your theme’s scripts, you might only generate the hint when the script’s path is found within your theme’s directory.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;wp_head&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">global</span> <span class="token variable">$wp_scripts</span><span class="token punctuation">;</span>

  <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$wp_scripts</span><span class="token operator">-&gt;</span><span class="token property">queue</span> <span class="token keyword">as</span> <span class="token variable">$handle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$script</span> <span class="token operator">=</span> <span class="token variable">$wp_scripts</span><span class="token operator">-&gt;</span><span class="token property">registered</span><span class="token punctuation">[</span><span class="token variable">$handle</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// This script&#x27;s doesn&#x27;t belong in my theme; don&#x27;t preload.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">src</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;/themes/mytheme/&quot;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">extra</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;group&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">extra</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;group&#x27;</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token variable">$source</span> <span class="token operator">=</span> <span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">src</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">ver</span> <span class="token operator">?</span> <span class="token string double-quoted-string">&quot;?ver=<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$script</span><span class="token operator">-&gt;</span><span class="token property">ver</span><span class="token punctuation">}</span></span>&quot;</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;link rel=&#x27;preload&#x27; href=&#x27;<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$source</span><span class="token punctuation">}</span></span>&#x27; as=&#x27;script&#x27;/&gt;\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2 id="verify-its-working"><a aria-hidden="true" tabindex="-1" href="#verify-its-working"><span class="icon icon-link"></span></a>Verify It’s Working</h2>
<p>Open the source on your page. You should see tags for each one of your footer-enqueued JavaScript files that look like this in your header:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#x27;</span>preload<span class="token punctuation">&#x27;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#x27;</span>https://whatever-source.js?v=123<span class="token punctuation">&#x27;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#x27;</span>script<span class="token punctuation">&#x27;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div>
<p>Now, look for the <code>script</code> tag in your footer that loads each respective file, and verify that the sources match exactly.</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#x27;</span>https://whatever-source.js?v=123<span class="token punctuation">&#x27;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Next, if you’re using Chrome, go into your developer tools, select the “Network” tab and refresh your page. Filter by JS files only, and you should see something like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/d3c3d665-c07a-44ef-8b86-a5a60e0993c9/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=8846275c17f5a692b9136f97a3d98b6321cbbfb40a96bcef926cfe20065e255e&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Each of those files at the top should have a priority of “High” in the order you preloaded them.</p>
<h2 id="measure-your-performance-results"><a aria-hidden="true" tabindex="-1" href="#measure-your-performance-results"><span class="icon icon-link"></span></a>Measure Your Performance Results!</h2>
<p>Obviously, all of this is pointless unless there are measurable performance gains that come out of it. When I was testing a specific WordPress application with a great deal of plugin-enqueued scripts, I saw some pretty encouraging numbers. By nature of the a local development environment, these results varied, but were consistently positive.</p>
<p>Lighthouse Performance Results:</p>
<hr/>
<p><strong>Overall Score:</strong> 2-5 point improvement</p>
<p><strong>First Meaningful Paint:</strong> As high as ~20% improvement</p>
<p><strong>First Interactive:</strong> As high as ~15% improvement</p>
<p><strong>Perceptual Speed Index:</strong> As high as ~20% improvement</p>
<hr/>
<p>This is for a very specific JavaScript-heavy use case, running on my local machine using Chrome’s built-in Lighthouse auditing tool. I did some quick testing with a less script-heavy marketing site, and those improvements fell down to the 3-5% range. Regardless of the actual numbers, it’s hard to deny those are some significant improvements. And for such a quick, low-impact win, you’d be a fool to turn those savings down.</p>
<p>Did you see similar improvements? Share your results when you measure them!</p>
<h2 id="this-should-be-safe-but-test-thoroughly"><a aria-hidden="true" tabindex="-1" href="#this-should-be-safe-but-test-thoroughly"><span class="icon icon-link"></span></a>This <em>Should</em> Be Safe, but Test Thoroughly</h2>
<p>All this snippet is doing is preloading scripts that are already being loaded on your page. It doesn’t rearrange load or execution order, mess with <code>async</code> or <code>defer</code>, or anything else. So, like leveraging any other resource hints responsibly, it <strong>should</strong> be relatively safe. Even so, be a good developer and test before deploying to production.</p>
<p>Hope this tip leads you to some notable performance gains! As always, shoot any feedback, corrections, or improvements my way!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Build Your Own Simple Lazy Loading Functionality in WordPress]]></title>
        <id>https://macarthur.me/posts/build-your-own-simple-lazy-loading-functionality-in-wordpress</id>
        <link href="https://macarthur.me/posts/build-your-own-simple-lazy-loading-functionality-in-wordpress"/>
        <updated>2018-02-22T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[When you’re looking to incorporate any given feature into your WordPress application, there’s rarely a shortage of third-party plugins out there to make it happen. But sometimes, whether you’re trying to avoid the inevitable complexity an unfamiliar third-party plugin introduces, or for some other reason, you might feel called to...]]></summary>
        <content type="html"><![CDATA[<p>When you’re looking to incorporate any given feature into your WordPress application, there’s rarely a shortage of third-party plugins out there to make it happen. But sometimes, whether you’re trying to avoid the inevitable complexity an unfamiliar third-party plugin introduces, or for some other reason, you might feel called to take a stab at developing that feature on your own. Lazy loading images could be one of these features, and fortunately, it’s fairly simple to set it up yourself and start reaping the performance benefits.</p>
<p>I’m assuming here that you have full development dominion over your WordPress application, and that you’re relatively familiar with the <a href="https://codex.wordpress.org/Plugin_API" rel="nofollow">WordPress Plugin API</a> – the characteristic hook system that makes WordPress development as flexible as it is. While we <em>could</em> set up lazy loading without a plugin by putting everything inside your theme’s <code>functions.php</code> file, we’ll be rolling our own extremely basic plugin. This is generally a good idea over just using your theme – it’ll separate concerns a little better, you’ll be able to switch themes without losing functionality, and it’ll be easy to toggle whenever like, which is particularly helpful when debugging.</p>
<p><em>Know this:</em> I won’t be going in-depth on the philosophy of what makes a well-crafted WordPress plugin. Experiment and argue about all that jazz on your own. I’m just gonna give you the bare bones of what it takes to make a lazy loading plugin with just a few lines of code. Let’s get started.</p>
<h2 id="set-up-your-plugin"><a aria-hidden="true" tabindex="-1" href="#set-up-your-plugin"><span class="icon icon-link"></span></a>Set Up Your Plugin</h2>
<p>In your plugins directory, create a <code>simple-lazy-loading</code> directory and a file inside it named <code>simple-lazy-loading.php</code>. Open that file, and place the following at the top:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token doc-comment comment">/** Plugin Name: Simple Lazy Loading*/</span></span>
</code></pre></div>
<p>At bare minimum, you now have a plugin that can be activated in the the WordPress admin. Head there and switch it on.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/606cd0c9-357c-4343-8877-2550e1c62e02/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=81526c5aaaba99ff25f40b26937c96f25c5d71836e41e82a075a25ff78c438fe&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>After you’ve done that, open up the file you just created and we’re ready to go!</p>
<h2 id="lets-get-lazy"><a aria-hidden="true" tabindex="-1" href="#lets-get-lazy"><span class="icon icon-link"></span></a>Let’s Get Lazy</h2>
<p>You can lazy load a lot of things, but here, we’re just focusing on lazy loading images stored in your WordPress database that are spit out as post or page content. Basically, images you upload and use via the WordPress admin.</p>
<p>To do this, let’s use <a href="https://github.com/ApoorvSaxena/lozad.js" rel="nofollow">Lozad</a> for our lazy loading JavaScript library. It has no jQuery dependency, appears to be pretty actively maintained, and it leverages the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" rel="nofollow">Intersection Observer API</a>, which will get you better performance, especially as browser support grows in the future. In the meantime, there’s a <a href="https://github.com/w3c/IntersectionObserver/tree/master/polyfill" rel="nofollow">polyfill</a> you can include.</p>
<h3 id="getting-lozad-up-on-its-feet"><a aria-hidden="true" tabindex="-1" href="#getting-lozad-up-on-its-feet"><span class="icon icon-link"></span></a>Getting Lozad Up on Its Feet</h3>
<p><strong>First, enqueue the Lozad library.</strong> We’ll also want to throw in the official W3C polyfill for the Intersection Observer API. We’ll enqueue both of these in the footer because we’re responsible web developers and don’t want these scripts to block page rendering.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;wp_enqueue_scripts&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;intersection-observer-polyfill&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;path-to-intersection-observer.js&#x27;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;lozad&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;https://cdn.jsdelivr.net/npm/lozad@1.3.0/dist/lozad.min.js&#x27;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;intersection-observer-polyfill&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>Next, initialize Lozad.</strong> Out of the box, a “lozad” class is used to watch for elements to be lazy loaded, but since we’re going to modify the configuration a bit anyway, let’s change that to a more generic “lazy-load” class. Also, note that I’m just using <code>wp_add_inline_script</code> here, since the amount of JS we’re writing is small. You’re welcome to put that in a separate JS file – just make sure it executes after <code>lozad</code> is loaded.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;wp_enqueue_scripts&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;intersection-observer-polyfill&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;path-to-intersection-observer.js&#x27;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wp_enqueue_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;lozad&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;https://cdn.jsdelivr.net/npm/lozad@1.3.0/dist/lozad.min.js&#x27;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;intersection-observer-polyfill&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wp_add_inline_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;lozad&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;</span>
<span class="token string single-quoted-string">        lozad(&quot;.lazy-load&quot;).observe();</span>
<span class="token string single-quoted-string">    &#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><em>Neat! But what if I don’t want to target elements by class?</em> No problem! Instead of defining a class to be watched, you can pass in a <code>NodeList</code>. In that case, our <code>wp_add_inline_script</code> section would look something more like this:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">wp_add_inline_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;lozad&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;</span>
<span class="token string single-quoted-string">	var myElements = document.querySelectorAll(&quot;#main img&quot;);</span>
<span class="token string single-quoted-string">	lozad(myElements).observe();</span>
<span class="token string single-quoted-string">&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>If we set things up this way, Lozad will watch for any images that are children to <code>#main</code>.</p>
<p><strong>Our next step is to add our target class to every image we want to lazy load, as well as change the</strong> <strong><code>src</code></strong> <strong>attribute to</strong> <strong><code>data-src</code>****.</strong> This will prevent the browser from loading the images by default (which would block the rest of the page from rendering), and only do so when <code>lozad</code> changes <code>data-src</code> back to <code>src</code>, which will happen when users scroll to those images.</p>
<p>For any images on custom pages outside of the WordPress database, it’s pretty easy to set up the attributes we need. Just manually do it. Unfortunately, working with the images that are stored in the database will require that we filter everything via <code>the_content</code> hook. I don’t <em>love</em> the idea of having to filter post content like this, but if you’re properly caching your site like you should be, this is less of an issue, at least in terms of performance.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;the_content&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//-- Change src to data attributes.</span>
	<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/&lt;img(.*?)(src=)(.*?)&gt;/i&quot;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;&lt;img$1data-$2$3&gt;&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    	<span class="token comment">//-- Change srcset to data attributes.</span>
  <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/&lt;img(.*?)(srcset=)(.*?)&gt;/i&quot;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;&lt;img$1data-$2$3&gt;&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//-- Add .lazy-load class to each image that already has a class.</span>
	<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;/&lt;img(.*?)class=\&quot;(.*?)\&quot;(.*?)&gt;/i&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;&lt;img$1class=&quot;$2 lazy-load&quot;$3&gt;&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//-- Add .lazy-load class to each image that doesn&#x27;t already have a class.</span>
	<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;/&lt;img((.(?!class=))*)\/?&gt;/i&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;&lt;img class=&quot;lazy-load&quot;$1&gt;&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>We’re doing three separate things with our filter here.</p>
<ul>
<li>Changing <code>src</code> and <code>srcset</code> attributes to <code>data-src</code> and <code>data-srcset</code> on each image.</li>
<li>Adding a <code>lazy-load</code> class to each image so Lozad can properly target the images we want to lazy load.</li>
<li>Adding a <code>lazy-load</code> class to each image that doesn’t already have a class attached to it.</li>
</ul>
<p><strong>Technically, you’re done.</strong> Now, each page on which you have content populated from the WordPress editor, images should <em>not</em> load by default, and instead load only when they come into view. But that might not be good enough.</p>
<h3 id="lets-make-it-all-prettier"><a aria-hidden="true" tabindex="-1" href="#lets-make-it-all-prettier"><span class="icon icon-link"></span></a>Let’s Make It All Prettier</h3>
<p>If images only load when they come into view, you’ll see an ugly pop on the page when that happens. To make everything happen in a prettier fashion, we have some options at our disposal.</p>
<p><strong>Let’s adjust the</strong> <strong><code>rootMargin</code></strong> <strong>so images start loading when they’re</strong> <em><strong>about</strong></em> <strong>to come into view.</strong> This way, they can be ready to go before the user even gets there, and everything will appear much more seamless. Go back to our <code>wp_add_inline_script</code> call:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">wp_add_inline_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;lozad&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;</span>
<span class="token string single-quoted-string">	lozad(&quot;.lazy-load&quot;, {</span>
<span class="token string single-quoted-string">		rootMargin: &quot;300px 0px&quot;</span>
<span class="token string single-quoted-string">	}).observe();</span>
<span class="token string single-quoted-string">&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Now, when images come within 300px of being visible, Lozad will trigger them to start loading. Feel free to adjust that value as you see fit.</p>
<p><strong>We can also add a class after our images load, so they fade in a super pretty, majestic way.</strong> Do that by adding a <code>loaded</code> callback:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">wp_add_inline_script</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">&#x27;lozad&#x27;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;</span>
<span class="token string single-quoted-string">	lozad(&quot;.lazy-load&quot;, {</span>
<span class="token string single-quoted-string">		rootMargin: &quot;300px 0px&quot;,</span>
<span class="token string single-quoted-string">		loaded: function (el) {</span>
<span class="token string single-quoted-string">			el.classList.add(&quot;is-loaded&quot;);</span>
<span class="token string single-quoted-string">		}</span>
<span class="token string single-quoted-string">	}).observe();</span>
<span class="token string single-quoted-string">&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>And add some CSS that’ll hide the images until they’re fully loaded, and then allow them to fade in. Note that if you do add the following CSS, you’ll need to enqueue it in a stylesheet or by some other means.</p>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector"><span class="token class">.lazy-load</span></span> <span class="token punctuation">{</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> opacity <span class="token number">.15</span><span class="token unit">s</span><span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.lazy-load</span><span class="token class">.is-loaded</span></span> <span class="token punctuation">{</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Neat! Now, every image will now have an <code>opacity</code> of <code>0</code>, until they’re loaded in, when <code>is-loaded</code> will fade them in.</p>
<h3 id="soon-this-may-all-be-meaningless"><a aria-hidden="true" tabindex="-1" href="#soon-this-may-all-be-meaningless"><span class="icon icon-link"></span></a>Soon, This May All Be Meaningless</h3>
<p>Lazy loading is a good, responsible thing to implement, but, all of this will likely be possible by default in browsers. In fact, <a href="https://web.dev/native-lazy-loading/" rel="nofollow">Chromium-based browsers and Firefox already do have a native API for it</a>. So, pay attention. In a short while, all of what I’ve just showed you might be pointless, and I will need to put a sad disclaimer at the top of this post that you might just be wasting your time by reading this.</p>
<p>Hope this helps!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bullets, Cannonballs, and Web Components]]></title>
        <id>https://macarthur.me/posts/bullets-cannonballs-web-components</id>
        <link href="https://macarthur.me/posts/bullets-cannonballs-web-components"/>
        <updated>2021-03-05T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[In his book Great by Choice, Jim Collins describes how launching new initiatives is best done by first firing bullets, then cannonballs. That is, performing small, inexpensive experiments helps companies “calibrate their line of sight,” increasing the chance of success when the more substantial cannonballs are finally launched. It’s hard...]]></summary>
        <content type="html"><![CDATA[<p>In his book <em>Great by Choice</em>, Jim Collins describes how launching new initiatives is best done by first firing <a href="https://www.jimcollins.com/concepts/fire-bullets-then-cannonballs.html" rel="nofollow">bullets, then cannonballs</a>. That is, performing small, inexpensive experiments helps companies “calibrate their line of sight,” increasing the chance of success when the more substantial cannonballs are finally launched.</p>
<p>It’s hard not to get excited by an approach that helps to reduce risk and make the most of your resources in such an illustrative way. And that excitement can be contagious, overflowing into areas peripheral to the business initiative you’re interested in launching. As a developer, one of those areas is (obviously) technology.</p>
<h2 id="staying-modern-is-hard"><a aria-hidden="true" tabindex="-1" href="#staying-modern-is-hard"><span class="icon icon-link"></span></a>Staying Modern is Hard</h2>
<p>It can be a hard sell getting organizations on board with adopting a modern tool on the web platform, due to a range of legitimate concerns, including these:</p>
<ul>
<li><strong>A subset of users is on a system that doesn’t support it</strong>, and the business doesn’t want to risk losing a paying customer.</li>
<li><strong>It would take time away from working on proven systems,</strong> and there’s hesitancy around shifting resources onto something not guaranteed to yield a return.</li>
<li><strong>The potential advantages are ambiguous or indirect,</strong> and the there’s resistance to investing time into anything without clear-cut, understood benefits to how the business works today.</li>
</ul>
<p>But when you’re just shooting bullets, the spirit of the game is different. Your work is inexpensive and confined to a small territory. The same risks don’t exist here — at least in the same capacity. And as a digital product team, this spirit can be leveraged to push the digital envelope with little risk to a business’s revenue streams, while <em>still</em> calibrating those larger ventures.</p>
<h2 id="some-real-world-context"><a aria-hidden="true" tabindex="-1" href="#some-real-world-context"><span class="icon icon-link"></span></a>Some Real-World Context</h2>
<p>I’m on a team that’s doing its best to adopt this “bullets, then cannonballs” mindset (it can be a difficult shift to make, btw!), and we’ve been using it at a small scale to build out a product for helping people looking to buy or sell a home get connected with trusted, local real estate agents. In doing so, we’re testing and iterating on a variety of digital experiences in a rapid fashion and with a small slice of users.</p>
<p>A key part of this work is collecting quick user feedback for each component of those experiences, so that we can determine if our bullets are actually hitting anything. And to do that, we decided to build a small UI component that would allow users to give feedback by clicking either a “thumbs up” or “thumbs down” icon.</p>
<p>After some discussion, the solution we landed on was a relatively new kid on the block: a <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" rel="nofollow">web component</a>. This modern standard of building UI components met all of our requirements, but it did carry with it a downside: there’s <a href="https://caniuse.com/custom-elementsv1" rel="nofollow">no support for Internet Explorer</a>. And while usage of IE is low — <a href="https://caniuse.com/usage-table" rel="nofollow">well under 2%</a> — it represents enough revenue that would’ve normally caused us to hit the brakes by default. After all, in your typical, day-to-day feature building, abandoning virtually any number of paying customers was a non-starter, even if the reason for doing so had the potential to unlock greater gains.</p>
<p>But this wasn’t day-to-day work, which meant we could take a fresh approach to vetting technology.</p>
<h2 id="guidelines-for-trying-vetting-tech-while-shooting-bullets"><a aria-hidden="true" tabindex="-1" href="#guidelines-for-trying-vetting-tech-while-shooting-bullets"><span class="icon icon-link"></span></a>Guidelines for Trying Vetting Tech While Shooting Bullets</h2>
<p>With the foundation for how we had been assessing technology shifting under our feet, it changed the tone of our feedback component discussion. And in doing so, some general criteria seemed to emerge for determining whether it made sense to experiment with this modern solution while still shooting bullets for our bigger initiative.</p>
<p>When reading through these, keep this in mind: these are the result of me reviewing our decision-making process in hindsight, and in the scope of our team’s particular project. They aren’t intended to be exhaustive, and certainly not set in stone. Here they are:</p>
<h3 id="1-it-should-gracefully-degrade"><a aria-hidden="true" tabindex="-1" href="#1-it-should-gracefully-degrade"><span class="icon icon-link"></span></a>1. It should gracefully degrade.</h3>
<p>Calibrating your line of site doesn’t require you to shoot at every ship in the sea. Similarly, toying with a modern technology doesn’t mean every user <em>needs</em> to experience it. But at the same time, you don’t want to worsen the experience for the portion of customers being excluded. If you’re gonna try a new tool, it should fall back with users having little to no awareness that they’re missing out on something.</p>
<p>For a web component, this is straightforward to control. For the most part, the bucket of users who can’t use web components are the same whose browsers don’t support ES modules. So, to prevent a component from being downloaded and parsed in older browsers, it’s as simple as loading the source with a <code>type=&quot;module&quot;</code> attribute attached.</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feedback-component</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>feedback-component</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path/to/feedback-component.js<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div>
<p>If a person is using IE, the component won’t render at all, and no errors will be thrown. For us, it just meant that this small slice of users wouldn’t contribute feedback data, and for what we were interested in testing, that was fine with us. A nice side benefit to this tactic is that we could freely use modern JavaScript’s syntax without parsing errors occurring. In fact, we could avoid any sort of transpilation altogether, simplifying &amp; lightening our workflow even further.</p>
<p>In other situations, graceful degradation may look entirely different. Or, it might not even be possible given the constraints. Whatever the case, it’s important to have this expectation in place so any decisions won’t bear a negative impact on the application’s core functionality, or your efforts at calibrating your larger initiative.</p>
<h3 id="2-it-shouldnt-take-long-to-learn"><a aria-hidden="true" tabindex="-1" href="#2-it-shouldnt-take-long-to-learn"><span class="icon icon-link"></span></a>2. It shouldn’t take long to learn.</h3>
<p>One of the big reasons there’s value in first shooting bullets is their low cost, and <em>time</em> is a costly resource. As such, any new technology you choose to try in this frame of mind shouldn’t require a lot of amount of time to become competent in using it at a level that allows you to effectively evaluate it.</p>
<p>Building a web component was a good choice because while the high-level API is new, it’s written in JavaScript, and has parallels to the lifecycle of a component from mainstream UI libraries (React, for example). Since our team had at least a good baseline understanding of that world, there wasn’t a huge risk of us slowing down any of our primary work, while still allowing us to evaluate its usefulness.</p>
<p>Another factor in this piece of the decision-making process was the solution’s future trajectory. Web components isn’t an obscure client-side JavaScript framework with a couple hundred stars on GitHub. It exists as an <a href="https://html.spec.whatwg.org/multipage/custom-elements.html" rel="nofollow">active web standard</a> that’ll stick around and continue to evolve for time to come. So, the time cost in learning it was also being weighed against whether we could count on it sticking around in the web platform anyway.</p>
<h3 id="3-it-should-solve-or-help-to-avoid-real-problems"><a aria-hidden="true" tabindex="-1" href="#3-it-should-solve-or-help-to-avoid-real-problems"><span class="icon icon-link"></span></a>3. It should solve (or help to avoid) real problems.</h3>
<p>It’s the gift of a passionate developer to manufacture problems that support choosing the flashy, new framework tending on Twitter. But for it to be a legitimate contender for a team who’s shooting bullets, these decisions need to be driven by the the need to solve problems or prevent otherwise real problems from occurring.</p>
<p>In our particular case, we had the following basic needs to consider when choosing a solution to build our feedback component:</p>
<ul>
<li><strong>It would need to be portable.</strong> We’d be using it in a variety of applications for related experiments.</li>
<li><strong>It would need to be stack-agnostic</strong>. For example, creating a view component in Ruby on Rails would’ve been a poor decision, since other consuming applications aren’t guaranteed to be built on RoR.</li>
<li><strong>It would need to be dependency-free.</strong> This one was mainly born out of a concern for performance. For example, creating it as a React component would be bad idea since it could potentially require other applications to take on a heavy React dependency just to collect simple user feedback.</li>
</ul>
<p>If we’re going by those needs (or problems we wanted to avoid), web components passed with flying colors, despite the tradeoffs associated with it being a relatively new item in the toolshed.</p>
<h3 id="4-the-footprint-of-what-its-used-to-build-should-be-minimal"><a aria-hidden="true" tabindex="-1" href="#4-the-footprint-of-what-its-used-to-build-should-be-minimal"><span class="icon icon-link"></span></a>4. The footprint of what it’s used to build should be minimal.</h3>
<p>An equally key reason it’s best to first shoot bullets is their size. If things don’t pan out as well as you hoped, a bullet is small and easy enough to swap out for another.</p>
<p>Our feedback component was a great candidate to try out the web component standard for a similar reason — it was small, and perhaps even more importantly, it only served as ancillary support for the primary product we were interested in testing. We knew that we’d be able to gather feedback from 98%+ of those who saw it, and even if we ran into unexpected issues, the scope of the component is so small that switching from it altogether wouldn’t have been a major lift.</p>
<p>The outcome of this process might’ve been far different if we were dealing with more complex functional requirements, or if what we used to build with it had been absolutely critical to the larger venture we were trying to calibrate as a business.</p>
<h2 id="risk-it-up-front"><a aria-hidden="true" tabindex="-1" href="#risk-it-up-front"><span class="icon icon-link"></span></a>Risk It Up Front</h2>
<p>As exciting as the notion of “shooting bullets, then cannonballs” can be, the only reason it’s even worth thinking about is the fact that you’re gonna fail — not always, but often enough to get familiar with the feeling. That’s why, as Marty Cagan also emphasizes in his book <a href="https://svpg.com/inspired-how-to-create-products-customers-love/" rel="nofollow"><em>INSPIRED</em></a><em>,</em> it’s so important to tackle risks <em>up front</em>, rather than after you’ve invested a significant amount of time and resources trying to make something stick.</p>
<p>This is important to keep in mind as you vet new technologies too. More than you’d like, you’re gonna delve into a new tool that turns out to be a total flop, resulting in you scrapping everything and switching to something else, or maybe rethinking the problem altogether. That’s not fun, but it’s a prerequisite to landing something whose trial paid off in more ways than expected.</p>
<p>So, in more areas than just your big business initiatives, think big, test small, and start to engage with tomorrow’s tools today.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Simpler Unit Testing Setup for WordPress]]></title>
        <id>https://macarthur.me/posts/simpler-unit-testing-for-wordpress</id>
        <link href="https://macarthur.me/posts/simpler-unit-testing-for-wordpress"/>
        <updated>2019-07-24T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[When I was getting started in web development, I remember how conceptually overwhelming it was to understand the whys, whats, and hows around things like unit testing. And to make it even more difficult, WordPress was the environment in which I spent most of my time — a platform not...]]></summary>
        <content type="html"><![CDATA[<p>When I was getting started in web development, I remember how conceptually overwhelming it was to understand the whys, whats, and hows around things like unit testing. And to make it even more difficult, WordPress was the environment in which I spent most of my time — a platform not well-known for its strong culture of unit testing.</p>
<p>As far as I can tell, the most-recommended resource for unit testing in WordPress is the <a href="https://make.wordpress.org/cli/handbook/plugin-unit-tests/" rel="nofollow">scaffolding provided by the WP-CLI.</a> Run a command, and it’ll do things like download a copy of WordPress, set up a test database, and provide some nice-to-have methods for integrating your tests with the WP infrastructure itself. The problem is that every time I’ve tried to get this set up — for both themes and plugins — I’ve run into unexpected database or file structure issues. I spend a good share of time working through them, and then <em>maybe</em> have enough mental motivation to write a test.</p>
<p><em><strong>There’s got to be an easier way to set this stuff up.</strong></em></p>
<p>I like what the WP-CLI approach has to offer. The helper methods provided by <code>WP_UnitTestCase</code> (the class you can extend rather than <code>PHPUnit\Framework\TestCase</code>) alone might make it worth working through the setup friction. But sometimes, you just wanna start writing some friggin’ tests to build some value for your theme or plugin. In those cases, there’s a better way: <strong>hook it up yourself.</strong> It’s not as scary as it sounds.</p>
<h2 id="lets-get-set-up"><a aria-hidden="true" tabindex="-1" href="#lets-get-set-up"><span class="icon icon-link"></span></a>Let’s Get Set Up</h2>
<p>For this run-through, I’ll be using my <a href="https://github.com/alexmacarthur/wp-skateboard" rel="nofollow">wp-skateboard</a> setup, which runs on Docker, but it really doesn’t matter whether you’re using this, Vagrant, or anything else. But if you are using Docker, make sure you run any of the following commands inside your running container. To help with that, <code>wp-skateboard</code> allows you to run <code>make bash</code> to easily enter the container with a bash prompt.</p>
<p>We’ll also be using Composer for package management and autoloading. And because most tutorials I’ve found focus on plugins, we’ll stick there too.</p>
<h3 id="install-phpunit-with-composer"><a aria-hidden="true" tabindex="-1" href="#install-phpunit-with-composer"><span class="icon icon-link"></span></a>Install PHPUnit with Composer.</h3>
<p>To start, <code>cd</code> into your plugin, and go through the prompts of the <code>composer init</code> command. If you already have a <code>composer.json</code> file in the directory, just move on.</p>
<p>After that, add bit of autoloading data that’ll come in handy later. Here, we tell Composer to automatically include certain files within the <code>tests/</code> directory (where our tests will live) when they’re namespaced to <code>PluginTests</code>. A little more on that in a bit.</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">&quot;autoload-dev&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;psr-4&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;PluginTests\\&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tests/&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Next up, we need to install PHPUnit.</p>
<p><code>composer require phpunit/phpunit --dev</code></p>
<p>After this completes, test your installation with by running the following command.</p>
<p><code>vendor/bin/phpunit</code></p>
<p>You should see a bunch of information looking something like this:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">PHPUnit <span class="token number">8.2</span>.3 by Sebastian Bergmann and contributors.

Usage: phpunit <span class="token punctuation">[</span>options<span class="token punctuation">]</span> UnitTest <span class="token punctuation">[</span>UnitTest.php<span class="token punctuation">]</span>
        phpunit <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>directory<span class="token operator">&gt;</span>

Code Coverage Options:

    --coverage-clover <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>    Generate code coverage report <span class="token keyword">in</span> Clover XML <span class="token function">format</span>
    --coverage-crap4j <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>    Generate code coverage report <span class="token keyword">in</span> Crap4J XML <span class="token function">format</span>
    <span class="token punctuation">..</span>.
</code></pre></div>
<h3 id="load-wordpress-via-our-phpunitxml-file"><a aria-hidden="true" tabindex="-1" href="#load-wordpress-via-our-phpunitxml-file"><span class="icon icon-link"></span></a>Load WordPress via our phpunit.xml file.</h3>
<p>Since this is a <em>WordPress</em> plugin, we’ll likely need access to some level of WP core functionality in order to effectively test our code. To make all of that available, we’re going to load WP core during our tests by bootstrapping it in our <code>phpunit.xml</code> file. Throw some basic configuration into that file, and take special note of the <code>bootstrap</code> attribute:</p>
<div class="remark-highlight"><pre class="language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phpunit</span> <span class="token attr-name">bootstrap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bootstrap.php<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuites</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>testsuite</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>WP Unit Testing<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Test.php<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>./tests/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuite</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>testsuites</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phpunit</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Here, we’re loading a <code>bootstrap.php</code> file, which will be created in our plugin directory, loading two things:</p>
<ul>
<li><code>autoload.php</code> - This is generated by running <code>composer install</code>, and will take care of the PHP autoloading configuration we added earlier.</li>
<li><code>wp-load.php</code> - This is a file from WordPress core that’ll load the CMS functionality we’ll need to run our plugin’s code as we test it.</li>
</ul>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">// bootstrap.php</span>

<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;/../vendor/autoload.php&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;/../../../../wp-load.php&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
</code></pre></div>
<p>With this in place, these two files will be loaded every time our test suite runs, providing us with the resources we need to test.</p>
<p>Also, take note of this line back in our <code>phpunit.xml</code> file:</p>
<div class="remark-highlight"><pre class="language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Test.php<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>./tests/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>What this is doing is specifying the type of named files we’re doing to run as tests within the <code>./tests</code> directory. Since that suffix is set to “Test.php,” any file that ends with that string will be run.</p>
<p>At this point, try running <code>vendor/bin/phpunit</code> again. This time, you should see something that looks more like this:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">PHPUnit <span class="token number">7.3</span>.5 by Sebastian Bergmann and contributors.



Time: <span class="token number">1.03</span> seconds, Memory: <span class="token number">22</span>.00MB

No tests executed<span class="token operator">!</span>
</code></pre></div>
<h2 id="testing-time"><a aria-hidden="true" tabindex="-1" href="#testing-time"><span class="icon icon-link"></span></a>Testing Time</h2>
<p>Create a <code>tests</code> directory in your plugin, and inside that, a <code>SomeClassTest.php</code> file. Remember, that file name is important. Now, let’s just verify that we can get a test to run without issue. Throw some meaningless test in there. A method is deemed a test when its name starts with <code>test</code>.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">SomeClassTest</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_shouldWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></span>
</code></pre></div>
<p>Running <code>vendor/bin/phpunit</code> should produce something like the following:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">PHPUnit <span class="token number">8.2</span>.3 by Sebastian Bergmann and contributors.

<span class="token builtin class-name">.</span>                                                                   <span class="token number">1</span> / <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>

Time: <span class="token number">2.59</span> seconds, Memory: <span class="token number">54.25</span> MB
</code></pre></div>
<p>Noice.</p>
<h3 id="lets-make-things-more-wordpress-y"><a aria-hidden="true" tabindex="-1" href="#lets-make-things-more-wordpress-y"><span class="icon icon-link"></span></a>Let’s make things more WordPress-y.</h3>
<p>From here on out, we can start leveraging the WordPress ecosystem as needed. For a stupid example, let’s say we have a method that’ll retrieve the content of a post in an emotionalized based on the tags attached to the post. Specifically, we’ll format the content differently if the post is tagged <code>angry</code>, <code>excited</code>, or <code>obnoxious</code>.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">/*</span>
<span class="token comment">Plugin Name: Unit Testing Plugin</span>
<span class="token comment">*/</span>

<span class="token keyword">function</span> <span class="token function-definition function">getEmotionalizedContent</span><span class="token punctuation">(</span><span class="token variable">$postId</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">get_the_content</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$postId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">has_tag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;angry&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$postId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">has_tag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;excited&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$postId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$loudContent</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$character</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$character</span> <span class="token operator">===</span> <span class="token string double-quoted-string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;!&quot;</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token variable">$character</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">str_split</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token variable">$loudContent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">has_tag</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;obnoxious&#x27;</span><span class="token punctuation">,</span> <span class="token variable">$postId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot; 👏 &quot;</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></span>
</code></pre></div>
<p>Because our PHPUnit configuration is set to import WordPress core, our tests will have access to this plugin (make sure it’s active in the WP admin!), as well as everything else loaded by WordPress’ <code>wp-load.php</code> file. So, we should be ready to dive in &amp; test.</p>
<p>First off, let’s add some code to <code>SomePostClass</code> that’ll provide us with a post to manipulate and clean up after we’re finished.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">SomePostClass</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$testPostId</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span> <span class="token operator">=</span> <span class="token function">wp_insert_post</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#x27;post_title&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;Sample Post&#x27;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#x27;post_content&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;This is just some sample post content.&#x27;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token function">wp_delete_post</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//... tests will go here.</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Leveraging <code>setUp()</code> and <code>tearDown()</code>, we’re creating a fresh WP post and deleting it after any given test method is complete. Since we’re passing <code>true</code> to <code>wp_delete_post</code>, it’ll also <a href="https://codex.wordpress.org/Function_Reference/wp_delete_post" rel="nofollow">clean up any attached post meta we create along the way.</a></p>
<p>After that, we can add our method-specific tests to cover all of our cases.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_getEmotionalizedContent_shouldBeAngryWhenTagIsApplied</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">wp_set_post_tags</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;angry&#x27;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>
        <span class="token function">getEmotionalizedContent</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string double-quoted-string">&quot;THIS IS JUST SOME SAMPLE POST CONTENT.&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_getEmotionalizedContent_shouldBeExcitedWhenTagIsApplied</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">wp_set_post_tags</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;excited&#x27;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token function">assertStringEndsWith</span><span class="token punctuation">(</span>
        <span class="token string double-quoted-string">&quot;!&quot;</span><span class="token punctuation">,</span>
        <span class="token function">getEmotionalizedContent</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_getEmotionalizedContent_shouldBeObnoxiousWhenTagIsApplied</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">wp_set_post_tags</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;obnoxious&#x27;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>
        <span class="token function">getEmotionalizedContent</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string double-quoted-string">&quot;This 👏 is 👏 just 👏 some 👏 sample 👏 post 👏 content.&quot;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_getEmotionalizedContent_shouldBeEverythingWhenTagAreApplied</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">wp_set_post_tags</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;obnoxious&#x27;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wp_set_post_tags</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;excited&#x27;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">wp_set_post_tags</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#x27;angry&#x27;</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">getEmotionalizedContent</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token function">assertStringStartsWith</span><span class="token punctuation">(</span>
        <span class="token string double-quoted-string">&quot;THIS 👏 IS 👏 JUST 👏 SOME 👏 SAMPLE 👏 POST 👏 CONTENT&quot;</span><span class="token punctuation">,</span>
        <span class="token variable">$result</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token function">assertStringEndsWith</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;!&quot;</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Running <code>vendor/bin/phpunit</code> again, you should see some success:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">root@bc37c28f5d63:/var/www/html/wp-content/plugins/unit-testing-plugin<span class="token comment"># vendor/bin/phpunitPHPUnit 8.2.3 by Sebastian Bergmann and contributors.</span>

<span class="token punctuation">..</span><span class="token punctuation">..</span>                                                                <span class="token number">4</span> / <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>

Time: <span class="token number">3.44</span> seconds, Memory: <span class="token number">32.00</span> MB

OK <span class="token punctuation">(</span><span class="token number">4</span> tests, <span class="token number">5</span> assertions<span class="token punctuation">)</span>
</code></pre></div>
<p>Gr8 work. But as your tests grow, it’s likely that you’ll need to interact with posts throughout several different classes. So, let’s abstract a bit of this WordPress-specific stuff out into its own class that extends <code>\PHPUnit\Framework\TestCase</code>.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">PluginTests</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostTestCase</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>TestCase</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$testPostId</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span> <span class="token operator">=</span> <span class="token function">wp_insert_post</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#x27;post_title&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;Sample Post&#x27;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#x27;post_content&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;This is just some sample post content.&#x27;</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token function">wp_delete_post</span><span class="token punctuation">(</span><span class="token this keyword">$this</span><span class="token operator">-&gt;</span><span class="token property">testPostId</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></span>
</code></pre></div>
<p>Then, in our test class, we can extend this new helper class:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">class SomePostTest extends \PHPUnit\Framework\TestCase</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">class SomePostTest extends \PluginTests\PostTestCase</span></span>
</code></pre></div>
<p>Thanks to that bit of autoloading configuration we did earlier, we don’t need to include our new helper class — it happens automatically, out of sight. And as a result, from here on out, we can easily access <code>$this-&gt;testPostId</code> and any other resource we choose to make available in <code>PostTestCase</code>, rather than handling all of the setup and cleanup within our individual test classes.</p>
<p>As the need arises, you can create your own different test cases from which to extend, perhaps based on the type of resource you need. For example, a <code>\PluginTests\UserTestCase</code> might be good to have in order to easily test code pertaining to WordPress user objects.</p>
<h2 id="yeah-trade-offs-exist"><a aria-hidden="true" tabindex="-1" href="#yeah-trade-offs-exist"><span class="icon icon-link"></span></a>Yeah, Trade-Offs Exist</h2>
<p>The value this entire approach gives is (hopefully) a quicker path to start writing tests in WordPress. That said, there are some trade-offs that come along it. For example:</p>
<ul>
<li><strong>If you’re not careful in how you clean up the data you create when running tests, your local DB could get pretty muddy.</strong> In many cases, it might be better to manually create a test DB and point your application to that while testing. I’m sure there’s some clever programmatic way to do this with the setup I’ve explained, but I haven’t explored those waters much.</li>
<li><strong>You miss out on the features included with the WordPress-recommended test suite setup.</strong> Yeah, a lot of this would be nice to be able to leverage, but I’ve found that I don’t need much in order to set up valuable tests for my code using this simplified approach here. That could change at any given moment, but until that happens, I’m good with this being sacrificed.</li>
</ul>
<h2 id="feedback-whatcha-got"><a aria-hidden="true" tabindex="-1" href="#feedback-whatcha-got"><span class="icon icon-link"></span></a>Feedback: Whatcha Got?</h2>
<p>If you’ve got some tips to improve this whole setup without losing its relative simplicity, share them! At any rate, hope this is helpful.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019-02-06-local-mysql-with-docker]]></title>
        <id>https://macarthur.me/posts/local-mysql-with-docker</id>
        <link href="https://macarthur.me/posts/local-mysql-with-docker"/>
        <updated>2019-02-06T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve often needed to quickly spin up a local instance of MySQL. Docker Compose this makes it stupid easy. Rather than running a long, convoluted docker command, I can configure an image just the way I want it while maintaining the ability to turn it easily turn it on and...]]></summary>
        <content type="html"><![CDATA[<p>I’ve often needed to quickly spin up a local instance of MySQL. <a href="https://docs.docker.com/compose/" rel="nofollow">Docker Compose</a> this makes it stupid easy. Rather than running a long, convoluted <code>docker</code> command, I can configure an image just the way I want it while maintaining the ability to turn it easily turn it on and off as needed.</p>
<h2 id="getting-set-up"><a aria-hidden="true" tabindex="-1" href="#getting-set-up"><span class="icon icon-link"></span></a>Getting Set Up</h2>
<p>Inside a new directory, create a <code>data</code> directory and <code>docker-compose.yml</code> file.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">new-directory
├── data
└── docker-compose.yml</code></pre></div>
<p>Paste the following into your <code>docker-compose.yml</code> file:</p>
<div class="remark-highlight"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#x27;3&#x27;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>local<span class="token punctuation">-</span>mysql
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.21
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;./data:/var/lib/mysql&quot;</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> root

</code></pre></div>
<h2 id="managing-a-container"><a aria-hidden="true" tabindex="-1" href="#managing-a-container"><span class="icon icon-link"></span></a>Managing a Container</h2>
<p>To start the container, run <code>docker-compose up</code>. To stop &amp; remove the container, run <code>docker-compose down</code>. For more information on the plethora of commands avaible to leverage your container, <a href="https://docs.docker.com/compose/reference/" rel="nofollow">see here</a>.</p>
<h2 id="persisting-data"><a aria-hidden="true" tabindex="-1" href="#persisting-data"><span class="icon icon-link"></span></a>Persisting Data</h2>
<p>Whenever MySQL modifies any data within the container, it will persist locally inside your <code>./data</code> directory, even after you stop and restart everything. This is configured by the <code>volumes:</code> property in your <code>docker-compose.yml</code> file.</p>
<h2 id="running-commands-inside-container"><a aria-hidden="true" tabindex="-1" href="#running-commands-inside-container"><span class="icon icon-link"></span></a>Running Commands Inside Container</h2>
<p>To run any Bash commands inside the running container, use <code>docker-compose exec db bash</code>.</p>
<h2 id="connecting-w-sequelpro-or-similar-tool"><a aria-hidden="true" tabindex="-1" href="#connecting-w-sequelpro-or-similar-tool"><span class="icon icon-link"></span></a>Connecting w/ SequelPro or Similar Tool</h2>
<p>Use the following values to connect to the running container.</p>
<p><strong>Host:</strong> 127.0.0.1</p>
<p><strong>Username:</strong> root</p>
<p><strong>Password:</strong> root</p>
<p><strong>Port:</strong> 3306</p>
<h2 id="looking-to-set-up-other-dbs-w-docker-compose"><a aria-hidden="true" tabindex="-1" href="#looking-to-set-up-other-dbs-w-docker-compose"><span class="icon icon-link"></span></a>Looking to Set Up Other DBs w/ Docker Compose?</h2>
<p>I’ve put this Compose setup and a few others <a href="https://github.com/alexmacarthur/local-docker-db" rel="nofollow">into a repository</a> for easy access. At the time I’m writing this, it includes MySQL, Postgres, and Mongo. Feel free to use it as needed, as well as contrbute any other configurations you’ve found useful.</p>
<h2 id="the-end"><a aria-hidden="true" tabindex="-1" href="#the-end"><span class="icon icon-link"></span></a>The End.</h2>
<p>Boom. With a single command, you have a running, persistent, self-contained MySQL instance ready for your development needs. Have a helpful tip related to anything here? Share it!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why I've Had No Regrets Moving from Google Analytics to Plausible]]></title>
        <id>https://macarthur.me/posts/moving-from-google-analytics-to-plausible</id>
        <link href="https://macarthur.me/posts/moving-from-google-analytics-to-plausible"/>
        <updated>2022-04-16T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while ago, I was hanging out with some guys at my buddy Buddy’s (this is actually his first name) house. We were chatting about typical nerd stuff, when Samuel brought up a self-hostable, privacy-minded analytics service he’s been using: Plausible. I had never heard of it, but he gave...]]></summary>
        <content type="html"><![CDATA[<p>A while ago, I was hanging out with some guys at my buddy Buddy’s (this is actually his first name) house. We were chatting about typical nerd stuff, when Samuel brought up a self-hostable, privacy-minded analytics service he’s been using: <a href="https://plausible.io/" rel="nofollow">Plausible</a>. I had never heard of it, but he gave a solid pitch, so I said I’d look into it.</p>
<p>I didn’t say that just to be polite — I had been on the hunt for an alternative to Google Analytics for some time. I’ve used it for years, but as time has gone on, there’s been increasing pressure to “de-Google” in this way for a few reasons:</p>
<ul>
<li>I’ve always felt overwhelmed by the UI and feature set. Way too much for my needs.</li>
<li>The recommended installation approach has caused it to consistently show up in Lighthouse performance reports as problematic.</li>
<li>It’s a “free” product that owns all of the data I send through it, and you know what that means.</li>
</ul>
<p>I decided to try out the self-hosted version of Plausible, which I put up via Docker Compose on a $5 DigitalOcean droplet. The whole process took ~20 minutes. I don’t think I was ready for how easy and satisfying it was getting it stood up and seeing it in action.</p>
<p>Looking back, here are the key things I’ve loved about the experience:</p>
<h3 id="1-it-has-thorough-documentation"><a aria-hidden="true" tabindex="-1" href="#1-it-has-thorough-documentation"><span class="icon icon-link"></span></a>1. It has thorough documentation.</h3>
<p>For being as “small” as it is in the analytics space, I was very pleased by how thorough and SEO-friendly Plausible’s documentation is. For the most part, when I needed something, I did a quick Google search with a few keywords, and the first result was <em>exactly</em> what I needed, right in their documentation.</p>
<p>They appear to do a great job at anticipating the questions and concerns of their users, and solid documentation is the result of that. But some of the credit for this might also be due to the fact that the all of <a href="https://github.com/plausible/docs" rel="nofollow">the documentation is available on GitHub</a>, open to pull requests, and updated regularly.</p>
<p>This all was a refreshing change from using Google Analytics. When searching for somethig for that tool, I’d often find several different sources that roughly relate to what I’m searching for, often scattered throughout Google’s own resources. I’m sure there are reasons for that (wider feature scope, multiple implementation approaches, maturity &amp; complexity of the product, etc.), but it became a pretty significant point of friction for me, especially when all I wanted to do was get something up &amp; tracking.</p>
<h3 id="2-its-custom-event-handling-is-intuitive"><a aria-hidden="true" tabindex="-1" href="#2-its-custom-event-handling-is-intuitive"><span class="icon icon-link"></span></a>2. Its custom event handling is intuitive.</h3>
<p>For my purposes, I don’t need any sort of complex event or user action analytics. I have (and probably will for quite some time) pretty simple things I’d like to keep track of:</p>
<ul>
<li>License purchases for <a href="https://typeitjs.com/" rel="nofollow">TypeIt</a></li>
<li>Signups for <a href="https://jamcomments.com/" rel="nofollow">JamComments</a></li>
<li><a href="http://typeitjs.com/docs" rel="nofollow">TypeIt documentation</a> search queries</li>
<li>Usage of TypeIt’s <a href="https://www.typeitjs.com/build-your-own/" rel="nofollow">interactive demo</a></li>
<li>Something else I’m probably forgetting</li>
</ul>
<p>And some of those events have custom data I’d like to attach to each event (ex: the license type someone purchased, or a search query).</p>
<p>In GA, it <em>seems</em> relatively straightforward to send an event, which varies based on the implementation you’re using (<a href="https://developers.google.com/analytics/devguides/collection/gtagjs/events" rel="nofollow">Global Site Tag</a> vs. <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" rel="nofollow">“standard”</a>) — I just need to specify an event action, category, label, and value. But in reality, it was a little more complicated to implement. Among my issues:</p>
<ul>
<li>With so much documentation for each implementation, it’s easy to get peeved and feel somewhat lost.</li>
<li>If I wanted to send custom data that’s not numeric, I couldn’t use the <code>value</code> field. Instead, I’d need to set up <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/custom-dims-mets" rel="nofollow">custom dimensions</a>, which, paired with “metrics,” is an entirely different concept to wrap my head around.</li>
<li>Finding custom event data within the GA admin is a pain. In fact, I never did figure out how to find data I had started to send w/ custom dimensions &amp; metrics. I quickly grew impatient and confused, largely because it was so difficult to verify that I had even configured everything correctly.</li>
</ul>
<p>Primed with this less-than-pleasant experience, Plausible’s custom event API was a godsend. After installing the core Plausible script, it was as simple as setting up the global <code>window.plausible</code> variable:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">plausible</span> <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">plausible</span> <span class="token operator">||</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">plausible</span><span class="token punctuation">.</span><span class="token property-access">q</span> <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">plausible</span><span class="token punctuation">.</span><span class="token property-access">q</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre></div>
<p>… and then sending an event:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">plausible</span><span class="token punctuation">(</span><span class="token string">&#x27;Sign Up&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Or, with custom data that pertains certain events.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">plausible</span><span class="token punctuation">(</span><span class="token string">&#x27;Purchase&#x27;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Optional custom data.</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">product_slug</span><span class="token operator">:</span> <span class="token string">&#x27;my-product-slug&#x27;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">44</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// Optional callback method fired after event is sent.</span>
  <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;it sent!&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>After setting up a goal in the Plausible admin, all that data appears in highly-digestible way. Here’s an example of how my “Purchase” event looked at one point:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f4c9a8da-7a77-4f98-a127-6027293108d7/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=ce36b2295c54fc21374a4f54e754392213473fbacf019d2241afd138587f97d3&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Good enough for me. And if I need to created some more complex reports with that data, it’s a matter of <a href="https://plausible.io/docs/self-hosting-configuration#database" rel="nofollow">accessing the database</a> and running with it.</p>
<h3 id="3-its-more-performant"><a aria-hidden="true" tabindex="-1" href="#3-its-more-performant"><span class="icon icon-link"></span></a>3. It’s more performant.</h3>
<p>When I moved from Google Analytics to Plausible on <a href="https://typeitjs.com/" rel="nofollow">TypeIt’s site</a>, <a href="https://twitter.com/amacarthur/status/1464833420593438725" rel="nofollow">I tweeted</a> about my Lighthouse score improving by eight points. It’s a Gatsby site with a lot of JavaScript in play, and Lighthouse doesn’t report on the actual user experience, but even so, it was a little jarring.</p>
<p>Some of the reason for this boost was pretty apparent. According Plausible, <a href="https://plausible.io/vs-google-analytics#increasing-the-page-weight-and-the-loading-time" rel="nofollow">its script is many times smaller than Google’s</a>, and that means less time downloading &amp; parsing code. But according to Lighthouse and WebPageTest reports, other factors were due credit as well.</p>
<p>One of those other factors was the amount of work Google Analytics performs on the main thread, choking out any other processes that may actually support the user’s experience. Here’s a shot of the problem scripts on <a href="http://typeitjs.com/" rel="nofollow">typeitjs.com</a>. GA comes in at the third most thread-obnoxious script (divert your eyes from the top two… remember, this is a Gatsby site).</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8f230f7b-4365-4196-b616-c1ad1f84efad/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=d8de3596191bab722706ad8557aa31a28ea742cd0c7b879384b6c25370898160&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>The other notable factor was the caching policy used by Google to serve its scripts. WebPageTest wasn’t happy about it:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/bbab8a1a-e152-45cc-a19b-79b68790696d/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=3f2d0cb92209e3de37fad21feabf02766079f85fbe19d5392e8d37aa6e8ecd88&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>These concerns don’t magically go away by moving from GA to another provider, but the lightweight and self-hosted nature of Plausible sure makes it easier to mitigate them. Addressing the first concern is automatic, and the second is solved by setting the appropriate caching headers when the script is served from my DigitalOcean droplet.</p>
<h3 id="4-spa-page-tracking-is-easier"><a aria-hidden="true" tabindex="-1" href="#4-spa-page-tracking-is-easier"><span class="icon icon-link"></span></a>4. SPA page tracking is easier.</h3>
<p>This is a small perk I didn’t at all expect to see by moving to Plausible, but it’s an appreciated one. By default, Google Analytics collects its data only by executing after a page is loaded. As such, observing a user’s flow through several different pieces is achieved by stitching together the data from subsequent full page loads.</p>
<p>It’s a fine way to go about it, but also makes it a bit of a hassle to track views in single page applications. In SPAs, there’s often a <em>single</em> page load, after which navigation is handled entirely client-side. They do a good job equipping people to accurately track page views in SPAs by providing <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/single-page-applications" rel="nofollow">good documentation</a> on it. The short of it is that you need to manually send a <code>pageview</code> event whenever client-side navigation occurs.</p>
<p>For my own NextJS site using the recommended <a href="https://support.google.com/analytics/answer/9355662?hl=en" rel="nofollow">Global Site Tag</a> approach, I had to pull that off by listening for a <code>routeChangeComplete</code> event, which looked something like this (stripped down and a little contrived for simplicity):</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pageView</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">gtag</span><span class="token punctuation">(</span><span class="token string">&quot;config&quot;</span><span class="token punctuation">,</span> <span class="token constant">GA_TRACKING_ID</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">page_path</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">App</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Track each client-side page navigation.</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleRouteChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token function">pageView</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

    router<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">&quot;routeChangeComplete&quot;</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      router<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">.</span><span class="token method function property-access">off</span><span class="token punctuation">(</span><span class="token string">&quot;routeChangeComplete&quot;</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>router<span class="token punctuation">.</span><span class="token property-access">events</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Track the initial page load.</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">pageView</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">location</span><span class="token punctuation">.</span><span class="token property-access">pathname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token operator">&lt;</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>It’s nothing terribly complicated, but it’s also something I’d rather not have to worry about myself.</p>
<p>Thankfully, Plausible takes care of this automatically by piggy-backing on client-side routers’ usage of the History API. In order to simulate page views performed in the context of an SPA, libraries like <a href="https://reactrouter.com/" rel="nofollow">react-router</a> will use <code>history.pushState()</code> to place these views into a user’s browser history. Plausible leverages that integration, meaning <a href="https://plausible.io/docs/spa-support" rel="nofollow">I don’t have to do </a><a href="https://plausible.io/docs/spa-support" rel="nofollow"><em>anything</em></a> to correctly track SPA page views after installing the script (<a href="https://plausible.io/docs/script-extensions#plausiblemanualjs" rel="nofollow">unless I want to</a>). It just works!</p>
<h3 id="5-my-data-belongs-to-me"><a aria-hidden="true" tabindex="-1" href="#5-my-data-belongs-to-me"><span class="icon icon-link"></span></a>5. My data belongs to me.</h3>
<p>Google Analytics is mature and feature-rich service, but there’s a reason it’s free — all that data it collects <a href="https://policies.google.com/technologies/partner-sites?hl=en-US" rel="nofollow">is used in a wide variety of ways</a> to benefit the business. I don’t have any particular issue with that model in and of itself, but the scope of its implications also doesn’t sit great with me.</p>
<p>Among Plausible’s selling points, however, are its intentional focuses on privacy and data ownership. <a href="https://plausible.io/privacy-focused-web-analytics" rel="nofollow">Its website</a> lists a wealth of ways they lean into that — things like no cookies, no cross-site tracking, no sharing data with any third party, and being able to self-host the entire thing.</p>
<p>And that also means it’s easy to get my data <em>out</em> of Plausible too, like with its <a href="https://plausible.io/docs/stats-api" rel="nofollow">Stats API</a>, which I use to display analytics data on my <a href="https://macarthur.me/dashboard" rel="nofollow">personal dashboard</a>. One nice thing about self-hosting the tool is that there are virtually no limits to how much of my own data I can request on demand from my droplet. There’s an hourly limit, but even that can be manually increased by accessing the container, logging into the database, and updating a value:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token operator">--</span> <span class="token maybe-class-name">Log</span> into the database<span class="token punctuation">.</span>
<span class="token property-access">psql</span> <span class="token operator">-</span><span class="token constant">U</span> postgres <span class="token operator">-</span>d plausible_db

<span class="token operator">--</span> <span class="token maybe-class-name">Update</span> every limit to <span class="token number">10000.</span>
<span class="token constant">UPDATE</span> api_keys <span class="token constant">SET</span> hourly_request_limit <span class="token operator">=</span> <span class="token number">10000</span>
</code></pre></div>
<p>That leaves me feeling like my data really is easily accessible, safe, and <em>mine</em>.</p>
<h2 id="6-the-datas-more-reliable"><a aria-hidden="true" tabindex="-1" href="#6-the-datas-more-reliable"><span class="icon icon-link"></span></a>6. The data’s more reliable.</h2>
<p>Ad blockers and privacy-focused browsers (like Brave) are a growing problem for the client-side analytics space. When using either, it’s increasingly common for Google Analytics requests to be blocked by default, impacting the accuracy of your data.</p>
<p>One approach to address this is proxying analytics requests through your domain, which convinces privacy tools to consider the requests to be trustworthy.</p>
<p>Wiring this up with Google Analytics is possible, but is neither simple nor maintainable in the long term. It requires serving the analytics script locally (by either proxying it from Google or maintaining a modified copy yourself), and then passing every event request through your domain as well. Modern tooling like serverless functions make it less of a hassle, but even so, it’s tedious and potentially unreliable if/when Google ever pushes updates to the script.</p>
<p>It’d be remiss of me not to mention the strides Google Analytics is taking to help tackle some of these issues, such as the introduction of <a href="https://developers.google.com/tag-platform/tag-manager/server-side" rel="nofollow">server-side tagging</a>. But the amount of time and technical overhead required to take advantage of it is still more than I’m willing to take on for my side projects.</p>
<p>Plausible, on the other hand, has <a href="https://plausible.io/docs/proxy/introduction" rel="nofollow">dedicated documentation</a> on how to proxy its script through your own domain, covering a host of platforms, including two I use a lot — Netlify and Vercel. For the <a href="https://github.com/alexmacarthur/macarthur-me-next" rel="nofollow">current iteration of my blog</a> — on Next.js — that’s as simple as setting up a couple of rewrites:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// next.config.js </span>

module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">rewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&quot;/js/numbers.js&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">&quot;https://analytics.macarthur.me/js/plausible.js&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">source</span><span class="token operator">:</span> <span class="token string">&quot;/api/event&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">destination</span><span class="token operator">:</span> <span class="token string">&quot;https://analytics.macarthur.me/api/event&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>And then installing the script using my proxied destination:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- The `&lt;head&gt;` of each page --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">data-domain</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>macarthur.me<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/numbers.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>With those pieces in place, I’m able to successfully reach my analytics server without issue — even using privacy-focused browsers like Brave.</p>
<h2 id="boring-is-better"><a aria-hidden="true" tabindex="-1" href="#boring-is-better"><span class="icon icon-link"></span></a>Boring is Better</h2>
<p>Plausible is a great example of how attractive and valuable products <em>without</em> a lot of features can be. I’m giving up a large set of tricks and functionality by dumping Google Analytics. But between the simplicity, performance, privacy gains, and everything else in between, the tradeoff has been more than worth it for me. And it’s helped get me one step closer to weaning myself off big tech as much as I reasonably can.</p>
<p>We’ll see how things play out in the long term, but for the time being, I have no regrets.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[When a JavaScript WeakMap() Actually Came in Handy]]></title>
        <id>https://macarthur.me/posts/when-a-weakmap-came-in-handy</id>
        <link href="https://macarthur.me/posts/when-a-weakmap-came-in-handy"/>
        <updated>2021-10-03T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Back when I was working on slide-element, I noticed an issue that would occur when I rapidly toggled an element open & closed. If the previous animation wasn’t allowed to finish, the new one would eventually get outta whack, clipping the content on subsequent animations. The Cause of the Weirdness...]]></summary>
        <content type="html"><![CDATA[<p>Back when I was working on <a href="https://github.com/alexmacarthur/slide-element" rel="nofollow">slide-element</a>, I noticed an issue that would occur when I rapidly toggled an element open &amp; closed. If the previous animation wasn’t allowed to finish, the new one would eventually get outta whack, clipping the content on subsequent animations.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/4846d61a-612e-48b9-a978-2b69ee046803/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=48ab20c8383f39493ce17321dd3efc7b5c043723f573bf138ca17363eee0720d&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<h2 id="the-cause-of-the-weirdness"><a aria-hidden="true" tabindex="-1" href="#the-cause-of-the-weirdness"><span class="icon icon-link"></span></a>The Cause of the Weirdness</h2>
<p>This was happening because each time an animation was triggered, I was grabbing the current “raw” height of the opened element, regardless of whether it was in the middle of an active animation. The library uses the Web Animations API, so the frame construction looked like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// For each trigger, animate between zero and the `clientHeight` of the element.</span>
<span class="token keyword">let</span> frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;0px&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token punctuation">.</span><span class="token property-access">clientHeight</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> height<span class="token punctuation">,</span> <span class="token literal-property property">overflow</span><span class="token operator">:</span> <span class="token string">&quot;hidden&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>To fix it, I needed to calculate and cache the expanded height once when <code>slide-element</code> is first used, and then refer back to that cached value every time an animation is triggered. That way, for each page load, there’d be one, fixed expanded height value to animate to and from, and no more weirdness caused by rapid clicking.</p>
<h2 id="weighing-my-options"><a aria-hidden="true" tabindex="-1" href="#weighing-my-options"><span class="icon icon-link"></span></a>Weighing My Options</h2>
<p>A couple of potential solutions quickly came to mind.</p>
<p><strong>First, storing that value in a</strong> <strong><code>data</code></strong> <strong>attribute on the target element.</strong> This would’ve done the job, but I have this admittedly weird thing with limiting the amount of data I persist this way. When I inspect the page, I don’t want to see a cluster of different attributes cluttering up the markup, particularly if other libraries require their own attributes to exist as well. I’ve worked with various other tools that, when used in parallel, led to some pretty convoluted markup, and I’ve been scarred a bit by those experiences. That history and the fact that I was curious if there’d be a more “interesting” way to pull this off, I opted out of this option.</p>
<p><strong>Second, I thought of sticking a “cache” on the</strong> <strong><code>window</code></strong> <strong>object</strong> (deal with it). But there could be <em>several</em> sliding elements on a page at once. So, a single <code>window.seCache</code> (or something like it) variable wouldn’t cut it. That value would need to be some sort of key:value pair (like a simple object) in which I could store a reference to each element and the respective expanded height value.</p>
<p>I was open to this general idea, but it had a <code>key</code> (lol) limitation: plain old objects don’t permit you to use HTML nodes as properties, so I’d need to require that a unique identifier exist on each element in order to store their expanded heights reliably. That’s a change I wasn’t eager to make.</p>
<h3 id="using-dom-nodes-as-keys"><a aria-hidden="true" tabindex="-1" href="#using-dom-nodes-as-keys"><span class="icon icon-link"></span></a>Using DOM Nodes As Keys</h3>
<p>I was momentarily taken aback after first publishing this post, however, when <a href="https://www.quickwinswithcode.com/" rel="nofollow">a friend</a> reached out about about the fact that using nodes as property names <em>sorta</em> work within ES2015’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names" rel="nofollow">“computed property names”</a> specification. He shared the following sort of example, which kinda blew my mind.</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>first element<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>second element<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> someObj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&#x27;el1&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#x27;some value&#x27;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>someObj<span class="token punctuation">[</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&#x27;el1&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &#x27;some value&#x27;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Yep, accessing that value via a DOM <em>does</em> return the desired value. But, after digging in a little more, I realized that it wasn’t performing a lookup based on the reference to that object. Instead, it was transforming it to a string representation of that object, and then using <em>that</em> as the key:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">console.log(Object.keys(someObj));
// [&amp;#39;object HTMLSpanElement&amp;#39;]</code></pre></div>
<p>And that means any of the following would access the same value as well:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">console.log(someObj[document.getElementById(&amp;#39;el2&amp;#39;)]);
// &amp;#39;some value&amp;#39;

console.log(someObj[document.createElement(&amp;#39;span&amp;#39;)]);
// &amp;#39;some value&amp;#39;</code></pre></div>
<p>While that didn’t flesh out, there was another option: <strong>a set of new-ish native JavaScript objects that allow you to use objects for keys – including references to DOM nodes themselves</strong>. Those are the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" rel="nofollow">Map</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap" rel="nofollow">WeakMap</a> objects. For example:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>thing<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>thing<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a thing.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> myWeakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set a value to a specific node reference.</span>
myWeakMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&#x27;thing&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#x27;some value&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Access that value by passing the same reference.</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>myWeakMap<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">&#x27;.thing&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x27;some value&#x27;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>My use of a WeakMap is intentional here. A standard Map would do the trick, but a WeakMap as a marginal advantage in my case: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object" rel="nofollow">the keys are not protected from the garbage collection process</a> (thanks to <a href="https://www.reddit.com/user/CreativeTechGuyGames/" rel="nofollow">CreativeTechGuyGames</a> on Reddit for this tip!). As soon as all other references to an object cease to exist, that item in a WeakMap becomes a candiate for garabage collection, preventing a potential (albeit small) memory leak.</p>
<p>With this tool at my disposal, rigging up an expanded height cache for each target element became relatively straightforward:</p>
<ol>
<li>Create a dedicated WeakMap for storing expanded element heights.</li>
<li>When <code>slide-element</code> is called on an element, create a key in that WeakMap and store the full, pre-animated height.</li>
<li>Whenever it’s needed, first check that WeakMap for the height for the respective node.</li>
</ol>
<p>In rather contrived &amp; simplified code, the logic came to look something like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">seCache</span> <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">seCache</span> <span class="token operator">||</span> <span class="token known-class-name class-name">WeakMap</span><span class="token punctuation">.</span><span class="token method function property-access">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getExpandedHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// We already have the calculated height.</span>
  <span class="token keyword control-flow">if</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">seCache</span><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">seCache</span><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// This is the first run. Calculate &amp; cache the full height.</span>
  element<span class="token punctuation">.</span><span class="token property-access">style</span><span class="token punctuation">.</span><span class="token property-access">display</span> <span class="token operator">=</span> <span class="token string">&quot;block&quot;</span><span class="token punctuation">;</span>
  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">seCache</span><span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> element<span class="token punctuation">.</span><span class="token property-access">clientHeight</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  element<span class="token punctuation">.</span><span class="token property-access">style</span><span class="token punctuation">.</span><span class="token property-access">display</span> <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token property-access">seCache</span><span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// For each trigger, animate between zero and the `clientHeight` of the element.</span>
<span class="token keyword">let</span> frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;0px&quot;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">getExpandedHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> height<span class="token punctuation">,</span> <span class="token literal-property property">overflow</span><span class="token operator">:</span> <span class="token string">&quot;hidden&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>And there we have it. A far more interesting solution than 2010’s data attributes. 😜</p>
<h2 id="way-more-useful-than-i-thought"><a aria-hidden="true" tabindex="-1" href="#way-more-useful-than-i-thought"><span class="icon icon-link"></span></a>Way More Useful Than I Thought</h2>
<p>For whatever reason, I didn’t think there’d be much utility to a brand new JavaScript object that enables you to use objects as keys, as well as anything other feature it offered (why wouldn’t a basic object cover my every need?). So, when I finally came across a use case for it, I got pretty pumped. Hopefully, this all nudges your mind to think of the tool when the appropriate need arises.</p>
<p>Apologies to whomever proposed this thing.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[When DOM Updates Appear to Be Asynchronous]]></title>
        <id>https://macarthur.me/posts/when-dom-updates-appear-to-be-asynchronous</id>
        <link href="https://macarthur.me/posts/when-dom-updates-appear-to-be-asynchronous"/>
        <updated>2020-09-29T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[Imagine we have some JavaScript on a page that updates an element’s contents and immediately logs those contents out: After loading the page, you’d correctly expect that “updated text” will be displayed on the screen. And when it’s exposed via that console.log(), you’ll see the same value there too. The...]]></summary>
        <content type="html"><![CDATA[<p>Imagine we have some JavaScript on a page that updates an element’s contents and immediately logs those contents out:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>element<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  original text
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&#x27;element&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">innerHTML</span> <span class="token operator">=</span> <span class="token string">&quot;updated text&quot;</span><span class="token punctuation">;</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>After loading the page, you’d correctly expect that “updated text” will be displayed on the screen. And when it’s exposed via that <code>console.log()</code>, you’ll see the same value there too.</p>
<p>The fact that <code>console.log()</code> yields this result isn’t surprising because a DOM update is a <em>synchronous</em> event. When the properties of the DOM object are modified, that change is thrown onto the call stack, and no proceeding event can execute until the stack is empty again. This is how JavaScript’s event loop does it’s thing — first in, first out — even though many of those events simply kick off asynchronous work handled by browser APIs (like <code>setTimeout()</code>, for example).</p>
<h2 id="same-thread-different-pace"><a aria-hidden="true" tabindex="-1" href="#same-thread-different-pace"><span class="icon icon-link"></span></a>Same Thread; Different Pace</h2>
<p>Despite it being synchronous, before a DOM change can be made visible <em>on the screen</em>, <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction#tldr" rel="nofollow">several processes</a> occur: the render tree is updated, the layout of the page is reflowed, and the result is finally painted. These processes all operate on the same thread as JavaScript’s event loop, <em>but at a different pace.</em> Consider this shoddy illustration I put together:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a68eaeba-1926-4e41-83db-bc2ea878bc8f/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=e77f21c1e789df89d3797b68db86d41a08a8256472e0e8c9e09f10c8f8d7d20e&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>The <strong>horizontal bar</strong> represents the browser’s main thread — everything operates here, unless you’re doing something like leveraging Web Workers (and <a href="https://macarthur.me/posts/use-web-workers-for-your-event-listeners" rel="nofollow">you probably should be</a>).</p>
<p>The <strong>smaller vertical bars</strong> represent the execution of JavaScript’s event loop. It’s fast, firing as quickly as it can execute items on the call stack, often communicating with browser APIs along the way.</p>
<p>The <strong>thicker vertical bars</strong> represent how frequently the browser repaints the screen. That rate usually <a href="https://developers.google.com/web/fundamentals/performance/rendering" rel="nofollow">sits at around 60 frames/second</a>, or about once every ~16. 66ms. Every time it occurs, it’ll take all the DOM changes made between the current paint and the previous paint and make them visible to the user.</p>
<p>Most of the time, the relationship between the event loop and the repaint cycle is inconsequential to our work and virtually irrelevant to the user’s experience. But sometimes, circumstances arise when this whole DOM-to-screen process can make us wonder if modifying the DOM really is a synchronous job at all.</p>
<h2 id="make-a-dom-update-look-asynchronous-w-alert"><a aria-hidden="true" tabindex="-1" href="#make-a-dom-update-look-asynchronous-w-alert"><span class="icon icon-link"></span></a>Make a DOM Update Look Asynchronous w/ <code>alert()</code></h2>
<p>Let’s explore one of these circumstances. To do so, I’m using a simple local Node server with a bit of HTML. You’re welcome to follow along with the changes we’ll be making by <a href="https://github.com/alexmacarthur/dom-updates-and-browser-repaints" rel="nofollow">cloning the repo for yourself</a> and uncommenting each example as needed. (I considered using something like <a href="https://codesandbox.io/" rel="nofollow">CodeSandbox</a> for these examples, but I needed an environment as pure &amp; predictable as possible. Platforms that serve a site through an embedded iframe couldn’t quite provide that.)</p>
<p>This time around, instead of logging out the modified DOM value, let’s expose it with an <code>alert()</code>. When that action is thrown onto the call stack, it’ll freeze the main thread, including any outstanding repaints.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">const element = document.getElementById(&amp;#39;element&amp;#39;);
element.innerHTML = &amp;quot;updated text&amp;quot;;
alert(element.innerHTML);</code></pre></div>
<p>After refreshing the page this time, you’ll see the “updated text” correctly revealed in the alert box, indicating that the DOM update itself <em>really was</em> synchronous. But if you look at what’s actually rendered to the screen, it’s probably not what you’d expect:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/07739e6f-da0d-4329-a501-94c78f613d00/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=dc3159232e908f46593ac6efd4413eefb3520fdf01ae483f029ac37d520872c9&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>The modification to the DOM object is complete, <strong>but the respective</strong> <em><strong>repaint</strong></em> <strong>has not yet been able to occur</strong> (remember — the event loop is turning over much faster than the browser’s refresh rate). The instant that the <code>alert()</code> is dismissed, repaints are allowed to proceed, and our text is updated.</p>
<h2 id="making-things-unfold-more-predictably"><a aria-hidden="true" tabindex="-1" href="#making-things-unfold-more-predictably"><span class="icon icon-link"></span></a>Making Things Unfold More Predictably</h2>
<p>Again, this quirk is unlikely to trip-up any real-world work, but since we’re here anyway, let’s toy with making things behave a little more predictably. Say we wanted the <code>alert()</code> to fire <em>only after the DOM change has been rendered to the screen.</em> To do so, we have a couple of options, one of which is hackier than the other.</p>
<h3 id="option-1-delay-the-alert"><a aria-hidden="true" tabindex="-1" href="#option-1-delay-the-alert"><span class="icon icon-link"></span></a>Option #1: Delay the <code>alert()</code>.</h3>
<p>By wrapping our <code>alert()</code> in a <code>setTimeout()</code>, we can wait long enough for any outstanding repaints to occur, and successfully fire it after the updated text has been rendered.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&#x27;element&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span> <span class="token operator">=</span> <span class="token string">&quot;updated text&quot;</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- arbitrary number greater than refresh rate</span>
</code></pre></div>
<p>This “works,” but it isn’t the most elegant solution, mainly because we’re making an educated guess as to when the repaint cycle will have turned over. We don’t want to wait too long, causing an unnecessary delay for the <code>alert()</code>. But if we cut it close and the timeout fires sooner than that delay, we’re not guaranteed to see the correct text on the screen when it’s frozen, because the browser didn’t have a chance to paint outstanding DOM changes.</p>
<p>We can illustrate this by setting the timeout’s delay to something less than the refresh rate and reload the page a few times. Much of the time, the text will still correctly render. But sooner or later, the rendered text will <em>not</em> have updated like we want.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&#x27;element&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span> <span class="token operator">=</span> <span class="token string">&quot;updated text&quot;</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- risky, since the delay is less than the browser&#x27;s refresh rate</span>
</code></pre></div>
<p>Since we can’t undoubtedly predict the refresh rate of the browser (especially considering the range of things that could impact the main thread’s throughput overall), this option is pretty far under the bar of “ideal.” Thankfully, the browser offers a built-in API for navigating the repaint cycle by design, providing us with a much friendlier option.</p>
<h3 id="option-2-fire-after-next-repaint"><a aria-hidden="true" tabindex="-1" href="#option-2-fire-after-next-repaint"><span class="icon icon-link"></span></a>Option #2: Fire After Next Repaint</h3>
<p>The browser’s <code>requestAnimationFrame</code> API lets us <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" rel="nofollow">fire a callback before the browser’s next repaint</a>, allowing us to avoid any guessing games in our objective. To use it for our purposes, it’s tempting to fire our <code>alert()</code> in one of its callbacks and call it good:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;element&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span> <span class="token operator">=</span> <span class="token string">&quot;updated text&quot;</span><span class="token punctuation">;</span>

<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>But that won’t work.</strong> Firing <em>before</em> the next repaint is pointless. Instead, we want it to happen <em>after</em>, since this is when the DOM update will have been painted to the screen. To accomplish this, we just need to nest things a bit:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&#x27;element&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span> <span class="token operator">=</span> <span class="token string">&quot;updated text&quot;</span><span class="token punctuation">;</span>

<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// fires before next repaint</span>

	<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// fires before the _next_ next repaint</span>
		<span class="token comment">// ...which is effectively _after_ the next repaint</span>

		<span class="token function">alert</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token property-access">innerHTML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>With that, we’re good to go! The <code>alert()</code> will only after outstanding DOM changes have been painted to the screen. As a result, what we see in the <code>alert()</code> and what’s rendered on the page will consistently be the same:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8ab2010b-e60f-4d6a-8df7-242b60254509/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=a84c73ad5b95790aebde6772c61a84cffa6f1c1483f9325c322625b0797ec211&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<h2 id="the-broader-implications"><a aria-hidden="true" tabindex="-1" href="#the-broader-implications"><span class="icon icon-link"></span></a>The Broader Implications</h2>
<p>Experimenting like this is fun in &amp; of itself, but it should also impact the way you think more broadly about the relationship between the DOM and the browser’s rendering engine, especially as it all impacts the performance of your code.</p>
<p>There’s more going than what you might think when a DOM attribute is modified, and when the black box of a browser starts to become a little more translucent, it can set you up to understand &amp; tackle tangential problems that impact user experience more apparently, like how certain changes to the DOM trigger synchronous style &amp; layout updates (Paul Irish has <a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a" rel="nofollow">a good starter resource</a> on this).</p>
<p>But even if you don’t go down a road like that, hopefully this gets you thinking about the the inner-workings of the browser more than before, if for no other reason than to appreciate the tool a little more for all that it does.</p>
<p><em><strong>Shoutout!</strong></em> <em>All of this was inspired by</em> <a href="https://twitter.com/rauschma/status/1288868746682081285?s=19" rel="nofollow"><em>a tweet</em></a> <em>from</em> <a href="https://dr-axel.de/" rel="nofollow"><em>Dr. Axel Rauschmayer</em></a><em>, in which he asked for a safe way to fire an</em> <em><code>alert()</code></em> <em>only after a DOM change is visible on the screen. That question and the following discussion got my gears turning to fully understand why the best solution works the way it does.</em></p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Conditionally Rendering ERB Templates from Different Directories with Ruby on Rails]]></title>
        <id>https://macarthur.me/posts/conditionally-rendering-templates-in-rails</id>
        <link href="https://macarthur.me/posts/conditionally-rendering-templates-in-rails"/>
        <updated>2021-11-22T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while back, I was working in a Ruby on Rails project in which we wanted to test out different versions of features within our application, most of which were housed in separate ERB partials. For each feature, there’d be a default “experience”, but when a certain condition was met,...]]></summary>
        <content type="html"><![CDATA[<p>A while back, I was working in a Ruby on Rails project in which we wanted to test out different versions of features within our application, most of which were housed in separate ERB partials.</p>
<p>For each feature, there’d be a default “experience”, but when a certain condition was met, we’d render an alternative, which might’ve contained slightly different markup, styles, or something else. To pull it off, we needed a way to maintain these different variants, as well as a means of reliably serving them whenever a particular experience was activated.</p>
<p>This scenario led me down the path of exploring conditional template rendering with the two most popular approaches to handling ERB templates Rails — the <a href="https://doc.bccnsoft.com/docs/rails-guides-4.2.1-en/action_view_overview.html" rel="nofollow">Action View module</a>, and the <a href="https://viewcomponent.org/" rel="nofollow">View Component gem</a>. Under more typical circumstances, we’d be able to leverage the “variants” feature offered by both solutions. But this was complicated by the fact that we wanted our variant templates to live in a different directory from our defaults (they wouldn’t be siblings). This post is mostly just a recap of how I prototyped this somewhat unusual need with both of these tools.</p>
<h2 id="conditional-rendering-w-action-view"><a aria-hidden="true" tabindex="-1" href="#conditional-rendering-w-action-view"><span class="icon icon-link"></span></a>Conditional Rendering w/ Action View</h2>
<p>Out of the two approaches I explored, Action View definitely requires the least amount of lift, being that I could largely rely on out-of-the-box functional`ity provided by Rails.</p>
<h3 id="template-file-structure"><a aria-hidden="true" tabindex="-1" href="#template-file-structure"><span class="icon icon-link"></span></a>Template File Structure</h3>
<p>First, a quick overview of the template organization scheme with which I started. The default feature template would live in the standard <code>views</code> directory), and then for each variant, a template by the same name would reside in a directory housed under <code>views/experiences</code>. For example, consider an application with a <code>ProductController</code> and a single <code>index</code> action:</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token operator">&lt;</span> ApplicationController    
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span><span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre></div>
<p>And within the associated <code>app/views/product/index.html.erb</code> file, a <code>_comparison-table.erb</code> template is rendered:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Default Products Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

&lt;%= render &quot;comparison-table&quot; %&gt;
</code></pre></div>
<p>When navigating to that route in the browser, some sort of “default” experience would be rendered:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/65b2498e-b799-4c18-bc5f-7a4860acb8ba/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=208147c5dd7e31962fc2335de6b09426ff33ae6f04d43185cb0bcd984dbd0223&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Now, imagine that “minimalist” and “maximalist” experiences were introduced for the application. Each of these experiences would have a dedicated directory (named according to that experience) that housed the alternative templates <strong>using the same folder structure</strong> (in this case, under the <code>product</code> namespace).</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token operator">|</span>-- app/
    <span class="token operator">|</span>-- views/
        <span class="token operator">|</span>-- experiences/
            <span class="token operator">|</span>-- minimalist/
                <span class="token operator">|</span>-- product
                    <span class="token operator">|</span>-- _comparison-table.html.erb	
                    <span class="token operator">|</span>-- index.html.erb
            <span class="token operator">|</span>-- maximalist/
                <span class="token operator">|</span>-- product
                    <span class="token operator">|</span>-- _comparison-table.html.erb
                    <span class="token operator">|</span>-- index.html.erb
        <span class="token operator">|</span>-- product
	        <span class="token operator">|</span>-- _comparison-table.html.erb
				<span class="token operator">|</span>-- index.html.erb
</code></pre></div>
<p>While arguably a little more complicated than dealing strictly with sibling template variants, this still feel pretty maintinable. When a new experience is introduced, I’d simply duplicate the relevant template files and tweak away.</p>
<h3 id="overriding-where-templates-are-searched"><a aria-hidden="true" tabindex="-1" href="#overriding-where-templates-are-searched"><span class="icon icon-link"></span></a>Overriding Where Templates Are Searched</h3>
<p>At the start of this, I assumed we’d now need to build out some sort of abstraction on top of Rails’ standard <code>render</code> method in order determine which template to show. But shortly after digging in, I ran into the <code>prepend_view_path</code> method within the <code>ActionView</code> module.</p>
<p>This method is responsible for <a href="https://api.rubyonrails.org/classes/ActionView/ViewPaths/ClassMethods.html#method-i-prepend_view_path" rel="nofollow">prepending paths in which Rails searches for templates to render</a>. By default, that list of paths only contains <code>app/views</code>, but if you’d like Rails to look in another location first, you can configure that in a <code>before_action</code> hook. The following, for example, would tell any controller in an application to <em>first</em> look in the <code>app/views/experiences/minimalist</code> directory.</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
	before_action <span class="token symbol">:prepend_experience_path</span>
    
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">prepend_experience_path</span></span>
		prepend_view_path <span class="token string-literal"><span class="token string">&quot;app/views/experiences/minimalist&quot;</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre></div>
<p>Then, whenever the <code>render</code> method is used in an ERB template, the “minimalist” template would be pulled — no other special implementation or custom code necessary:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- </span>
<span class="token comment">	First searches for:</span>
<span class="token comment">    `app/views/experiences/minimalist/product/_comparison-table.html.erb` </span>
<span class="token comment">--&gt;</span>
&lt;%= render &quot;comparison-table&quot; %&gt;
</code></pre></div>
<p>Plus, this feature includes the <em>implicit</em> use of <code>render</code> directly within a controller action:</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token operator">&lt;</span> ApplicationController
	<span class="token comment"># First searches for:</span>
	<span class="token comment"># `app/views/experiences/minimalist/product/index.html.erb`</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span><span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre></div>
<p>The nice part about this is that it falls back gracefully. If no template is found in that path, Rails will move onto the remaining list of paths to check. Using that most previous example, if <code>index.html.erb</code> didn’t exist within the <code>minimalist</code> experience path, it’d fall back to <code>app/views/product/index.html.erb</code> — the default experience.</p>
<h3 id="setting-a-particular-experience"><a aria-hidden="true" tabindex="-1" href="#setting-a-particular-experience"><span class="icon icon-link"></span></a>Setting a Particular Experience</h3>
<p>At this point, I needed a means of determining which experience is active for a given user, and then use that experience to choose the directory that’s first searched for templates. There’s a gazillion ways this might be handled (the database, a third-party feature flag tool, etc.), but for simplicity of demonstration, I’ll use a <code>?experience=experience_name</code> query string parameter in the URL. Here’s how that’d look in the inherited <code>ApplicationController</code>:</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
    before_action <span class="token symbol">:prepend_experience_path</span>

    <span class="token comment"># Only search in an &quot;experience&quot; directory if a query param is set in the URL.</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">prepend_experience_path</span></span>
        prepend_view_path <span class="token string-literal"><span class="token string">&quot;app/views/experiences/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">experience</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token keyword">if</span> experience<span class="token punctuation">.</span>present<span class="token operator">?</span>
    <span class="token keyword">end</span>

<span class="token keyword">private</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">experience</span></span>
		params<span class="token punctuation">[</span><span class="token symbol">:experience</span><span class="token punctuation">]</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre></div>
<p>On each request, the specified experience is pulled from the <code>params</code> object with our <code>experience</code> method. Then, I’m prepending that particular experience’s path. Following the earlier example, if I were to navigate to the same page with the experience set in the URL, the page would now render something like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f0485e05-eb4c-4998-93e6-6201748398e5/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=626d0eef5c5eb1b1ee17175b5e18d4a31932e376221cb4b91196bb8d6ed19d51&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Easy conditional template rendering… by just leveraging what Rails gives us anyway!</p>
<h2 id="conditional-rendering-w-viewcomponents"><a aria-hidden="true" tabindex="-1" href="#conditional-rendering-w-viewcomponents"><span class="icon icon-link"></span></a>Conditional Rendering w/ ViewComponents</h2>
<p>If you’re not that familiar with GitHub’s <a href="https://github.com/github/view_component" rel="nofollow">view_component</a> gem, check it out. It toutes some pretty sick advantages — performance, testability, and encapsulation, to mention a few.</p>
<p>Unfortunately, conditionally rendering different templates with ViewComponents is a little more complicated than with Action View. As far as my digging through the code &amp; documentation went, there’s neither (yet) a public API for controlling where <code>.erb</code> templates are searched, nor a blessed means of dictating which template should be rendered for a given component. Regardless, it’s possible to pull off for my specific use case. Here’s the approach I took:</p>
<h3 id="an-example-component"><a aria-hidden="true" tabindex="-1" href="#an-example-component"><span class="icon icon-link"></span></a>An Example Component</h3>
<p>I used a simple “ProductCard” component for trying this out, which comes with a <code>ProducCardComponent</code> class that accepts <code>title</code>, <code>price</code>, and <code>experience</code> (which we’ll use to determine the rendered template) parameters:</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token comment"># /app/components/product_card_component.rb</span>

<span class="token keyword">class</span> <span class="token class-name">ProductCardComponent</span> <span class="token operator">&lt;</span> ViewComponent<span class="token double-colon punctuation">::</span>Base
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span><span class="token symbol">title</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token symbol">price</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token symbol">experience</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token variable">@experience</span> <span class="token operator">=</span> experience
        <span class="token variable">@title</span> <span class="token operator">=</span> title
        <span class="token variable">@price</span> <span class="token operator">=</span> price
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre></div>
<p>And then there’s the ERB template itself:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- /app/components/product_card_component.html.erb --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>Default Card<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
    Title: &lt;%= @title %&gt;
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    Price: $&lt;%= @price %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Inside an ERB template, that’s instantiated like so:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- app/views/index.html.erb --&gt;</span>

&lt;%= render(ProductCardComponent.new(title: &quot;A Product&quot;, price: 49, experience: experience)) %&gt;
</code></pre></div>
<p>Which ends up looking like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/add7f9c6-3e27-48eb-9b53-062acc690328/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=77245d749082fdd8ffb00c4b7b2fd24d7ca65c6ffea7fbe96cdf6dbfa2cf7cf0&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<h3 id="taking-over-template-rendering"><a aria-hidden="true" tabindex="-1" href="#taking-over-template-rendering"><span class="icon icon-link"></span></a>Taking Over Template Rendering</h3>
<p>By default, ViewComponent looks for a sibling ERB file within the <code>app/components</code> directory. But, as <a href="https://viewcomponent.org/guide/templates.html#inline" rel="nofollow">an alternative</a>, it’s possible to render content returned from a <code>call</code> method attached to the component class. And that can be used (or slightly hacked) to take full control over what’s rendered under certain conditions. Here’s how I started to wire that up:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">class ProductCardComponent &lt; ViewComponent::Base
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   def initialize(title:, price:, experience: &quot;&quot;)</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       @experience = experience</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       @title = title</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       @price = price</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   end</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   # Grab a template&#x27;s contents and turn it into HTML.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   def call</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   	template_contents = File.read(template_path)</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">          </span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">       ERB.new(template_contents).result(binding).html_safe</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   end</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   </span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">private</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   </span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   # Use the same template path ViewComponet uses by default.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   def template_path</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">       @template_path ||= &quot;#{Rails.root}/app/components/#{self.class.name.underscore}.html.erb&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   end</span>
<span class="token line"></span></span>end
</code></pre></div>
<p>With this change, I’m manually compiling our own ERB templates using the included <code>ERB</code> renderer (note: that <code>.result(binding)</code> piece is important — it’ll allow access to instance variables from within the template). That template is being targeted by transforming the name of the current class into the same format expected by ViewComponent.</p>
<p>If you’re following along on your own and refresh the page at this point, you’d get an error. That’s because, out of the box, ViewComponent <a href="https://github.com/github/view_component/blob/main/lib/view_component/compiler.rb#L121" rel="nofollow">does not permit you to have both</a> a template in your <code>app/components</code> directory, <em>and</em> a <code>call</code> method on your class. To get around this hurdle and allow the component’s templates to remain in the standard <code>app/components</code> directory, I did a little meta-programming (and no, I did not feel spectacular about it):</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">class ProductCardComponent &lt; ViewComponent::Base
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   def initialize(title:, price:, experience: &quot;&quot;)</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       @experience = experience</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       @title = title</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       @price = price</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       wipe_out_templates</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   end</span>
<span class="token line"></span></span>
	def call
		template_contents = File.read(template_path)
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       </span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       ERB.new(template_contents).result(binding).html_safe</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   end</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"></span>
<span class="token line"></span></span>private
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"></span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   def template_path</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       @template_path ||= &quot;#{Rails.root}/app/components/#{self.class.name.underscore}.html.erb&quot;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   end</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   # Fake ViewComonent into thinking there are no templates in `app/components`.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   def wipe_out_templates</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">       self.class.class_eval do</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">           def self._sidecar_files(_extensions)</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">               []</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">           end</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">       end</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   end</span>
<span class="token line"></span></span>end
</code></pre></div>
<p>With this in place, each time the component is instantiated, the static <code>_sidecar_files</code> method is overridden (a class method that literally has the word “EXPERIMENTAL” above it <a href="https://github.com/github/view_component/blob/main/lib/view_component/base.rb#L309" rel="nofollow">in the source</a>, lol). That override stomps out its original implementation, making the library believe that there are actually no ERB templates living in the directory. A little dirty-feeling, but still. Onward!</p>
<h3 id="conditionally-rendering-templates"><a aria-hidden="true" tabindex="-1" href="#conditionally-rendering-templates"><span class="icon icon-link"></span></a>Conditionally Rendering Templates</h3>
<p>Next up, I needed to introduce the logic for choosing a different template when a certain experience is active. To do that, I modified the <code>template_path</code> method and include two more:</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">template_path</span></span> 
    <span class="token variable">@template_path</span> <span class="token operator">||=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>exist<span class="token operator">?</span><span class="token punctuation">(</span>experience_template_path<span class="token punctuation">)</span> <span class="token operator">?</span> experience_template_path <span class="token operator">:</span> standard_template_path
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">experience_template_path</span></span>
    <span class="token variable">@experience_template_path</span> <span class="token operator">||=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">Rails<span class="token punctuation">.</span>root</span><span class="token delimiter punctuation">}</span></span><span class="token string">/app/components/experiences/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token variable">@experience</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span>underscore</span><span class="token delimiter punctuation">}</span></span><span class="token string">.html.erb&quot;</span></span>
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">standard_template_path</span></span>
    <span class="token variable">@standard_template_path</span> <span class="token operator">||=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">Rails<span class="token punctuation">.</span>root</span><span class="token delimiter punctuation">}</span></span><span class="token string">/app/components/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span>underscore</span><span class="token delimiter punctuation">}</span></span><span class="token string">.html.erb&quot;</span></span>
<span class="token keyword">end</span>
</code></pre></div>
<p>Now, the component will first always check to see if it can render a template based on whatever experience is set (which might be none). If it can’t, the “standard” template will be used.</p>
<h3 id="a-bit-of-clean-up"><a aria-hidden="true" tabindex="-1" href="#a-bit-of-clean-up"><span class="icon icon-link"></span></a>A Bit of Clean-Up</h3>
<p>For housekeeping purposes, this can be arranged differently for better reuse among all components that might be introduced. To do that, I created a new <code>ExperienceableComponent</code> class from which all of my components extend, which will be responsible for containing all of this custom rendering logic. Altogether, it looked like this:</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ExperienceableComponent</span> <span class="token operator">&lt;</span> ViewComponent<span class="token double-colon punctuation">::</span>Base
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
        wipe_out_templates
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">call</span></span>
        template_contents <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span>template_path<span class="token punctuation">)</span>
        
        <span class="token class-name">ERB</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>template_contents<span class="token punctuation">)</span><span class="token punctuation">.</span>result<span class="token punctuation">(</span>binding<span class="token punctuation">)</span><span class="token punctuation">.</span>html_safe
    <span class="token keyword">end</span>

<span class="token keyword">private</span> 

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">template_path</span></span> 
        <span class="token variable">@template_path</span> <span class="token operator">||=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>exist<span class="token operator">?</span><span class="token punctuation">(</span>experience_template_path<span class="token punctuation">)</span> <span class="token operator">?</span> experience_template_path <span class="token operator">:</span> standard_template_path
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">experience_template_path</span></span>
        <span class="token variable">@experience_template_path</span> <span class="token operator">||=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">Rails<span class="token punctuation">.</span>root</span><span class="token delimiter punctuation">}</span></span><span class="token string">/app/components/experiences/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token variable">@experience</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span>underscore</span><span class="token delimiter punctuation">}</span></span><span class="token string">.html.erb&quot;</span></span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">standard_template_path</span></span>
        <span class="token variable">@standard_template_path</span> <span class="token operator">||=</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">Rails<span class="token punctuation">.</span>root</span><span class="token delimiter punctuation">}</span></span><span class="token string">/app/components/</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span>underscore</span><span class="token delimiter punctuation">}</span></span><span class="token string">.html.erb&quot;</span></span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">wipe_out_templates</span></span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
            <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">_sidecar_files</span></span><span class="token punctuation">(</span>_extensions<span class="token punctuation">)</span>
                <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">end</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre></div>
<p>After that abstraction, the actual component class can look a lot simpler:</p>
<div class="remark-highlight"><pre class="language-ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ProductCardComponent</span> <span class="token operator">&lt;</span> ExperienceableComponent
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span><span class="token symbol">title</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token symbol">price</span><span class="token operator">:</span><span class="token punctuation">,</span> <span class="token symbol">experience</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token variable">@experience</span> <span class="token operator">=</span> experience
        <span class="token variable">@title</span> <span class="token operator">=</span> title
        <span class="token variable">@price</span> <span class="token operator">=</span> price

        <span class="token keyword">super</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre></div>
<p>With things feeling a little tidier, navigating to the same page with <code>?experience=minimalist</code> in the URL renders exactly what I wanted:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2c8a3607-cb9b-4131-8fae-ae0448b05d41/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=1623910e61fb1d7515495690da348c2a2945b6cd8644614e31e2f4f2cc3209bb&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>And there you go. Despite the slight hackiness, we got it running!</p>
<h2 id="rails-developers-are-smart"><a aria-hidden="true" tabindex="-1" href="#rails-developers-are-smart"><span class="icon icon-link"></span></a>Rails Developers are Smart</h2>
<p>If there’s anything I really came to realize during all of this exploration, it’s that there’s a <em>ton</em> of considerations the Action View &amp; ViewComponent contributors have balanced with excellence as they built (and continue to build) out these UI-rendering solutions. I can’t imagine building out a package of such scale that satisfies so many different use cases, including my own. But they did it. So, a brief message to those contributors: You’re a lot smarter than I am. But I’mma catch you.</p>
<p>Thanks for tagging along!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Using reduce() to Sequentially Resolve Promises Works]]></title>
        <id>https://macarthur.me/posts/why-using-reduce-to-sequentially-resolve-promises-works</id>
        <link href="https://macarthur.me/posts/why-using-reduce-to-sequentially-resolve-promises-works"/>
        <updated>2018-10-17T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guest post in which I explore why JavaScript’s reduce() method is able to help sequentually resolve a collection of Promise objects. ...]]></summary>
        <content type="html"><![CDATA[<p>A guest post in which I explore why JavaScript’s reduce() method is able to help sequentually resolve a collection of Promise objects.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reliably Send an HTTP Request as a User Leaves a Page]]></title>
        <id>https://macarthur.me/posts/send-an-http-request-on-page-exit</id>
        <link href="https://macarthur.me/posts/send-an-http-request-on-page-exit"/>
        <updated>2022-02-22T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A post on CSS Tricks exploring why HTTP requests sent during page navigation are at risk of abandonment, as well as options available to prevent it from happening. ...]]></summary>
        <content type="html"><![CDATA[<p>A post on CSS Tricks exploring why HTTP requests sent during page navigation are at risk of abandonment, as well as options available to prevent it from happening.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Creating a .map() Method for Objects, Strings, Sets, and Maps]]></title>
        <id>https://macarthur.me/posts/creating-a-map-method-for-objects-strings-sets-and-maps</id>
        <link href="https://macarthur.me/posts/creating-a-map-method-for-objects-strings-sets-and-maps"/>
        <updated>2019-06-19T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[It’s a well-established truth of the universe that JavaScript’s Array.prototype.map() is one of the best parts of the language, allowing us to write cleaner, simpler code to manipulate array values, instead of using something like forEach(). For example, let’s say we want to create a copy of an array with...]]></summary>
        <content type="html"><![CDATA[<p>It’s a well-established truth of the universe that JavaScript’s <code>Array.prototype.map()</code> is one of the best parts of the language, allowing us to write cleaner, simpler code to manipulate array values, instead of using something like <code>forEach()</code>.</p>
<p>For example, let’s say we want to create a copy of an array with values that are tripled.</p>
<p><strong>The Uncool Way</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> someNumz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> someTripledNumz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

someNumz<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  someTripledNumz<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>someNumz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-- [2, 3, 5, 4, 5]</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>someTripledNumz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-- [6, 9, 15, 12, 15]</span>
</code></pre></div>
<p>That works, but it’s rough around the edges. We need to declare an empty <code>someTripledNumz</code> array above, and <em>then</em> go through the process of tripling everything. But with <code>.map()</code>, things look better:</p>
<p><strong>The Cool Way</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> someNumz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> someTripledNumz <span class="token operator">=</span> someNumz<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=&gt;</span> item <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>someNumz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-- [2, 3, 5, 4, 5]</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>someTripledNumz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-- [6, 9, 15, 12, 15]</span>
</code></pre></div>
<h2 id="what-if-we-want-to-map-over-the-values-of-an-object"><a aria-hidden="true" tabindex="-1" href="#what-if-we-want-to-map-over-the-values-of-an-object"><span class="icon icon-link"></span></a>What if we want to <code>map()</code> over the values of an <em>object</em>?</h2>
<p>As it stands, you can’t. There’s no <code>.map()</code> method that exists on any object for us to use out of the box. But, thanks to <a href="https://medium.com/@kevincennis/prototypal-inheritance-781bccc97edb" rel="nofollow">prototypal inheritance</a>, JavaScript provides a way to make that happen. We’re gonna try it out, so that afterward, we’ll be able to do something like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> oldObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">first</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">second</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">third</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> newObject <span class="token operator">=</span> oldObject<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> thing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>newObject<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// { first: 2, second: 4, third: 6 }</span>
</code></pre></div>
<h2 id="lets-map-over-an-object"><a aria-hidden="true" tabindex="-1" href="#lets-map-over-an-object"><span class="icon icon-link"></span></a>Let’s Map() Over an Object</h2>
<p>First, let’s add an empty <code>.map()</code> method to the <code>Object</code> prototype. That method will accept a single argument: the callback method we’d like to fire on each of the values.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>
<p>Next up, let’s pull all of our values out of the object we we’d like to map (it’ll be available within the <code>this</code> object), and actually <code>map()</code> over them like any other array, firing our function on each item.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Collect an array of each value within the object.</span>
  <span class="token keyword">let</span> oldValues <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Manipulate those values with the provided callback method.</span>
  <span class="token keyword">let</span> newValues <span class="token operator">=</span> oldValues<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Notice that when we fire that method, we’re also passing in the <code>index</code> and the original object itself as parameters. This is to keep our method as close to the actual <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Syntax" rel="nofollow">specification</a> as reasonably possible.</p>
<p>Once we have those manipulated values, we can piece our object back together with the appropriate keys.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Collect an array of each value within the object.</span>
  <span class="token keyword">let</span> oldValues <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Manipulate those values with the provided callback method.</span>
  <span class="token keyword">let</span> newValues <span class="token operator">=</span> oldValues<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Reconstruct our object with each modified value.</span>
  <span class="token keyword">let</span> mappedObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      mappedObject<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValues<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> mappedObject<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>We did it! But if you’re like me, you’re hungry for more. So, let’s:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/0ba610da-74cc-445e-b709-cc1aed76fc98/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=3dfc1ca61f2af15ea89ae5a561cf661e07deeed8d836a7a088ac23dfac788c08&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Sidebar: It was <em>really</em> difficult to commit to using that meme. So overused. So 2013. But I’m choosing to submit to its applicability for this post. Now, we continue:</p>
<h2 id="lets-map-over-a-string"><a aria-hidden="true" tabindex="-1" href="#lets-map-over-a-string"><span class="icon icon-link"></span></a>Let’s Map() Over a String()</h2>
<p>This one’s a bit simpler than our <code>Object</code> map. Turn the target string into an array, <code>map()</code> over it as per usual, and turn it back into a string:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stringArray <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> newStringArray <span class="token operator">=</span> stringArray<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> newStringArray<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Then, we can do something like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> newString <span class="token operator">=</span> <span class="token string">&quot;I want to scream this!&quot;</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> thing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> item<span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>newString<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &#x27;I WANT TO SCREAM THIS!&#x27;</span>
</code></pre></div>
<h2 id="lets-map-over-a-set"><a aria-hidden="true" tabindex="-1" href="#lets-map-over-a-set"><span class="icon icon-link"></span></a>Let’s Map() Over a Set()</h2>
<p>Since it’s array-like, mapping over a Set is also relatively straightforward. Make it into an array, do the things, turn it back into a set. Thanks to the syntax of modern JavaScript, it looks pretty clean.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> setArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> newSetArray <span class="token operator">=</span> setArray<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>newSetArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> oldSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> newSet <span class="token operator">=</span> oldSet<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> thing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> item <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>newSet<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Set { 3, 6, 9, 12, 15 }</span>
</code></pre></div>
<h2 id="lets-map-over-a-map"><a aria-hidden="true" tabindex="-1" href="#lets-map-over-a-map"><span class="icon icon-link"></span></a>Let’s Map() Over a Map</h2>
<p>This is where things get a wee bit nuttier. As we did before, the first thing we want to do in performing a <code>map()</code> on a <code>Map()</code> is get our target Map as an array. Take note of the format of this new array. Each item in that array is stored as an array itself, with the first item being the key, and the second being the value:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;item 1&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;value 1&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;item 2&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;value 2&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token spread operator">...</span>myMap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [ [ &#x27;item 1&#x27;, &#x27;value 1&#x27; ], [ &#x27;item 2&#x27;, &#x27;value 2&#x27; ] ]</span>
</code></pre></div>
<p>So, our prototype method beings like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> mapAsArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>And then, we’ll map over each item, handing if off to our callback method to do its thing.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> mapAsArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> newMapAsArray <span class="token operator">=</span> mapAsArray<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>And finally, piece that sucker back together by creating a new Map and adding values it it from our <code>newMapAsArray</code>.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token property-access">prototype</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">map</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> mapAsArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> newMapAsArray <span class="token operator">=</span> mapAsArray<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> func<span class="token punctuation">.</span><span class="token method function property-access">call</span><span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Construct a new Map() with our modified values.</span>
  <span class="token keyword">let</span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  newMapAsArray<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Remember, each item contains the [key, value] for our Map item.</span>
    newMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> newMap<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Let’s try it out. If you weren’t aware, the keys or values don’t <em>have</em> to be of a particular type — objects, numbers, functions, etc. So, <code>map()</code> with responsibility.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;my first item&#x27;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myMap<span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> newMap <span class="token operator">=</span> myMap<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> thing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// We only want to modify the _value_ of the item.</span>
  item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Turn it back into an array just for ease of inspection.</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token spread operator">...</span>newMap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [ [ &#x27;my first item&#x27;, 3 ], [ {}, 6 ] ]</span>
</code></pre></div>
<h2 id="try-the-package"><a aria-hidden="true" tabindex="-1" href="#try-the-package"><span class="icon icon-link"></span></a>Try the Package</h2>
<p>Since what I wrote here includes a lot of functional, possibly useful code, I wrapped it all up into a package, ready for consumption. You can <a href="https://github.com/alexmacarthur/map-everything" rel="nofollow">check it out here</a>, and/or dive right in with <code>npm install map-everything</code>.</p>
<h2 id="code-with-caution"><a aria-hidden="true" tabindex="-1" href="#code-with-caution"><span class="icon icon-link"></span></a>Code with Caution</h2>
<p>Most of this was born out of “wouldn’t it be cool, if” within my brain. So, before shipping anything to production, be very intentional about what you’re manipulating, or deciding if it’s even worth adding these methods to all of these prototypes. All that said, this sure was fun! Thanks for mapping with me.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Using the posts_where Filter in WordPress]]></title>
        <id>https://macarthur.me/posts/using-the-posts-where-filter-in-wordpress</id>
        <link href="https://macarthur.me/posts/using-the-posts-where-filter-in-wordpress"/>
        <updated>2018-04-25T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you’ve spent 20 seconds in WordPress development, you’ve likely worked with, cursed, and fallen in love with the WP\_Query class – one of the most useful, commonly used tools in any given WordPress website or application. Aside from being responsible for the main query on any given page or...]]></summary>
        <content type="html"><![CDATA[<p>If you’ve spent 20 seconds in WordPress development, you’ve likely worked with, cursed, and fallen in love with the WP_Query class – one of the most useful, commonly used tools in any given WordPress website or application.</p>
<p>Aside from being responsible for the main query on any given page or post, it serves as the go-to way to interface with your database in tons of different contexts. Most commonly, you might see it used to retrieve data like custom post types. For example, getting all of the cat massage tutorials in a site:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$massageQuery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WP_Query</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string single-quoted-string">&#x27;post_type&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;cat_massage_tutorial&#x27;</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">&#x27;posts_per_page&#x27;</span> <span class="token operator">=&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Even more than that, you can use this class to make slightly more complex queries based on meta data attached to different posts. Let’s get all the cat massage tutorials whose difficulty level are above 8:</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$massageQuery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WP_Query</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string single-quoted-string">&#x27;post_type&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;cat_massage_tutorial&#x27;</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">&#x27;posts_per_page&#x27;</span> <span class="token operator">=&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">&#x27;meta_query&#x27;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>            <span class="token string single-quoted-string">&#x27;key&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;difficulty&#x27;</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">&#x27;compare&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;&gt;&#x27;</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">&#x27;value&#x27;</span> <span class="token operator">=&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">&#x27;type&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;numeric&#x27;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>That’s all really neat, and honestly, relatively common to see. So, let’s do something a little more interesting and gather a set of posts not easily queryable by WP_Query out of the box.</p>
<p>Imagine that we want all of the “long” cat massage tutorials in our database – those whose content have at least a certain number of characters. This information isn’t stored in post meta, so we can’t rely on out-of-the-box functionality of WP_Query. So, how do we collect only the “long” posts in our database?</p>
<h3 id="one-option-loop-through-all-the-things"><a aria-hidden="true" tabindex="-1" href="#one-option-loop-through-all-the-things"><span class="icon icon-link"></span></a>One option: Loop through all the things.</h3>
<p>We <em>could</em> do something like get all the posts, and then loop over each retrieved post in our PHP, filtering out those under a certain character count. But this is inefficient and bit more cumbersome compared to another option we have.</p>
<h3 id="better-option-use-the-posts_where-filter-to-modify-the-where-clause-in-your-wp_query"><a aria-hidden="true" tabindex="-1" href="#better-option-use-the-posts_where-filter-to-modify-the-where-clause-in-your-wp_query"><span class="icon icon-link"></span></a>Better option: Use the ‘posts_where’ filter to modify the ‘where’ clause in your WP_Query.</h3>
<p>By modifying the SQL query underlying our WP_Query, the work can be efficiently offloaded to where it <em>should</em> be done, rather than dealing with it elsewhere, like in template logic.</p>
<p><strong>First, create a WP_Query object querying for all of our posts.</strong></p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$massageQuery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WP_Query</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string single-quoted-string">&#x27;post_type&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;cat_massage_tutorial&#x27;</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">&#x27;posts_per_page&#x27;</span> <span class="token operator">=&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>In our arguments, pass a</strong> <strong><code>query_label</code></strong> <strong>key and value. This isn’t a WP_Query option – it’s a totally arbitrary key we’re passing that we’ll use later to identify our query.</strong></p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$massageQuery</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WP_Query</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token string single-quoted-string">&#x27;query_label&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;our_cat_massage_query&#x27;</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">&#x27;post_type&#x27;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#x27;cat_massage_tutorial&#x27;</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">&#x27;posts_per_page&#x27;</span> <span class="token operator">=&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>Next up, we need to filter part of the SQL statement that’s retrieving stuff from our database.</strong></p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;posts_where&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//-- Stuff will go here.    return $where;}, 10, 2);</span>
</code></pre></div>
<p><strong>Using the</strong> <strong><code>query_label</code></strong> <strong>key we passed earlier, make sure we’re only doing this on our specific query.</strong></p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;posts_where&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$label</span> <span class="token operator">=</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token property">query</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;query_label&#x27;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#x27;&#x27;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$label</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#x27;our_cat_massage_query&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//-- More stuff will go here.    }    return $where;}, 10, 2);</span>
</code></pre></div>
<p><strong>Now, append a condition to the</strong> <strong><code>where</code></strong> <strong>clause of that query.</strong> You’ll obviously need to have a baseline understanding of SQL here. In this case, we’re grabbing all the posts whose content is more than 1200 characters.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token function">add_filter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#x27;posts_where&#x27;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$label</span> <span class="token operator">=</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token property">query</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#x27;query_label&#x27;</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">&#x27;&#x27;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$label</span> <span class="token operator">===</span> <span class="token string single-quoted-string">&#x27;our_cat_massage_query&#x27;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$wpdb</span><span class="token punctuation">;</span>        <span class="token variable">$where</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">&quot; AND LENGTH(<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$wpdb</span><span class="token operator">-&gt;</span><span class="token property">prefix</span><span class="token punctuation">}</span></span>posts.post_content) &gt; 1200&quot;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$where</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Now, our WP_Query object will return exactly what we defined in our arguments, but within the scope of how we filtered our <code>where</code> clause. All <em>without</em> needing to be clever with any other PHP.</p>
<h3 id="when-am-i-ever-going-to-need-this"><a aria-hidden="true" tabindex="-1" href="#when-am-i-ever-going-to-need-this"><span class="icon icon-link"></span></a>“When am I ever going to need this?”</h3>
<p>I don’t know. This WordPress development we’re talking about. Always be ready.</p>
<h3 id="this-doesnt-make-me-feel-very-good"><a aria-hidden="true" tabindex="-1" href="#this-doesnt-make-me-feel-very-good"><span class="icon icon-link"></span></a>“This doesn’t make me feel very good.”</h3>
<p>I’m right there with you. When querying like this, making a WP_Query object and then writing a filter in a different location is far less than elegant, and I’m certainly open to more effective ways so do this without getting abandoning use of the tool altogether. Do you have a better solution? Share it!</p>
<p>For better or for worse, I hope this will help tackle a task using WP_Query in the future. That said, if you’re struggling with this or anything related in your own application, I’m available for hire. <a href="/contact">Get in touch</a>!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Lambda Function with Netlify]]></title>
        <id>https://macarthur.me/posts/building-a-lambda-function-with-netlify</id>
        <link href="https://macarthur.me/posts/building-a-lambda-function-with-netlify"/>
        <updated>2018-02-08T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while back, I wrote my first Lambda function with Firebase. Like every Lambda function tutorial on the web shows you how to do, mine processes a payment via Stripe when someone purchases a license for TypeIt, the most versatile JavaScript animated typing utility on the planet. The process was...]]></summary>
        <content type="html"><![CDATA[<p>A while back, I wrote my first Lambda function with Firebase. Like every Lambda function tutorial on the web shows you how to do, mine processes a payment via Stripe when someone purchases a license for <a href="https://typeitjs.com/" rel="nofollow">TypeIt</a>, the most versatile JavaScript animated typing utility on the planet. The process was pretty straightforward – Firebase’s CLI, documentation, and support are all great. Even so, I had some reservations about the setup.</p>
<p>First off, TypeIt’s site is hosted with Netlify, with which I am madly in love, so development of the function felt… detached. I couldn’t easily manage everything within the same repository, and I had to keep tabs on three different services to make this all happen – Netlify, Firebase, and Stripe.</p>
<p>Second, I’m a cheapskate, and Firebase doesn’t have a free tier that permits calls to external services like Stripe. Maybe that’s changed, but last I checked, this was the case.</p>
<p>With all that in mind, I nearly peed myself when Netlify’s Lambda function service was rolled out, and I immediately dove into migrating my Firebase function to Netlify. It was so fun, I’ve documented that experience. I’ll quickly take you through how to leverage some of the features that make Netlify great, in combination with the power of a Lambda function. Hopefully, you’ll get a sense of why a service like this with a provider like this is uniquely awesome.</p>
<p>I’ll be using some pretty bare bones here, but you can implement the function with any type of static application you want – Jekyll, Gatsby, whatever. <em>Just make sure you have a static site you’re able to host with Netlify, and that it uses webpack (we’ll be using its</em> <em><code>DefinePlugin</code>__, specifically).</em> I’m starting with an <code>index.html</code> file, some CSS, JavaScript, and some tools to pull it all together. You can see the full setup <a href="https://github.com/alexmacarthur/netlify-function-example" rel="nofollow">here</a>. You’ll also need a Stripe account, which you can get for free <a href="https://dashboard.stripe.com/register" rel="nofollow">here</a>.</p>
<p>Letz do dis.</p>
<h2 id="setting-up-our-function"><a aria-hidden="true" tabindex="-1" href="#setting-up-our-function"><span class="icon icon-link"></span></a>Setting Up Our Function</h2>
<p>I’m going to assume you have a basic JAMStack project already set up &amp; ready to go, including a <code>package.json</code> file. After that groundwork is laid, walk through these steps:</p>
<p><strong>Create directories to store your Lambda code.</strong> One of these will contain your pre-compiled source code, and the other will be where Netlify puts the production-ready code. Locally, we’ll only be serving out of the <code>lambda-src</code> directory, and so creating that <code>lambda</code> directory is technically unnecessary (later, when we deploy, Netlify will create that directory automatically), but we’ll go ahead and do it here for better clarity in what’s going on.</p>
<p><code>mkdir lambda-src lambda</code></p>
<p><strong>Install the Netlify Lambda CLI.</strong> This will give us the ability to develop &amp; test the function locally before deploying it to Netlify.</p>
<p><code>npm install netlify-lambda -D</code></p>
<p><strong>Create a</strong> <strong><code>netlify.toml</code></strong> <strong>file,</strong> which will contain the required configuration information for our function’s deployment.</p>
<p><code>touch netlify.toml</code></p>
<p>The <code>netlify.toml</code> file is responsible for defining things like build commands, our publish directory, environment variables, and most notably for what we’re doing here, where our Lambda function directory will be. It’s worth mentioning that you can also set this directory in the admin, but that’s slightly less cool.</p>
<p>After defining that directory as well as a couple other nice-to-haves, we’re left with this, which sits in the root of our project. For more information on how this file works and its capabilities, <a href="https://www.netlify.com/docs/netlify-toml-reference/" rel="nofollow">read the documentation</a>;</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text"># netlify.toml

[build]
  command = &amp;quot;npm run build&amp;quot;
  publish = &amp;quot;src&amp;quot;
  functions = &amp;quot;lambda&amp;quot;</code></pre></div>
<p>Translation: On build, Netlify will build our stuff using the specified build command, serve our site from the <code>src</code> directory, and serve our function from the <code>lambda</code> directory.</p>
<p><strong>Next, let’s set up some actions in our</strong> <strong><code>package.json</code></strong> <strong>to run our code locally and build it for production.</strong></p>
<p>We’ll configure everything to run a small development server <em>and</em> a Lambda function server at the same time. To do this, we’ll use the <code>concurrently</code> package, which will need to be installed as well:</p>
<p><code>npm install concurrently -D</code></p>
<p>Following that, our <code>scripts</code> will look something like this:</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">&quot;lambda-serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;netlify-lambda serve lambda-src&quot;</span><span class="token punctuation">,</span>  <span class="token property">&quot;lambda-build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;netlify-lambda build lambda-src&quot;</span><span class="token punctuation">,</span>  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NODE_ENV=production webpack &amp;&amp; npm run lambda-build&quot;</span><span class="token punctuation">,</span>  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;NODE_ENV=development concurrently \&quot;webpack-dev-server --content-base src/\&quot; \&quot;npm run lambda-serve\&quot;&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
</code></pre></div>
<p>When <code>npm run dev</code> is fired, we’ll have a working development server for loading our static page, as well as a local endpoint for our function. Notice that we’re not passing any function-specific information to these commands – <code>netlify-lambda</code> will pull all that it needs from our <code>netlify.toml</code> file.</p>
<p><strong>After that, let’s define some variables we’ll need.</strong> Specifically, I’m talking about Stripe publishable and secret keys, which are 1) pieces of sensitive information we don’t want to commit to our repository, and 2) not the same between our development and production environments.</p>
<p>It’s possible to define things like this in a <code>netlify.toml</code> file, but because of those sensitivity concerns, we’re going to set these values in Netlify’s admin under the “Build &amp; deploy” section. This will prevent us from having to commit them to version control. You can get these keys from your Stripe dashboard.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8758bdca-9e18-4ed1-a26a-a5c86a529b23/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035424Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=edd257705012edd45bb082ba030fb45e60d8e34157807f91466befeece29e9ee&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt="Defining our Environment Variables"/></p>
<p>You’ll notice I also threw our <code>LAMBDA_ENDPOINT</code> in there too. More on that in a second.</p>
<p>To access these Stripe keys locally, we’ll be using the <a href="https://github.com/motdotla/dotenv" rel="nofollow">dotenv</a> (thanks to <a href="https://www.hawksworx.com/" rel="nofollow">Phil Hawksworth</a> for that tip!). What it does is pretty simple: when we reference an environment variable that isn’t defined in Node’s <code>process.env</code> object (like when we’re working locally), fill it in by referring to a <code>.env</code> file we’ll have in our project. This file <em>won’t</em> be committed to the repository, and will only contain test keys. That said, put this file into your <code>.gitignore</code> file to prevent it from ever being pushed up. This is… <em>key</em>.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">echo &amp;quot;.env&amp;quot; &amp;gt;&amp;gt; .gitignore</code></pre></div>
<p>Install the package and create that <code>.env</code> file.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">npm install dotenv -D
touch .env</code></pre></div>
<p>In that file, go ahead and fill the Stripe variables with test keys, but ignore the <code>LAMBDA_ENDPOINT</code> variable until the next section.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">STRIPE_PUBLISHABLE_KEY=&amp;quot;XXXXXX&amp;quot;
STRIPE_SECRET_KEY=&amp;quot;XXXXXX&amp;quot;
LAMBDA_ENDPOINT=&amp;quot;http://localhost:9000/purchase&amp;quot;</code></pre></div>
<h3 id="actually-writing-some-lambda-code"><a aria-hidden="true" tabindex="-1" href="#actually-writing-some-lambda-code"><span class="icon icon-link"></span></a>Actually Writing Some Lambda Code</h3>
<p><strong>Create a</strong> <strong><code>purchase.js</code></strong> <strong>file inside</strong> <strong><code>lambda-src</code>****.</strong> When we’re ready to post to our function, the name of the file inside of the <code>lambda</code> directory will become our endpoint. For us, when using <code>netlify-lambda</code> locally, this will be <code>http://localhost:9000/purchase</code>. After we deploy, you’ll use your site’s URL: <code>https://your-site-name.netlify.com/.netlify/functions/purchase</code>. You saw me already set this for each of our enviornments using the <code>LAMBDA_ENDPOINT</code> variable in the Netlify admin and our local <code>.env</code> file.</p>
<p>Kick off our function’s code by initializing <code>dotenv</code> and authenticating with Stripe. This will load any variables in our <code>.env</code> file into <code>process.env</code>, unless those variables are already set. Because of this, code is flexible regardless of our environment.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// purchase.js</span>

<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;dotenv&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;stripe&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">STRIPE_SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>Now, let’s set appropriate headers.</strong> We’ll want to make sure we’re allowing access to our function via AJAX, and also ensure that we can pass data successfully. For now, I’m just going to open it up to requests from any domain, but you’ll want to change that when you deploy. Because I want to later leverage JavaScript’s enhanced object literals, I also saved a default status code:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// purchase.js</span>

<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;dotenv&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;stripe&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">STRIPE_SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span>  
	<span class="token string-property property">&quot;Access-Control-Allow-Origin&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span>  
	<span class="token string-property property">&quot;Access-Control-Allow-Headers&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Content-Type&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>Next up, create a Lambda function handler.</strong> This is where the magic happens. Just to make sure things are working as they should, I’m gonna immediately return a response with a unique message in the body. If you’ve built Lambda functions with AWS and this looks vaguely familiar, there’s a reason for that. <a href="https://functions-beta--www.netlify.com/docs/lambda-functions/" rel="nofollow">Netlify deploys your function to AWS</a>.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// purchase.js</span>

exports<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>    
		statusCode<span class="token punctuation">,</span>    
		headers<span class="token punctuation">,</span>    
		<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#x27;Let there be light!&#x27;</span>  
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Quick thing: I’m using an <code>async</code> function for my Lambda. This is because we’ll later be doing some asynchronous work, and I prefer the cleaner syntax. But if you prefer to write something a little more verbose, you’ll need to return a <code>callback</code> method to return your response, which would look like this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// purchase.js</span>

exports<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token keyword control-flow">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    
		statusCode<span class="token punctuation">,</span>    
		headers<span class="token punctuation">,</span>    
		<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#x27;Let there be light!&#x27;</span>  
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Now, if we run <code>npm run lambda-serve</code> and head to <code>http://localhost:9000/purchase</code>, we should see ‘Let there be light!’ in the browser. Good sign!</p>
<p><strong>Add a small check to make sure we’re only dealing with POST requests.</strong> For the longest time, I was having an issue correctly parsing data from a request, only to discover it was because it wasn’t the data from my POST request I was trying to parse – it was from a preflight OPTIONS request that comes in to ensure the CORS protocol is understood. To prevent this from happening, use this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// purchase.js</span>

exports<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	<span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">httpMethod</span> <span class="token operator">!==</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
		<span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>      
			<span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token comment">// &lt;-- Important!      </span>
			headers<span class="token punctuation">,</span>      
			<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&quot;This was not a POST request!&quot;</span>    
		<span class="token punctuation">}</span><span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Here, it’s especially important to make sure you’re returning a valid <code>200</code> status code. If you don’t, that preflight request will fail, and a CORS-related error will be thrown.</p>
<p><strong>Now we can reliably parse the body and make sure we have everything we need.</strong> If we don’t, execute the callback with a message of some sort.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// purchase.js</span>

exports<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// We only care to do anything if this is our POST request.</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">httpMethod</span> <span class="token operator">!==</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
      statusCode<span class="token punctuation">,</span>
      headers<span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&quot;This was not a POST request!&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Parse the body contents into an object.</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Make sure we have all required data. Otherwise, get outta here.</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token property-access">token</span> <span class="token operator">||</span> <span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token property-access">amount</span> <span class="token operator">||</span> <span class="token operator">!</span>data<span class="token punctuation">.</span><span class="token property-access">idempotency_key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&quot;Required information is missing!&quot;</span><span class="token punctuation">;</span>

    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
      statusCode<span class="token punctuation">,</span>
      headers<span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;failed&quot;</span><span class="token punctuation">,</span>
        message
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>While we’re here, let’s break down this <code>data.token</code>, <code>data.amount</code>, and <code>data.idempotency_key</code> stuff for which we’re checking.</p>
<p><code>token</code>: This will be the unique payment token be generated by our checkout form on the front end. In it, the user’s email address is also included, which comes in handy to trigger email receipts.</p>
<p><code>amount</code>: This will be the price of the widget, measured in cents. So, <code>1000</code> is actually <code>$10.00</code>.</p>
<p><code>idempotency_key</code>: This is a good idea to pass to better <a href="https://stripe.com/docs/api?lang=curl#idempotent_requests" rel="nofollow">prevent the same operation from being accidentally performed twice</a>. It doesn’t necessarily matter what that value actually is – just that it’s unique.</p>
<p><strong>If the body has everything we require, pass it to Stripe to create a charge.</strong> After we get a response back, we’re returning the status of that charge back to the browser. Feel free to elaborate on this as you see fit. Create customers, trigger emails following a successful charge, whatever you like. The point is we create a charge and immediately let the browser know if it was successful or not.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// purchase.js</span>

<span class="token keyword">let</span> charge<span class="token punctuation">;</span>

<span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
  charge <span class="token operator">=</span> <span class="token keyword control-flow">await</span> stripe<span class="token punctuation">.</span><span class="token property-access">charges</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">currency</span><span class="token operator">:</span> <span class="token string">&quot;usd&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">amount</span><span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token property-access">amount</span><span class="token punctuation">,</span>
      <span class="token literal-property property">source</span><span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token property-access">token</span><span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">,</span>
      <span class="token literal-property property">receipt_email</span><span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token property-access">token</span><span class="token punctuation">.</span><span class="token property-access">email</span><span class="token punctuation">,</span>
      <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">charge for a widget</span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">idempotency_key</span><span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token property-access">idempotency_key</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">;</span>

  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">424</span><span class="token punctuation">,</span>
    headers<span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">status</span><span class="token operator">:</span> <span class="token string">&quot;failed&quot;</span><span class="token punctuation">,</span>
      message
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token punctuation">(</span>charge <span class="token operator">===</span> <span class="token keyword null nil">null</span> <span class="token operator">||</span> charge<span class="token punctuation">.</span><span class="token property-access">status</span> <span class="token operator">!==</span> <span class="token string">&quot;succeeded&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;failed&quot;</span> <span class="token operator">:</span> charge<span class="token punctuation">.</span><span class="token property-access">status</span><span class="token punctuation">;</span>

<span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
  statusCode<span class="token punctuation">,</span>
  headers<span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    status<span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;Charge successfully created!&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<h2 id="setting-up-the-front-end"><a aria-hidden="true" tabindex="-1" href="#setting-up-the-front-end"><span class="icon icon-link"></span></a>Setting Up the Front End</h2>
<p>At this point, we’re ready to start work on the front end, which will consist of generating a Stripe token and then posting it via AJAX to our Lambda function. To keep it simple, we’re going to be using Stripe Checkout to do this. Basically, just drop it in and you’re ready to go.</p>
<p><strong>Add the Stripe Checkout script to the bottom of the body in your</strong> <strong><code>index.html</code></strong> <strong>file, and add a button that’ll be used to open the checkout form.</strong></p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>  
	Click to Buy! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>$10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://checkout.stripe.com/checkout.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p><strong>Configure webpack to make our environment variables available on the front end.</strong> Much like we did before, we’ll initialize <code>dotenv</code> so we can access environment variables locally. At the top of our <code>webpack.config.js</code> file, let’s add this:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// front-end.js</span>

<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;dotenv&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;webpack&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// webpack configuration...</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>Same as before, we’re letting <code>dotenv</code> fill in the <code>process.env</code> gaps if a particular variable isn’t already defined. Below that, we expose those variables to our JavaScript using webpack’s <code>DefinePlugin</code>.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>

module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#x27;./src/front-end.js&#x27;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">&#x27;/src&#x27;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#x27;bundle.js&#x27;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token constant">LAMBDA_ENDPOINT</span><span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">LAMBDA_ENDPOINT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token constant">STRIPE_PUBLISHABLE_KEY</span><span class="token operator">:</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">STRIPE_PUBLISHABLE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p><strong>Now, let’s create a Stripe Checkout handler in our front-end.js file, and include that bundled</strong> <strong><code>bundle.js</code></strong> <strong>file at the bottom of</strong> <strong><code>index.html</code>****.</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// front-end.js</span>

<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token maybe-class-name">StripeCheckout</span><span class="token punctuation">.</span><span class="token method function property-access">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token constant">STRIPE_PUBLISHABLE_KEY</span><span class="token punctuation">,</span>
  <span class="token literal-property property">image</span><span class="token operator">:</span> <span class="token string">&quot;https://stripe.com/img/documentation/checkout/marketplace.png&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">locale</span><span class="token operator">:</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">token</span><span class="token operator">:</span> <span class="token parameter">token</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// We&#x27;ll fill this out in a second.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p><strong>Let’s open our checkout form when someone clicks the button.</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// front-end.js</span>

<span class="token comment">// Stripe handles pricing in cents, so this is actually $10.00.</span>
<span class="token keyword">const</span> amount <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

<span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  handler<span class="token punctuation">.</span><span class="token method function property-access">open</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    amount<span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Test Shop&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&quot;A Fantastic New Widget&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>At this point, when a user clicks the button on our page, a beautiful Stripe checkout form should pop up, ready to collect that user’s payment information. Once that form is submitted, we send that information to our function.</p>
<p><strong>Send the generated token to our Lambda function via AJAX.</strong> Add this to your <code>front-end.js</code> file, right after our token is generated. I’m using the browser’s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" rel="nofollow">Fetch API</a>, but really doesn’t matter what you choose.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">// front-end.js

const handler = StripeCheckout.configure({
  // -- Other stuff we&amp;#39;ve already gone through.
  token: async (token) =&amp;gt; {
    let response, data;

    try {
      response = await fetch(LAMBDA_ENDPOINT, {
        method: &amp;quot;POST&amp;quot;,
        body: JSON.stringify({
          token,
          amount,
          idempotency_key: uuid()
        }),
        headers: new Headers({
          &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;
        })
      });

      data = await response.json();
    } catch (error) {
      console.error(error.message);
      return;
    }
  };</code></pre></div>
<p>To generate our <code>idempotency_key</code>, I’m using the <a href="https://www.npmjs.com/package/uuid" rel="nofollow">uuid</a> package. It’s really unique (lol). Run <code>npm install uuid -D</code> and import it at the top of your file.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// front-end.js</span>

<span class="token keyword module">import</span> <span class="token imports">uuid</span> <span class="token keyword module">from</span> <span class="token string">&#x27;uuid/v4&#x27;</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Great, we’ve thrown a bunch of code together. Now…</p>
<p><strong>Let’s spin it up locally!</strong> If you recall the actions we set up, using <code>npm run dev</code> will spin up a webpack dev server, as well as trigger <code>netlify-lambda</code> to serve our function. Run that command, and our application should be available at <code>http://localhost:8080</code>. Click the button, enter your payment information (use <code>4242424242424242</code> for the card number in development mode), and you <em>should</em> see a successful response in the console. Of course, this is web development we’re doing here, where very little goes right the first time, so have some patience as you work out any issues you have standing it up.</p>
<h2 id="time-to-deploy"><a aria-hidden="true" tabindex="-1" href="#time-to-deploy"><span class="icon icon-link"></span></a>Time to Deploy!</h2>
<p><strong>Let’s get this sucka live.</strong> Put all this into a repository, log into your Netlify account, hook up the tubes, and set your environment variables, if you haven’t already. Because of our <code>netlify.toml</code> file, Netlify should already know from where to serve your function. Once that’s done, you should see our <code>purchase.js</code> function listed on the ‘Functions’ page, where logging will be available to view, should you need it. When you’re debugging, you can dump logs into this window by using <code>console.log()</code>.</p>
<h2 id="resources"><a aria-hidden="true" tabindex="-1" href="#resources"><span class="icon icon-link"></span></a>Resources</h2>
<p>If you want to dig into this particular example more yourself, check out <a href="https://github.com/alexmacarthur/netlify-function-example" rel="nofollow">the repo on Github</a>. There, I have a simple working demo that actually submits a fake payment to Stripe. If you wish that payment to be not fake, we can have that arranged.</p>
<p>When you’re ready to explore Lambda functions with Netlify yourself, <a href="https://www.netlify.com/docs/functions/" rel="nofollow">dig in here</a>.</p>
<h2 id="make-sense"><a aria-hidden="true" tabindex="-1" href="#make-sense"><span class="icon icon-link"></span></a>Make Sense?</h2>
<p>I hope this process was generally easy to follow without a whole lot of frustration. If you do have any questions, corrections, or tips for improving it, reach out!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Clean Up Your Redux Store Listeners When Component State Updates]]></title>
        <id>https://macarthur.me/posts/clean-up-your-redux-store-listeners-when-component-state-updates</id>
        <link href="https://macarthur.me/posts/clean-up-your-redux-store-listeners-when-component-state-updates"/>
        <updated>2020-03-30T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’m writing a Gutenberg block for TypeIt that’ll allow content creators to easily drop typewriter effects into WordPress. The Gutenberg infrastructure is heavily rooted in the React ecosystem, so building a block feels very much like building a React application. One piece of this ecosystem that’s new to me, however,...]]></summary>
        <content type="html"><![CDATA[<p>I’m writing a Gutenberg block for <a href="https://typeitjs.com/" rel="nofollow">TypeIt</a> that’ll allow content creators to easily drop typewriter effects into WordPress. The Gutenberg infrastructure is heavily rooted in the React ecosystem, so building a block feels very much like building a React application.</p>
<p>One piece of this ecosystem that’s new to me, however, is <a href="https://redux.js.org/" rel="nofollow">Redux</a>, and soon after I dove into it, I ran into a problem that had my head tilting for quite some time – enough time to warrant writing it down in case I ever need to explain it to myself again.</p>
<h2 id="the-problem"><a aria-hidden="true" tabindex="-1" href="#the-problem"><span class="icon icon-link"></span></a>The Problem</h2>
<p>The short version is that <strong>I seemingly couldn’t update local state inside a Redux store listener housed within that component.</strong> And in my particular setup, an infinite loop was resulting. I was dumbfounded.</p>
<h2 id="the-context"><a aria-hidden="true" tabindex="-1" href="#the-context"><span class="icon icon-link"></span></a>The Context</h2>
<p>In my code, I have a global Redux store that’s responsible for holding the <a href="https://typeitjs.com/docs#options" rel="nofollow">base options</a> for each TypeIt block on a page (why they’re managed separately like this is another conversation). Whenever a block is saved, I want to pull down that block’s options from the shared store and save them with the block itself, rather than storing them somewhere else altogether. Here is my professional artistic attempt to illustrate this arrangement:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/d527ddf8-acdc-4284-914d-8d4fefeda507/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=571b33e629539906c7770c7dc0eeb055ffdbb50ac69507377b75cdcfe8745959&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p><strong>I attempted to solve this by updating local block state whenever my global store changed.</strong> To pull it off, in my block’s component, I used Redux’s <code>subscribe</code> method to listen for any global store changes. When they occurred, I checked if the options for my specific block have changed, and if they did, I updated my block’s <code>attributes</code> (the <code>prop</code> used in a Gutenberg block to save and manage block data).</p>
<p>That looked something like this (a bit stripped down for brevity):</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token operator">=</span> wp<span class="token punctuation">.</span><span class="token property-access">element</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> subscribe <span class="token punctuation">}</span> <span class="token operator">=</span> wp<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">;</span>

<span class="token function">registerBlockType</span><span class="token punctuation">(</span><span class="token string">&#x27;wp-typeit/block&#x27;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token function-variable function">edit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> attributes<span class="token punctuation">,</span> setAttributes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> baseSettings <span class="token operator">=</span> wp<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token method function property-access">select</span><span class="token punctuation">(</span><span class="token string">&#x27;wp-typeit/store&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>instanceId<span class="token punctuation">]</span>

        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>baseSettings<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>attributes<span class="token punctuation">.</span><span class="token property-access">settings</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">setAttributes</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">settings</span><span class="token operator">:</span> baseSettings <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- Only set up listener on `mount`.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>This <em>looked</em> pretty safe. But when a global store change occurred, an infinite loop was set off within the component. I soon realized that the <code>setAttributes</code> method provided by Gutenberg triggered <em>another</em> store change (I don’t yet know why). Unexpected, but it still shouldn’t be a problem. After all, the next time the listener fires, my global settings <em>should</em> exactly match my local attributes, preventing the <code>setAttributes</code> method from being called again.</p>
<p>But that was apparently incorrect. As it turned out, within that <code>subscribe</code> listener, <em>my local state wasnt’t getting updated at all.</em> And so every time the listener fired, that equality check would fail every time, over and over again. Infinite loop.</p>
<h2 id="remember-this-is-react"><a aria-hidden="true" tabindex="-1" href="#remember-this-is-react"><span class="icon icon-link"></span></a>Remember, This Is React</h2>
<p>It took a bit, but the solution to this problem arose after remembering how React handles updates to its state. Every time a component’s state (including props) is changed, that component is re-rendered, and it’s only <em>after</em> that rerender when the updated state (including props) is available.</p>
<p>But my <code>subscribe</code> listener wasn’t respecting that. It was being activated <em>once</em> after the component mounted, and so it was only aware of the version of the props it had at that specific time. I could call <code>setAttributes</code> all I wanted, but that specific listener instance would behave as if nothing happened at all.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Listener is created ONCE, and never aware of future state updates.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2 id="the-solution-clean-up-store-listeners"><a aria-hidden="true" tabindex="-1" href="#the-solution-clean-up-store-listeners"><span class="icon icon-link"></span></a>The Solution: Clean Up Store Listeners</h2>
<p>In order to perform future store comparisons after my local state was updated, <strong>I needed to throw away my</strong> <strong><code>subscribe</code></strong> <strong>listener every time a local state change occurred</strong>. With my specific circumstances, that meant a few tweaks:</p>
<ol>
<li><strong>Extract the</strong> <strong><code>unsubscribe</code></strong> <strong>method</strong> returned <a href="https://redux.js.org/api/store#subscribelistener" rel="nofollow">when a subscribe listener is created</a>.</li>
<li><strong>Unsubscribe immediately before the</strong> <strong><code>setAttributes</code></strong> <strong>method fires.</strong> Since <code>setAttributes</code> triggers a global store change, this unplugs the listener to prevent it from firing before the local state is technically updated.</li>
<li><strong>Instead of setting up a single listener on</strong> <strong><code>mount</code>****, do so</strong> <em><strong>every time</strong></em> <strong>the block is updated.</strong> To avoid listeners becoming stacked upon listeners, I’m using the <a href="https://reactjs.org/docs/hooks-effect.html#example-using-hooks-1" rel="nofollow">cleanup mechanism</a> built into the <code>useEffect</code> hook by returning from the hook with an <code>unsubscribe()</code> method call. Even though I’m already unsubscribing every time I call <code>setAttributes</code>, this will cover my butt any time a different state change occurs, totally unrelated to these settings. The objective is to never have more than one store listener active in the component at once, and this helps guarantee that.</li>
</ol>
<p>In all, those changes look like this:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">const { useEffect } = wp.element;
const { subscribe } = wp.data;

registerBlockType(&#x27;wp-typeit/block&#x27;, {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // ...</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> edit: ({ attributes, setAttributes}) =&gt; {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   useEffect(() =&gt; {</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     // ...</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     subscribe(() =&gt; {</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     const unsubscribe = subscribe(() =&gt; {</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       let baseSettings = wp.data.select(&#x27;wp-typeit/store&#x27;).getSettings()[instanceId]</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       if (JSON.stringify(baseSettings) !== JSON.stringify(attributes.settings)) {</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         unsubscribe();</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">         setAttributes({ settings: baseSettings });</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       }</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">     }</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">      return () =&gt; {</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">        unsubscribe(); &lt;!-- Destroy listener after every state change.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">      }</span>
<span class="token line"></span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    }, []);</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    }); // &lt;!-- Activate new listener after every state change.</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }</span>
<span class="token line"></span></span>}
</code></pre></div>
<h2 id="takeaway-understand-the-react-lifecycle"><a aria-hidden="true" tabindex="-1" href="#takeaway-understand-the-react-lifecycle"><span class="icon icon-link"></span></a>Takeaway: Understand the React Lifecycle</h2>
<p>While this particular problem is highly specific to WordPress/Gutenberg, it all illustrates how important it is to have a solid understanding of the React lifecycle and the gotchas that it makes possible by nature. In fact, it’s probably a good practice to <em>start</em> troubleshooting bugs like this by rubber ducking the events leading up to and following the undesired behavior that’s occurring. If it’s anything like the challege I’ve shared here, you’ll walk away with a better understanding of how React fundamentally works, as well as confirmation that you’re not actually going insane.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Selecting Elements with No Class]]></title>
        <id>https://macarthur.me/posts/selecting-elements-with-no-class</id>
        <link href="https://macarthur.me/posts/selecting-elements-with-no-class"/>
        <updated>2018-01-01T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you’ve been a developer for more than 7 minutes, you’ve probably felt uncomfortably pressured into doing something weird with your code, like specifically styling plain, classless, attribute-less elements. Don’t ask for the details, just accept the reality of this happening sometimes. When I meet scenarios like this, by default,...]]></summary>
        <content type="html"><![CDATA[<p>If you’ve been a developer for more than 7 minutes, you’ve probably felt uncomfortably pressured into doing something weird with your code, like specifically styling plain, classless, attribute-less elements. Don’t ask for the details, just accept the reality of this happening sometimes.</p>
<p>When I meet scenarios like this, by default, I instantly architecting the most terrible, complicated solution that’s tied to my unique context.</p>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector"><span class="token class">.page-whatever-wordpress-plugin</span>  <span class="token class">.this-class</span>  <span class="token combinator">+</span> <span class="token class">.that-class</span>  <span class="token combinator">&gt;</span> h3<span class="token pseudo-class">:nth-child</span><span class="token punctuation">(</span><span class="token n-th"><span class="token number">3</span></span><span class="token punctuation">)</span>  <span class="token combinator">~</span> span</span> <span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre></div>
<p>For obvious reasons, solutions like this <em>usually</em> quickly pass by, and I’m forced to step back and rubber duck the problem verbally. Thankfully, for this problem, that conversation was over pretty quickly, when I realized we already have a solution for this.</p>
<h3 id="use-the-negation-pseudo-class-to-select-elements-that-do-not-have-something"><a aria-hidden="true" tabindex="-1" href="#use-the-negation-pseudo-class-to-select-elements-that-do-not-have-something"><span class="icon icon-link"></span></a>Use the negation pseudo-class to select elements that do <strong>not</strong> have something.</h3>
<p>Or, as you might otherwise call it, the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not" rel="nofollow">:not() selector</a>.</p>
<p>This trick isn’t new, but I’d usually seen it used to avoid selecting elements by a specific attribute <em>value</em>. For example:</p>
<ul>
<li>Selecting all elements that don’t have a <code>whatever-class-i-want-to-avoid</code> class:</li>
</ul>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector">*<span class="token pseudo-class">:not</span><span class="token punctuation">(</span><span class="token class">.whatever-class-i-want-to-avoid</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>
<ul>
<li>Select all elements that don’t have a <code>data-id</code> of 33.</li>
</ul>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector">*<span class="token pseudo-class">:not</span><span class="token punctuation">(</span><span class="token attribute"><span class="token punctuation">[</span><span class="token attr-name">data-id</span><span class="token operator">=</span><span class="token attr-value">&quot;33&quot;</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>
<p>But this time, I don’t care about what the value is. I want to know if the attribute exists on the element at all.</p>
<h3 id="you-can-use-the-negation-pseudo-class-to-not-select-only-by-attribute-too-crazy-text"><a aria-hidden="true" tabindex="-1" href="#you-can-use-the-negation-pseudo-class-to-not-select-only-by-attribute-too-crazy-text"><span class="icon icon-link"></span></a>You can use the negation pseudo-class to (not) select only by attribute too. <em>crazy text</em></h3>
<p>And remember, <code>class</code> <em>is</em> just an HTML attribute. Meaning, we can do completely permissible, non-hacky things like this:</p>
<ul>
<li>Select all elements that have no class:</li>
</ul>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector">*<span class="token pseudo-class">:not</span><span class="token punctuation">(</span><span class="token attribute"><span class="token punctuation">[</span><span class="token attr-name">class</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>
<ul>
<li>Select elements that have a class attribute whose value is empty:</li>
</ul>
<div class="remark-highlight"><pre class="language-css"><code class="language-css"><span class="token selector">*<span class="token pseudo-class">:not</span><span class="token punctuation">(</span><span class="token attribute"><span class="token punctuation">[</span><span class="token attr-name">class</span><span class="token operator">=</span><span class="token attr-value">&quot;&quot;</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div>
<p>Beyond that, we can do a wide range of things more concerned with the <em>existence</em> of an attribute rather than the attribute’s value. <a href="https://codepen.io/alexmacarthur/pen/zpJeeG/" rel="nofollow">See a brief example on CodePen.</a></p>
<p>And with that, another weird, one-off challenge resolved with tools we already had available to us.</p>
<p><a href="830c1c7d-ea74-49e6-bd03-86c76d1852ea">2020-04-13-why-webpacker-wouldnt-compile-assets-in-a-specific-environment</a></p>
<p>A while back, I started working in a Rails application in which I needed to introduce a JavaScript file that’d be compiled with Webpacker. To do so, I created the file in my <code>packs</code> directory and loaded it up via <code>content_for</code>:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">&amp;lt;% content_for(:body_assets) do %&amp;gt;
  &amp;lt;%= javascript_pack_tag(&amp;quot;some-file&amp;quot;) %&amp;gt;
&amp;lt;% end %&amp;gt;</code></pre></div>
<p>Locally, things worked great! But once I deployed, integration tests running in the CI pipeline would unexpectedly fail, even though the same tests were <em>passing</em> on my machine. After some time spent troubleshooting, it turned out to be one primary issue, which was drawn out by my misunderstanding of how Webpacker loads configuration settings for an environment. This is a quick review of the entire debugging process.</p>
<h2 id="problem-1-a-manifestjson-file-wasnt-being-generated"><a aria-hidden="true" tabindex="-1" href="#problem-1-a-manifestjson-file-wasnt-being-generated"><span class="icon icon-link"></span></a>Problem #1: A <code>manifest.json</code> file wasn’t being generated.</h2>
<p>As Rails is running a request and the <code>javascript_pack_tag</code> method is encountered, it’ll reference a <code>manifest.json</code> file in order to load the correct assets. If that file doesn’t exist, Rails vomits. This is the sort of error you’ll see:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">ActionView::Template::Error: Webpacker can&amp;#39;t find some-script in /my/app/path/public/packs/manifest.json. Possible causes:

1\. You want to set webpacker.yml value of compile to true for your environment
   unless you are using the `webpack -w` or the webpack-dev-server.
2\. webpack has not yet re-run to reflect updates.
3\. You have misconfigured Webpacker&amp;#39;s config/webpacker.yml file.
4\. Your webpack configuration is not creating a manifest.</code></pre></div>
<p>This made sense. Upon deploy, Webpacker was apparently not being told to compile assets <em>before</em> requests were made or <em>as</em> they were made, and so that file was never getting correctly generated.</p>
<h3 id="solution-ensure-my-webpackeryml-file-has-compile-set-to-true"><a aria-hidden="true" tabindex="-1" href="#solution-ensure-my-webpackeryml-file-has-compile-set-to-true"><span class="icon icon-link"></span></a>Solution: Ensure my <code>webpacker.yml</code> file has <code>compile</code> set to <code>true</code>.</h3>
<p>In all of my environments <em>except</em> <code>production</code>, I wanted to set <code>compile</code> to <code>true</code>, so that on each request, Rails would check to see if it needs to compile assets before continuing. Instead of duplicating this change in my <code>development</code> and <code>test</code> environments, I opted to make it the default, since <code>production</code> already had it explicitly set to <code>false</code>.</p>
<div class="remark-highlight"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token important">&amp;default</span>  <span class="token key atrule">compile</span><span class="token punctuation">:</span> <span class="token key atrule">truedevelopment</span><span class="token punctuation">:</span>  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span>    <span class="token important">*default</span>    <span class="token comment"># other settings...test:  &lt;&lt;: *default  # other settings...production:  &lt;&lt;: *default  compile:    false    # other settings...</span>
</code></pre></div>
<p>I felt good about this… until it failed.</p>
<h2 id="problem-2-webpacker-wasnt-respecting-default-settings-in-its-configuration-file"><a aria-hidden="true" tabindex="-1" href="#problem-2-webpacker-wasnt-respecting-default-settings-in-its-configuration-file"><span class="icon icon-link"></span></a>Problem #2: Webpacker wasn’t respecting default settings in its configuration file.</h2>
<p>After some brief internal rage, I noticed a particular log that I must have passed over earlier:</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">RAILS_ENV=build environment is not defined in config/webpacker.yml, falling back to production environment</code></pre></div>
<p>My tests were being run in the <code>build</code> environment – not <code>test</code>. And as it turns out, <strong>Webpacker will fall back</strong> <strong><code>production</code></strong> <strong>if it can’t find the specified environment.</strong> <em>This</em> is why my assets weren’t being compiled. A <code>build</code> environment wasn’t set in my Webpacker configuration file, so it was falling back to <code>production</code>, which was explicitly telling Webpacker to <em>not</em> compile assets.</p>
<h3 id="solution-ensure-my-environment-exists-in-the-webpackeryml-file"><a aria-hidden="true" tabindex="-1" href="#solution-ensure-my-environment-exists-in-the-webpackeryml-file"><span class="icon icon-link"></span></a>Solution: Ensure my environment exists in the <code>webpacker.yml</code> file.</h3>
<p>Like most bugs that tempt you to rip your hair out, the solution turned out to be two lines:</p>
<div class="remark-highlight"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>
</code></pre></div>
<p>Sure, enough. All was green after that change.</p>
<h2 id="key-takeaway-read-your-logs-good"><a aria-hidden="true" tabindex="-1" href="#key-takeaway-read-your-logs-good"><span class="icon icon-link"></span></a>Key Takeaway: Read Your Logs Good.</h2>
<p>What bit me here is some assumptions I made about how Webpacker loaded a configuration. The amount of time dealing with the consequences of those assumptions might have been avoided if I had been just a little more thorough in reading through the error logs. Don’t make this mistake yourself!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing a Regular Expression to Target Images Without a Class]]></title>
        <id>https://macarthur.me/posts/writing-a-regular-expression-to-target-images-without-a-class</id>
        <link href="https://macarthur.me/posts/writing-a-regular-expression-to-target-images-without-a-class"/>
        <updated>2019-01-16T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while back, I wrote about building your own lazy loading functionality into WordPress. In that post, I use a regular expression to add a lazy-load class to image tags that don’t already have any class. It failed. Rather than adding it to images with no preexisting class, it was...]]></summary>
        <content type="html"><![CDATA[<p>A while back, <a href="https://macarthur.me/posts/build-your-own-simple-lazy-loading-functionality-in-wordpress" rel="nofollow">I wrote about</a> building your own lazy loading functionality into WordPress. In that post, I use a regular expression to add a <code>lazy-load</code> class to image tags that don’t already have <em>any</em> class.</p>
<p>It failed. Rather than adding it to images with no preexisting class, it was added to <em>every</em> image, resulting in some images having two class attributes:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!--- This is bad. ---&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy-load<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-class<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/path.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Thankfully, a couple of readers caught the issue, sending me back to the regex drawing board, and causing me to feel a little deserved shame for blindly borrowing that initial expression from deep within the crevices of the internet.</p>
<h3 id="what-went-wrong"><a aria-hidden="true" tabindex="-1" href="#what-went-wrong"><span class="icon icon-link"></span></a>What Went Wrong</h3>
<p>Here’s where I started. I <em>thought</em> I had an expression that would match <code>img</code> tags void of the word “class,” but instead, I had one that was finding matches way too eagerly.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">&#x27;/&lt;img(.*?)(?!\bclass\b)(.*?)&gt;/i&#x27;</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#x27;&lt;img$1 class=&quot;lazy-load&quot;$2&gt;&#x27;</span><span class="token punctuation">,</span>
  <span class="token variable">$content</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>If you’re not already familiar with the <code>preg_replace()</code> method, <a href="http://php.net/manual/en/function.preg-replace.php" rel="nofollow">read about it here</a>. In short, it’s used to find matching regex patterns in a string, and then construct a new string that may or may not contain matching groups that have been captured (signified by <code>$[number]</code>).</p>
<p>Let’s toy with my initial expression. Take note of the first matching group: <code>(.*?)</code>. This group matches any bunch of characters (including a string as small as zero characters in length) that is <em>not</em> immediately followed by the word “class,” as indicated by <code>(?!\bclass\b)</code>. This all <em>sounds</em> like it should get the job done, but actually ends up matching a lot of stuff we don’t want, way too early on.</p>
<p>Here’s my string:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-class<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/path.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>To start, the pattern matches the point immediately following <code>&lt;img</code> in any image tag, since the next immediate character is <em>not</em> the initial boundary for the word “class,” but instead a space. Remember, the <code>(.*?)</code> group doesn’t require a match to have any length, so we get something like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/32a9b02b-4126-4c93-8243-eec2604f73c9/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=a3661640256f9e660ce62fa970f88845ebffd63e20189f3c283a2c343f0b8e56&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/ce2275ee-cc05-489d-b901-861921db3878/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=941a3290913e0d75eb5b6b550d27ceb46c54f443fac7d7634b66b64d176bca31&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>And because of this result, here’s how the string is processed by <code>preg_replace()</code>:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Before: --&gt;</span>
&lt;img [MATCH\][/MATCH] class=&quot;my-class&quot; src=&quot;/img/path.jpg&quot;&gt;

<span class="token comment">&lt;!-- After: TWO class attributes!= --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy-load<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-class<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/path.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Swapping attributes makes no difference – there will always be a zero-length match after <code>&lt;img</code>, since a space (and not a the beginning of the word “class”) always follows it. The <code>lazy-load</code> is always going to be added to that match, even when we don’t want it.</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Before: --&gt;</span>
&lt;img\[MATCH\][/MATCH] src=&quot;/img/path.jpg&quot; class=&quot;my-class&quot;&gt;

<span class="token comment">&lt;!-- After --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy-load<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/path.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-class<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Unfortunately, adding an explicit space after <code>&lt;img</code> to our pattern does nothing, because there’s guaranteed to always be at least one point at least zero characters long that meets the conditions of the expression.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">&#x27;/&lt;img (.*?)(?!\bclass\b)(.*?)&gt;/i&#x27;</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#x27;&lt;img $1class=&quot;lazy-load&quot;$2&gt;&#x27;</span><span class="token punctuation">,</span>
  <span class="token variable">$content</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Before: --&gt;</span>
&lt;img \[MATCH\][/MATCH]src=&quot;/img/path.jpg&quot; class=&quot;my-class&quot;&gt;

<span class="token comment">&lt;!-- After: FAIL --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy-load<span class="token punctuation">&quot;</span></span><span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/path.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-class<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Or, with attributes reversed:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Before: --&gt;</span>
&lt;img [MATCH]c[/MATCH]lass=&quot;my-class&quot; src=&quot;/img/path.jpg&quot;&gt;

<span class="token comment">&lt;!-- After: FAIL --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">cclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy-load<span class="token punctuation">&quot;</span></span><span class="token attr-name">lass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-class<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/path.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>This is where it made sense to experiment with the <code>+</code> quantifier, which, unlike the <code>*</code> quantifier, requires a match of <em>at least one character</em>. But yet again, that doesn’t help us much, because a match is nearly guaranteed to be found when progressing through each individual character of a string.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">&#x27;/&lt;img (.+?)(?!\bclass\b)(.*?)&gt;/i&#x27;</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#x27;&lt;img $1class=&quot;lazy-load&quot;$2&gt;&#x27;</span><span class="token punctuation">,</span>
  <span class="token variable">$content</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Similar markup, but shaken up attributes:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!-- Before: --&gt;</span>
&lt;img[MATCH]s[/MATCH]rc=&quot;/img/path.jpg&quot; class=&quot;my-class&quot;&gt;

<span class="token comment">&lt;!-- After: FAIL --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imgs</span> <span class="token attr-name">sclass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazy-load<span class="token punctuation">&quot;</span></span><span class="token attr-name">rc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/path.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-class<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<h3 id="what-worked"><a aria-hidden="true" tabindex="-1" href="#what-worked"><span class="icon icon-link"></span></a>What Worked</h3>
<p>Clearly, my expression’s main fault was its tendency to find a match way too soon, without searching the entire <code>img</code> string to know if it has <code>class=</code> or not. So, after several hours of beating my head against a screen, I ended up with this.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">/&amp;lt;img((.(?!class=))*)\/?&amp;gt;/</code></pre></div>
<p>Let’s take this real slow and piece it together from scratch.</p>
<p>First, I knew I wanted to target <code>img</code> tags, which have an opening <code>&lt;img</code>, followed by attributes and stuff (like a <code>src</code>, duh), and a closing bracket with an optional slash. Here are the components I started with:</p>
<p><a href="996bc1e0-6eea-4509-a213-9e4878df89ff">child_database</a></p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">/&amp;lt;img(.*)\/?&amp;gt;/</code></pre></div>
<p>Expectedly, this will match pretty much anything that has the shell of an <code>img</code> tag containing any characters, any number of times – signified by <code>(.*)</code>.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/82d0bddb-5186-4d68-ae51-157f895efdc4/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=ee2cc1782ff307e48f34f364f97df22a2cc1183e97e73097ba0ac9f6acdbafb4&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>And I know that within that shell, I’m just fine with matching anything – UNLESS it’s a class attribute. So, let’s modify that inner group. Rather than matching <em>any</em> character, let’s replace that character to target any character that is <em>not</em> followed by a class attribute.</p>
<div class="remark-highlight"><pre class="language-text"><code class="language-text">/&amp;lt;img((.(?!class=))*)\/?&amp;gt;/</code></pre></div>
<p>Here are our updated components:</p>
<p><a href="f8566bb4-f696-4da5-9284-20a230a6566c">child_database</a></p>
<p>Here’s what we get for matches when we run it against our string:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e0b07e11-302f-421d-a0c1-8064f6504995/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=4ad84f434d220e671a6f84cc8a3cb7032b2e9c379701aae3cb98626460e78b55&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Great, no match!</p>
<p>And if we were to remove that class attribute:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/edf2cd82-ddbf-4b88-88a8-d4e9e12b518e/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=57d45255f41b391e472f9c21cf15c472b40a0d350846823cbcd6a019a6c7aed2&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>Nailed it! This <em>should</em> cover most of our scenarios, allowing us to accurately add a new <code>class</code> attribute only to the images that don’t have any. From what I can tell, the only time we would get a match is when <code>class</code> is butt right up against <code>&lt;img</code>, when there would be no other character to precede the attribute.</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/60133900-448a-44b2-8daf-ef163f184c1c/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035423Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=39819cacd1840080a24575b310242415069f0344a0a510906ef9ef422872ef40&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>But that’s no longer a valid image tag, so that sort of risk really isn’t one at all. And with that, here’s our updated PHP call that should work exactly as we expect it.</p>
<div class="remark-highlight"><pre class="language-php"><code class="language-php"><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>
  <span class="token string single-quoted-string">&#x27;/&lt;img((.(?!class=))*)\/?&gt;/i&#x27;</span><span class="token punctuation">,</span>
  <span class="token string single-quoted-string">&#x27;&lt;img class=&quot;lazy-load&quot;$1&gt;&#x27;</span><span class="token punctuation">,</span>
  <span class="token variable">$content</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2 id="takeaways"><a aria-hidden="true" tabindex="-1" href="#takeaways"><span class="icon icon-link"></span></a>Takeaways</h2>
<p>First, learning to break up &amp; understand the fundamentals of regular expressions doesn’t <em>need</em> to be terrifying, especially if you’re patient and willing to start slow. This is, by far, the most significant thing with which I walked away from this process.</p>
<p>Second, with the patience &amp; willingness to understand why regular expressions behave the way they do, stop trusting any given expression you find on the street. With a renewed confidence in tackling stuff like this, I’m much less likely to be burned in the future.</p>
<p>Finally, find a good tool you’re willing to get comfortable with as you break these things apart. I spent a lot of time with <a href="https://regex101.com/" rel="nofollow">regex101</a>. For you, it might be something different. That’s cool, just know what it is, so you can jump to it when it’s needed.</p>
<p>Thanks for embarking on this journey with me!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[For the Sake of Your Event Listeners, Use Web Workers]]></title>
        <id>https://macarthur.me/posts/use-web-workers-for-your-event-listeners</id>
        <link href="https://macarthur.me/posts/use-web-workers-for-your-event-listeners"/>
        <updated>2019-11-16T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve been tinkering with the Web Worker API lately, and as a result, I’m really feeling the guilt of not looking into this well-supported tool a lot sooner. Modern web applications are seriously upping demands on the browser’s main thread, impacting performance and the ability to deliver smooth user experiences....]]></summary>
        <content type="html"><![CDATA[<p>I’ve been tinkering with the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" rel="nofollow">Web Worker API</a> lately, and as a result, I’m really feeling the guilt of not looking into this well-supported tool a lot sooner. Modern web applications are seriously upping demands on the browser’s main thread, impacting performance and the ability to deliver smooth user experiences. This tool is just one way to address the challenge.</p>
<h2 id="where-things-onclicked-for-me"><a aria-hidden="true" tabindex="-1" href="#where-things-onclicked-for-me"><span class="icon icon-link"></span></a>Where Things on(‘click’)ed for Me</h2>
<p>The advantages of Web Workers are many, but things really clicked for me when it came to the several DOM event listeners in any given application (form submissions, window resizes, button clicks, etc.) These all necessarily live on the browser’s main thread, and if that thread is congested by a long-running process, the responsiveness of those listeners begins to suffer, stalling the entire application until the event loop is free to continue firing.</p>
<p>Admittedly, the reason listeners stick out to me so much is due to my initial misunderstanding about the problems Workers are meant to solve. At first, I thought it was mainly about the <em>speed</em> of my code execution, start to finish. “If I can do more on separate threads in parallel, my code will execute so much more quickly!” But! It’s pretty common to <em>need</em> to wait for one thing to happen before another can start, like when you don’t want to update the DOM until some sort of calculation has taken place. “If I’m gonna have to wait anyway, I don’t see the point of moving something into a separate thread,” naive me thought.</p>
<p>Here’s the type of code that came to mind:</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> calculateResultsButton <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span>
  <span class="token string">&quot;calculateResultsButton&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> openMenuButton <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;#openMenuButton&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> resultBox <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;resultBox&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

calculateResultsButton<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// &quot;Why put this into a Worker when I</span>
  <span class="token comment">// can&#x27;t update the DOM until it&#x27;s done anyway?&quot;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">performLongRunningCalculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  resultBox<span class="token punctuation">.</span><span class="token property-access">innerText</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

openMenuButton<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do stuff to open menu.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>Here, I update the text of a box after performing some sort of presumably heavy calculation. Doing these things in parallel would be pointless (the DOM update necessarily depends on the calculation), so <em>of course</em> I want everything to be synchronous. What I didn’t initially understand was that <strong>none of the</strong> <em><strong>other</strong></em> <strong>listeners can fire if the thread is blocked</strong>. Meaning: things get janky.</p>
<h2 id="the-jank-illustrated"><a aria-hidden="true" tabindex="-1" href="#the-jank-illustrated"><span class="icon icon-link"></span></a>The Jank, Illustrated</h2>
<p>In the example below, clicking “Freeze” will kick off a synchronous pause for three seconds (simulating a long-running calculation) before incrementing the click count, and the “Increment” button will increment that count immediately. During the first button’s pause, the whole thread is at a standstill, preventing <em>any</em> other main thread activities from firing until the event loop can turn over again.</p>
<p>To witness this, click the first button and immediately click the second.</p>
<div>
        <p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="XWWKyGe" data-user="alexmacarthur" style="height:300px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em">
          <span><a href="https://codepen.io/alexmacarthur/pen/XWWKyGe" rel="nofollow">See the Pen</a> on <a href="https://codepen.io" rel="nofollow">CodePen</a>.</span>
        </p>
      </div>
<p>Frozen, because that long, synchronous pause is blocking the thread. And the impact goes beyond that. Do it again, but this time, immediately try to resize the blue-bordered box after clicking “Freeze.” Since the main thread is also where all layout changes and repainting occur, you’re yet again stuck until the timer is complete.</p>
<h2 id="theyre-listening-more-than-you-think"><a aria-hidden="true" tabindex="-1" href="#theyre-listening-more-than-you-think"><span class="icon icon-link"></span></a>They’re Listening More Than You Think</h2>
<p>Any normal user would be annoyed to have to deal with an experience like this – and we were only dealing with a couple of event listeners. In the real world, though, there’s a lot more going on. Using Chrome’s <code>getEventListeners</code> method, I used the following script to take a tally of all event listeners attached to every DOM element on a page. Drop it into the inspector, and it’ll spit back a total.</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token dom variable">document</span><span class="token punctuation">,</span> <span class="token spread operator">...</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token function">getEventListeners</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> property <span class="token keyword">in</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    accumulator <span class="token operator">=</span> accumulator <span class="token operator">+</span> listeners<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword control-flow">return</span> accumulator<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>I ran it on an arbitrary page within each of the following applications to get a quick count of the active listeners.</p>
<table><thead><tr><th>Application</th><th>Number of Listeners</th></tr></thead><tbody><tr><td>Dropbox</td><td>602</td></tr><tr><td>Google Messages</td><td>581</td></tr><tr><td>Reddit</td><td>692</td></tr><tr><td>YouTube</td><td>6,054 (!!!)</td></tr></tbody></table>
<p>Pay little attention to the specific numbers. The point is that the numbers are big, and <strong>if even a single long-running process in your application goes awry,</strong> <em><strong>all</strong></em> <strong>of these listeners will be unresponsive.</strong> That’s a lot of opportunity to frustrate your users.</p>
<h2 id="same-illustration-but-less-jank-thx-web-workers"><a aria-hidden="true" tabindex="-1" href="#same-illustration-but-less-jank-thx-web-workers"><span class="icon icon-link"></span></a>Same Illustration, but Less Jank (Thx, Web Workers!)</h2>
<p>With all that in mind, let’s upgrade the example from before. Same idea, but this time, that long-running operation has been moved into its own thread. Performing the same clicks again, you’ll see that clicking “Freeze” still delays the click count from being updated for 3 seconds, but it <em>doesn’t block any other event listeners on the page</em>. Instead, other buttons still click and boxes still resize, which is exactly what we want.</p>
<div>
        <p class="codepen" data-height="300" data-default-tab="html,result" data-slug-hash="qBEORdO" data-user="alexmacarthur" style="height:300px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em">
          <span><a href="https://codepen.io/alexmacarthur/pen/qBEORdO" rel="nofollow">See the Pen</a> on <a href="https://codepen.io" rel="nofollow">CodePen</a>.</span>
        </p>
      </div>
<p>If you dig into that code a bit, you’ll notice that while the Web Worker API could be a little more ergonomic, it really isn’t as scary as you might expect (a lot of that scariness is due to the way I quickly threw the example together). And to make things even <em>less</em> scary, there are some good tools out there to ease their implementation. Here are a few that caught my eye:</p>
<ul>
<li><a href="https://github.com/developit/workerize" rel="nofollow">workerize</a> – run a module inside a Web Worker</li>
<li><a href="https://github.com/developit/greenlet" rel="nofollow">greenlet</a> – run an arbitrary piece of async code inside a worker</li>
<li><a href="https://github.com/GoogleChromeLabs/comlink" rel="nofollow">comlink</a> – a friendly layer of abstraction over the Web Worker API</li>
</ul>
<h2 id="start-threadin-where-it-makes-sense"><a aria-hidden="true" tabindex="-1" href="#start-threadin-where-it-makes-sense"><span class="icon icon-link"></span></a>Start Threadin’ (Where It Makes Sense)</h2>
<p>If your application is typical, it probably has a lot of listenin’ going on. And it also probably does a lot of computing that just doesn’t need to happen on the main thread. So, do these listeners and your users a favor by considering where it makes sense to employ Web Workers.</p>
<p>To be clear, going all-in and throwing literally <em>all</em> non-UI work into worker threads is probably the wrong approach. You might just be introducing a lot of refactoring &amp; complexity to your app for little gain. Instead, maybe start by identifying notably intense processes and spin up a small Web Worker for them. Over time, it could make sense to stick your feet in a little deeper and rethink your UI/Worker architecture more at a wider scale.</p>
<p>Whatever the case, dig into it. With their solid browser support and the growing performance demands of modern applications, we’re running out of reasons to not invest in tools like this.</p>
<p>Happy threadin’!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Should We All Start Implementing Differential Serving?]]></title>
        <id>https://macarthur.me/posts/should-we-implement-differential-serving</id>
        <link href="https://macarthur.me/posts/should-we-implement-differential-serving"/>
        <updated>2019-08-22T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[There’s been a lot of discussion around the potential to serve browsers the JavaScript bundles they can support. For example, if a user’s on Internet Explorer, serve a transpiled, polyfilled bundle. If they’re on a modern version of Chrome, deliver the slimmer, non-transpiled version. To accomplish this, the module /...]]></summary>
        <content type="html"><![CDATA[<p>There’s been a lot of discussion around the potential to serve browsers the JavaScript bundles they can support. For example, if a user’s on Internet Explorer, serve a transpiled, polyfilled bundle. If they’re on a modern version of Chrome, deliver the slimmer, non-transpiled version.</p>
<p>To accomplish this, the <code>module</code> / <code>nomodule</code> trick has been thrown around quite a bit. It looks like this:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts.modern.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">nomodule</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scripts.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>Old browsers will pass over <code>type=&quot;module&quot;</code>and download the <code>nomodule</code> version. Modern browsers will pass over the <code>nomodule</code> attribute and download the <code>type=&quot;module&quot;</code> version. As a result, browsers get the code they can handle. These days, most of them can understand modern JavaScript anyway, so serving bundles in this way benefits most of sites’ visitors.</p>
<h2 id="yeah-but-is-it-reliable"><a aria-hidden="true" tabindex="-1" href="#yeah-but-is-it-reliable"><span class="icon icon-link"></span></a>Yeah, but is it reliable?</h2>
<p>From what I’ve read and witnessed, not very. <a href="https://www.johnstewart.dev/" rel="nofollow">John Stewart</a> has some <a href="https://github.com/johnstew/differential-serving#tests" rel="nofollow">really interesting results</a> he shared from his own research, revealing (and verified by my own tinkering) that quite a few browser versions end up downloading bundles they shouldn’t – sometimes even multiple times. So, if your user just happens to be using MS Edge 18, for example, you’re actually <em>harming</em> performance – not helping.</p>
<p>And even if the community’s generally moving away from the browsers with these issues, their use is still widespread enough to deter me from using the <code>module</code> / <code>nomodule</code> trick in production. At least for now.</p>
<h2 id="is-there-another-way"><a aria-hidden="true" tabindex="-1" href="#is-there-another-way"><span class="icon icon-link"></span></a>Is there another way?</h2>
<p>Yes, a couple of them.</p>
<h3 id="a-server-side-alternative"><a aria-hidden="true" tabindex="-1" href="#a-server-side-alternative"><span class="icon icon-link"></span></a>A Server-Side Alternative</h3>
<p>Some have explored <a href="https://www.johnstewart.dev/differential-serving#alternative-approach" rel="nofollow">a server-side solution</a> that examines a browser’s user agent before serving the correct assets. It’s more reliable in appearance (albeit certainly not bulletproof), but when caching and other factors are added to the mix, it gets complicated and unpredictable real fast. <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-user-agent-header" rel="nofollow">CloudFront, for example</a>, totally overrides the <code>User-Agent</code> header, and recommends that you don’t cache objects based on its incoming value anyway. Mozilla takes an even stronger position against <code>User-Agent</code> sniffing, outright saying that <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Considerations_before_using_browser_detection" rel="nofollow">you should just </a><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Considerations_before_using_browser_detection" rel="nofollow"><strong>never</strong></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Considerations_before_using_browser_detection" rel="nofollow"> do it</a>. Bold words! Literally. Their words are in bold on their site.</p>
<h3 id="a-client-side-alternative"><a aria-hidden="true" tabindex="-1" href="#a-client-side-alternative"><span class="icon icon-link"></span></a>A Client-Side Alternative</h3>
<p>Dare I say it, there <em>is</em> a JavaScript approach to explore:</p>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> <span class="token constant">MODERN_BUNDLE</span> <span class="token operator">=</span> <span class="token string">&quot;assets/dist/js/scripts.modern.min.js&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token constant">LEGACY_BUNDLE</span> <span class="token operator">=</span> <span class="token string">&quot;assets/dist/js/scripts.min.js&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">isModern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#x27;import(&quot;&quot;)&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> scriptTag <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scriptTag<span class="token punctuation">.</span><span class="token method function property-access">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> <span class="token function">isModern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MODERN_BUNDLE</span> <span class="token operator">:</span> <span class="token constant">LEGACY_BUNDLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">body</span><span class="token punctuation">.</span><span class="token method function property-access">appendChild</span><span class="token punctuation">(</span>scriptTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>
<p>By wrapping some modern feature inside a <code>try/catch</code> block, we can return a <code>boolean</code> in checking if a browser can understand modern JS. Once we know that, a <code>&lt;script&gt;</code> tag can be attached to the body to tell it exactly which file to download. I implemented this in my own sandbox, and it appears to work even using the problem browsers mentioned above.</p>
<p>Points for reliability, but it still doesn’t feel right. There’s an inherent performance tradeoff in needing go wait for a small piece of JS to parse and execute before you can download a big piece of JS. And after digging into this a little more, the performance losses were more significant than I anticipated.</p>
<h3 id="testing-the-client-side-approach"><a aria-hidden="true" tabindex="-1" href="#testing-the-client-side-approach"><span class="icon icon-link"></span></a>Testing the Client-Side Approach</h3>
<p>I ran through some scenarios loading a <strong>~300kb transpiled file</strong> and a <strong>~50kb “modern” file</strong> in three different ways. In my own experimentation, the amount of code I saved by not transpiling ranged from 10% - 50%, so I figured I’d test with a more extreme example (&gt; 80% savings) to determine if the load-via-JS approach is even reasonable. All of these examples involved loading the files at the end of the body, with the results being the approximate average of each approach with a simple static site on my local machine. Here they are:</p>
<p><strong>Standard</strong>: a simple <code>&lt;script&gt;</code> tag loading the 300kb file.</p>
<p><strong>Modern via HTML:</strong> loading the slim version with the <code>module</code> / <code>nomodule</code> trick.</p>
<p><strong>Modern via JS:</strong> loading the slim version after feature detection with JS.</p>
<p><a href="2634c99c-fe6b-4b10-b339-a673f55afa20">child_database</a></p>
<p>To no surprise, the slimmer file takes less time to download, but when it’s loaded via JS, it gets queued to download <em>far</em> later on. The embedded and JS approaches end up comparing something like this:</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/5948ba1d-363b-4d6f-8dbb-2318b33e691e/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20220830%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20220830T035424Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=5d9ae5b1159087c5cbff48d1ba205e4fcc2a68a81ca75fb4117bc89f111fdc28&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject" alt=""/></p>
<p>That’s significant. And likely due to a couple of reasons:</p>
<p><strong>First, it takes time to parse and execute JavaScript.</strong> There’s a whole lotta information out there on that, with one of the most well-known voices being Addy Osmani and his <a href="https://v8.dev/blog/cost-of-javascript-2019" rel="nofollow">Cost of JavaScript talks</a>.</p>
<p><strong>Second (and most primarily), you can’t take advantage of the browser’s speculative parsing</strong> (also referred to as “preload scanning”) when the file you want to download isn’t actually embedded into the document. <a href="https://hacks.mozilla.org/2017/09/building-the-dom-faster-speculative-parsing-async-defer-and-preload/" rel="nofollow">Milica Mihajlija has a great article on this</a> (which was published on my birthday – huge).</p>
<p>She explains that when loading the page, not-ancient browsers (meaning those since 2008) don’t strictly fetch scripts in the order they appear in the document. Instead, at the start of the page lifecycle, they “speculatively” discover assets that will eventually be needed and start loading them in the background. So, embedded scripts have a huge leg up vs. those loaded by JS, which first have to wait for their time to come in the DOM-building process before they can even <em>start</em> downloading. And that’s why that waterfall looks the way it does.</p>
<h3 id="can-we-make-this-more-performant"><a aria-hidden="true" tabindex="-1" href="#can-we-make-this-more-performant"><span class="icon icon-link"></span></a>Can we make this more performant?</h3>
<p>A couple of options did come to mind:</p>
<p>First, I tried loading the scripts in the <code>&lt;head&gt;</code> of the document rather than the <code>&lt;body&gt;</code>. It didn’t help much. I saved around 10-15ms due to the file being queued sooner, which doesn’t make up for the ~100ms lost in comparison to embedding those files into the document.</p>
<p>Second, I experimented with preloading the modern bundle in the <code>&lt;head&gt;</code> of the page. Queue times were <em>much</em> sooner in the page lifecycle, since speculative parsing can be leveraged, and since older browsers <a href="https://caniuse.com/#feat=link-rel-preload" rel="nofollow">don’t support the preload resource hint</a>, they won’t unnecessarily download assets they shouldn’t. This sounds good, but it also means that those same browsers will be slave to the gross loading times we discovered above. Depending on your industry, that’s often still a <em>lot</em> of users.</p>
<p>So, after all of that, the client-side approach turned out to be less than impressive.</p>
<h2 id="what-does-all-this-mean"><a aria-hidden="true" tabindex="-1" href="#what-does-all-this-mean"><span class="icon icon-link"></span></a>What does all this mean?</h2>
<p>The big implication of this stuff should be pretty obvious: as it’s been pitched, differential serving isn’t ready for mainstream implementation. As far as I’ve seen, there’s just too much hassle and unpredictability for not enough gain.</p>
<p>And even if it’s a matter of waiting for browsers to more consistently handle the <code>module</code> / <code>nomodule</code> trick, by the time they do, it might not be worth creating two different bundles at all. <a href="https://caniuse.com/#feat=es6" rel="nofollow">Support for ES2015 is getting </a><a href="https://caniuse.com/#feat=es6" rel="nofollow"><em>really</em></a><a href="https://caniuse.com/#feat=es6" rel="nofollow"> good</a>, with <strong>~91%</strong> of users being on browsers with full support, and <strong>~96%</strong> having at least partial support. And on top of that, the release rhythm for most browsers is pretty quick nowadays – around every couple of months or so, based on <a href="https://www.chromium.org/developers/calendar" rel="nofollow">Chromium’s</a> and <a href="https://wiki.mozilla.org/Release_Management/Calendar" rel="nofollow">Firefox’s</a> release calendars.</p>
<p>The point is that it probably won’t be long before “modern JavaScript” will just be understood as “JavaScript,” and worrying about getting differential serving down will probably amount to a lot of wasted energy.</p>
<h2 id="sorry"><a aria-hidden="true" tabindex="-1" href="#sorry"><span class="icon icon-link"></span></a>Sorry!</h2>
<p>If you read this in anticipation of me revealing a surprise, reliable alternative approach to differential serving… I apologize. At the very least, I hope you’ve gained some nuggets of insight!</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deploying Code with a Git Hook on a DigitalOcean Droplet]]></title>
        <id>https://macarthur.me/posts/deploying-code-with-a-git-hook</id>
        <link href="https://macarthur.me/posts/deploying-code-with-a-git-hook"/>
        <updated>2019-08-19T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve been working on a project involving long-running, resource-intensive batch jobs in Node. At first, when my needs were simpler, I used Heroku to run these jobs. It was great, but eventually, the price:performance ratio offered became a little too unwieldy, and I chose to make a move from Heroku...]]></summary>
        <content type="html"><![CDATA[<p>I’ve been working on a project involving long-running, resource-intensive batch jobs in Node. At first, when my needs were simpler, I used Heroku to run these jobs. It was great, but eventually, the price:performance ratio offered became a little too unwieldy, and I chose to make a move from Heroku to DigitalOcean.</p>
<p>Almost immediately, I was impressed. In just a short while, I was up and running these jobs with little issue. But there was one challenge I had yet to work out: setting up some sort of deployment process to get the code from my Git repository to my droplet. I was spoiled with Heroku. They make that part of the job incredibly hassle-free. But thankfully, when I made the move to DO, my needs were relatively straightforward:</p>
<ul>
<li>On a <code>git push</code>, I wanted my code to be copied to my droplet.</li>
<li>On that same push, I wanted to <code>npm install</code> the dependencies in my <code>package.json</code>.</li>
<li>I wanted the option to control which branches would trigger a deployment to that droplet.</li>
</ul>
<p>As it turned out, the setup was less complicated than I had been expecting. A single Git hook and a little local configuration meet all the needs noted above. This post is basically me backing up and documenting all that I pieced together from experimenting and Googling. Note that I’m not gonna get into the weeds of configuring a DigitalOcean or any other VPS. For the purposes of what I’m showing off here, just make sure you have a SSH access to your droplet, and that Git’s installed on it.</p>
<h2 id="configure-a-remote-repository-on-your-droplet"><a aria-hidden="true" tabindex="-1" href="#configure-a-remote-repository-on-your-droplet"><span class="icon icon-link"></span></a>Configure a Remote Repository on Your Droplet</h2>
<p><strong>First, create a bare repository on your droplet.</strong> A bare repository is one created without a working tree and used solely for <em>sharing</em> code – not working with it. We’ll only be pushing to this repository, so <code>--bare</code> is the way to go.</p>
<p>For this example, kick this of by <code>ssh</code>-ing into your droplet, creating a <code>neat-app-repo</code> directory, and initializing that repository.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">ssh</span> user@your-ip-address
<span class="token builtin class-name">cd</span> /home
<span class="token function">mkdir</span> neat-app-repo
<span class="token builtin class-name">cd</span> neat-app-repo
<span class="token function">git</span> init <span class="token parameter variable">--bare</span>
</code></pre></div>
<p><strong>Create a</strong> <strong><code>post-receive</code></strong> <strong>hook file inside your newly created repository.</strong> If you’re unfamiliar with them, <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hook" rel="nofollow">catch up.</a> In short, this hook will allows to do <em>something</em> after code has been <em>received</em> by the repository on the droplet (ie. when we do a <code>git push</code>). In our case, all we want to happen after our code is received is for it to be moved to a different directory and its dependencies installed.</p>
<p>If you <code>cd</code> into your <code>neat-app-repo/hooks</code> directory (this is one of the directories created when you initialized the bare repository), you should see a long list of <code>*.sample</code> Git hooks. While you’re there, create a <em>new</em> <code>post-receive</code> hook:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">touch</span> post-receive
</code></pre></div>
<p>And paste the following bones in there:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span>

<span class="token keyword">while</span> <span class="token builtin class-name">read</span> oldrev newrev ref
<span class="token keyword">do</span>
    <span class="token comment"># We gonna do stuff.</span>
<span class="token keyword">done</span>
</code></pre></div>
<p>That’s a <code>bash</code> <code>while read</code> loop with three parameters:</p>
<p><code>oldrev</code> - The SHA for the previous commit in the pushed branch.</p>
<p><code>newrev</code> - the SHA for the new commit in the pushed branch.</p>
<p><code>ref</code> - the Git reference of the branch just pushed. Example: <code>refs/heads/master</code></p>
<p>Inside of that block, we’re free to do whatever we want, like copy the branch that was just pushed to a different directory:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">#!/bin/bash

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"># Location of our bare repository.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">GIT_DIR=&quot;/home/neat-app-repo&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"># Where we want to copy our code.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">TARGET=&quot;/home/neat-app-deployed&quot;</span>
<span class="token line"></span></span>
while read oldrev newrev ref
do
<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   # We gonna do stuff.</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   # Neat trick to get the branch name of the reference just pushed:</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   BRANCH=$(git rev-parse --symbolic --abbrev-ref $ref)</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   # Send a nice message to the machine pushing to this remote repository.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   echo &quot;Push received! Deploying branch: ${BRANCH}...&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   # &quot;Deploy&quot; the branch we just pushed to a specific directory.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH</span>
<span class="token line"></span></span>done
</code></pre></div>
<p>After saving that, a couple more steps are required before it’s actually usable:</p>
<ol>
<li>Make sure that hook is executable. If you skip this, you’ll get a <code>The &#x27;hooks/post-receive&#x27; hook was ignored because it&#x27;s not set as executable</code> error when you push from your machine.</li>
</ol>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">chmod</span> +x post-receive
</code></pre></div>
<ol>
<li>Make sure the target directory actually exists. If it doesn’t, you’ll get another error.</li>
</ol>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">mkdir</span> /home/neat-app-deployed
</code></pre></div>
<p>Now, for testing purposes, open up the repository on your local machine and set the <code>origin</code> to where your bare repository is located on your droplet.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">git</span> remote <span class="token function">add</span> origin root@YOUR_IP_ADDRESS:/home/neat-app-repo
</code></pre></div>
<p>Make an arbitrary commit and give it a <code>git push</code>. If successful, you should see something like this.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">remote: Push received<span class="token operator">!</span> Deploying branch: master<span class="token punctuation">..</span>.
remote: Switched to branch <span class="token string">&#x27;master&#x27;</span>
</code></pre></div>
<p><strong>Now, let’s (optionally) limit new deployments to specific branches.</strong> If you make a new branch and push it to your droplet, you’ll see it deploys successfully, just as if you were on <code>master</code>. Probably less than ideal, so let’s modify our hook to deploy only when the master branch is pushed.</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">#!/bin/bash

# Location of our bare repository.
GIT_DIR=&quot;/home/neat-app-repo&quot;

# Where we want to copy our code.
TARGET=&quot;/home/neat-app-deployed&quot;

while read oldrev newrev ref
do
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   # Neat trick to get the branch name of the reference just pushed:</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   BRANCH=$(git rev-parse --symbolic --abbrev-ref $ref)</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    if [[ $BRANCH == &quot;master&quot; ]];</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">    then</span>
<span class="token line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       # Send a nice message to the machine pushing to this remote repository.</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       echo &quot;Push received! Deploying branch: ${BRANCH}...&quot;</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       # &quot;Deploy&quot; the branch we just pushed to a specific directory.</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH</span>
<span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    else</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">       echo &quot;Not master branch. Skipping.&quot;</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">    fi</span>
<span class="token line"></span></span>done
</code></pre></div>
<p>Gr8! Now, since my project was in Node, I needed to set up one final thing: <strong>run</strong> **<code>npm install</code>**<strong>on each deployment.</strong> In my case, <code>nvm</code> is in charge of specifying which version of Node I run, so updating my hook looks like this:</p>
<div class="remark-highlight"><pre class="language-diff"><code class="language-diff">#!/bin/bash

# Location of our bare repository.
GIT_DIR=&quot;/home/neat-app-repo&quot;

# Where we want to copy our code.
TARGET=&quot;/home/neat-app-deployed&quot;

while read oldrev newrev ref
do
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   # Neat trick to get the branch name of the reference just pushed:</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   BRANCH=$(git rev-parse --symbolic --abbrev-ref $ref)</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   if [[ $BRANCH == &quot;master&quot; ]];</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   then</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       # Send a nice message to the machine pushing to this remote repository.</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       echo &quot;Push received! Deploying branch: ${BRANCH}...&quot;</span>
<span class="token line"></span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       # &quot;Deploy&quot; the branch we just pushed to a specific directory.</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   else</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">       echo &quot;Not master branch. Skipping.&quot;</span>
<span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line">   fi</span>
<span class="token line"></span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   # Source nvm to make it available for use inside this script.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   . $HOME/.nvm/nvm.sh</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   # Use the LTS version of Node.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   nvm use --lts</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   # Navigate to where my deployed code lives.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   cd /home/neat-app-deployed</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line"></span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   # Install dependencies in production mode.</span>
<span class="token line"></span><span class="token prefix inserted">+</span><span class="token line">   npm install --production</span>
<span class="token line"></span></span>done
</code></pre></div>
<p>And with that, pushing to my droplet will now deploy my code exactly where I want it, as well as install the dependencies it needs to run.</p>
<h2 id="configure-your-local-repository-for-easier-deployments"><a aria-hidden="true" tabindex="-1" href="#configure-your-local-repository-for-easier-deployments"><span class="icon icon-link"></span></a>Configure Your Local Repository for Easier Deployments</h2>
<p>When I first got this all set up, I assumed that if I wanted to push my code up to a remote GitHub repository <em>and</em> deploy it to DO simultaneously, I’d need to create two remotes and push them separately. Then I saw this tweet:</p>
<blockquote>
<p>TIL you can add two different Git repo URLs on the same remote and a single git push will push to both. Sometimes the orange website is useful! pic.twitter.com/lwjEmj1RAM</p>
</blockquote>
<p><a href="https://twitter.com/dceddia/status/1153365976588664833?ref_src=twsrc%5Etfw" rel="nofollow">July 22, 2019</a></p>
<p>One push, two destinations. And with our <code>post-receive</code> hook only deploying pushes to the <code>master</code> branch, this is a good balance of efficiency and safety for our workflow.</p>
<p>Admittedly, configuring my Git remotes locally was a little weird, but working it all out eventually came to this. Note: this assumes you already had the DO droplet set as your <code>origin</code>.</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token comment"># Change the `fetch` URL, so we always pull code from GitHub.</span>
<span class="token function">git</span> remote set-url origin git@github.com:alexmacarthur/neat-app.git

<span class="token comment"># Re-add `push` URLs, so that we push to GitHub AND DigitalOcean.</span>
<span class="token function">git</span> remote set-url <span class="token parameter variable">--add</span> <span class="token parameter variable">--push</span> origin root@YOUR_IP_ADDRESS:/home/neat-app-repo
<span class="token function">git</span> remote set-url <span class="token parameter variable">--add</span> <span class="token parameter variable">--push</span> origin git@github.com:alexmacarthur/neat-app.git
</code></pre></div>
<p>In the end <code>git remote -v</code> returns this:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">origin  root@YOUR_IP_ADDRESS:/home/neat-app-repo <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>
origin  git@github.com:alexmacarthur/neat-app.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
origin  root@YOUR_IP_ADDRESS:/home/neat-app-repo <span class="token punctuation">(</span>push<span class="token punctuation">)</span>
</code></pre></div>
<p>With that configured, a simple <code>git push</code> sends your code to two separate remotes, saving you seconds per day, perhaps.</p>
<h2 id="expect-gotchas"><a aria-hidden="true" tabindex="-1" href="#expect-gotchas"><span class="icon icon-link"></span></a>Expect Gotchas</h2>
<p>While it might be conceptually straightforward, working through the details of all this was periodically frustrating for me, especially since it was my first time pulling off such a thing. That said, give yourself a little grace in dealing with the gotchas that will inevitably come up. Hopefully what you read here will help alleviate the pains of the process even just a little bit. If that’s true, writing this all out was worth it.</p>]]></content>
        <author>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </author>
        <contributor>
            <name>Alex MacArthur</name>
            <uri>https://macarthur.me</uri>
        </contributor>
    </entry>
</feed>